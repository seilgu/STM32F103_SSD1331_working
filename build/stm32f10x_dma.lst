ARM GAS  /tmp/cccwCEm5.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_dma.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.DMA_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	DMA_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	DMA_DeInit:
  24              	.LFB56:
  25              		.file 1 "stm_lib/src/stm32f10x_dma.c"
   1:stm_lib/src/stm32f10x_dma.c **** /**
   2:stm_lib/src/stm32f10x_dma.c ****   ******************************************************************************
   3:stm_lib/src/stm32f10x_dma.c ****   * @file    stm32f10x_dma.c
   4:stm_lib/src/stm32f10x_dma.c ****   * @author  MCD Application Team
   5:stm_lib/src/stm32f10x_dma.c ****   * @version V3.5.0
   6:stm_lib/src/stm32f10x_dma.c ****   * @date    11-March-2011
   7:stm_lib/src/stm32f10x_dma.c ****   * @brief   This file provides all the DMA firmware functions.
   8:stm_lib/src/stm32f10x_dma.c ****   ******************************************************************************
   9:stm_lib/src/stm32f10x_dma.c ****   * @attention
  10:stm_lib/src/stm32f10x_dma.c ****   *
  11:stm_lib/src/stm32f10x_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:stm_lib/src/stm32f10x_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:stm_lib/src/stm32f10x_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:stm_lib/src/stm32f10x_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:stm_lib/src/stm32f10x_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:stm_lib/src/stm32f10x_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:stm_lib/src/stm32f10x_dma.c ****   *
  18:stm_lib/src/stm32f10x_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:stm_lib/src/stm32f10x_dma.c ****   ******************************************************************************
  20:stm_lib/src/stm32f10x_dma.c ****   */
  21:stm_lib/src/stm32f10x_dma.c **** 
  22:stm_lib/src/stm32f10x_dma.c **** /* Includes ------------------------------------------------------------------*/
  23:stm_lib/src/stm32f10x_dma.c **** #include "stm32f10x_dma.h"
  24:stm_lib/src/stm32f10x_dma.c **** #include "stm32f10x_rcc.h"
  25:stm_lib/src/stm32f10x_dma.c **** 
  26:stm_lib/src/stm32f10x_dma.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:stm_lib/src/stm32f10x_dma.c ****   * @{
  28:stm_lib/src/stm32f10x_dma.c ****   */
  29:stm_lib/src/stm32f10x_dma.c **** 
  30:stm_lib/src/stm32f10x_dma.c **** /** @defgroup DMA 
  31:stm_lib/src/stm32f10x_dma.c ****   * @brief DMA driver modules
  32:stm_lib/src/stm32f10x_dma.c ****   * @{
  33:stm_lib/src/stm32f10x_dma.c ****   */ 
ARM GAS  /tmp/cccwCEm5.s 			page 2


  34:stm_lib/src/stm32f10x_dma.c **** 
  35:stm_lib/src/stm32f10x_dma.c **** /** @defgroup DMA_Private_TypesDefinitions
  36:stm_lib/src/stm32f10x_dma.c ****   * @{
  37:stm_lib/src/stm32f10x_dma.c ****   */ 
  38:stm_lib/src/stm32f10x_dma.c **** /**
  39:stm_lib/src/stm32f10x_dma.c ****   * @}
  40:stm_lib/src/stm32f10x_dma.c ****   */
  41:stm_lib/src/stm32f10x_dma.c **** 
  42:stm_lib/src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Defines
  43:stm_lib/src/stm32f10x_dma.c ****   * @{
  44:stm_lib/src/stm32f10x_dma.c ****   */
  45:stm_lib/src/stm32f10x_dma.c **** 
  46:stm_lib/src/stm32f10x_dma.c **** 
  47:stm_lib/src/stm32f10x_dma.c **** /* DMA1 Channelx interrupt pending bit masks */
  48:stm_lib/src/stm32f10x_dma.c **** #define DMA1_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  49:stm_lib/src/stm32f10x_dma.c **** #define DMA1_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  50:stm_lib/src/stm32f10x_dma.c **** #define DMA1_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  51:stm_lib/src/stm32f10x_dma.c **** #define DMA1_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  52:stm_lib/src/stm32f10x_dma.c **** #define DMA1_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  53:stm_lib/src/stm32f10x_dma.c **** #define DMA1_Channel6_IT_Mask    ((uint32_t)(DMA_ISR_GIF6 | DMA_ISR_TCIF6 | DMA_ISR_HTIF6 | DMA_ISR
  54:stm_lib/src/stm32f10x_dma.c **** #define DMA1_Channel7_IT_Mask    ((uint32_t)(DMA_ISR_GIF7 | DMA_ISR_TCIF7 | DMA_ISR_HTIF7 | DMA_ISR
  55:stm_lib/src/stm32f10x_dma.c **** 
  56:stm_lib/src/stm32f10x_dma.c **** /* DMA2 Channelx interrupt pending bit masks */
  57:stm_lib/src/stm32f10x_dma.c **** #define DMA2_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  58:stm_lib/src/stm32f10x_dma.c **** #define DMA2_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  59:stm_lib/src/stm32f10x_dma.c **** #define DMA2_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  60:stm_lib/src/stm32f10x_dma.c **** #define DMA2_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  61:stm_lib/src/stm32f10x_dma.c **** #define DMA2_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  62:stm_lib/src/stm32f10x_dma.c **** 
  63:stm_lib/src/stm32f10x_dma.c **** /* DMA2 FLAG mask */
  64:stm_lib/src/stm32f10x_dma.c **** #define FLAG_Mask                ((uint32_t)0x10000000)
  65:stm_lib/src/stm32f10x_dma.c **** 
  66:stm_lib/src/stm32f10x_dma.c **** /* DMA registers Masks */
  67:stm_lib/src/stm32f10x_dma.c **** #define CCR_CLEAR_Mask           ((uint32_t)0xFFFF800F)
  68:stm_lib/src/stm32f10x_dma.c **** 
  69:stm_lib/src/stm32f10x_dma.c **** /**
  70:stm_lib/src/stm32f10x_dma.c ****   * @}
  71:stm_lib/src/stm32f10x_dma.c ****   */
  72:stm_lib/src/stm32f10x_dma.c **** 
  73:stm_lib/src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Macros
  74:stm_lib/src/stm32f10x_dma.c ****   * @{
  75:stm_lib/src/stm32f10x_dma.c ****   */
  76:stm_lib/src/stm32f10x_dma.c **** 
  77:stm_lib/src/stm32f10x_dma.c **** /**
  78:stm_lib/src/stm32f10x_dma.c ****   * @}
  79:stm_lib/src/stm32f10x_dma.c ****   */
  80:stm_lib/src/stm32f10x_dma.c **** 
  81:stm_lib/src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Variables
  82:stm_lib/src/stm32f10x_dma.c ****   * @{
  83:stm_lib/src/stm32f10x_dma.c ****   */
  84:stm_lib/src/stm32f10x_dma.c **** 
  85:stm_lib/src/stm32f10x_dma.c **** /**
  86:stm_lib/src/stm32f10x_dma.c ****   * @}
  87:stm_lib/src/stm32f10x_dma.c ****   */
  88:stm_lib/src/stm32f10x_dma.c **** 
  89:stm_lib/src/stm32f10x_dma.c **** /** @defgroup DMA_Private_FunctionPrototypes
  90:stm_lib/src/stm32f10x_dma.c ****   * @{
ARM GAS  /tmp/cccwCEm5.s 			page 3


  91:stm_lib/src/stm32f10x_dma.c ****   */
  92:stm_lib/src/stm32f10x_dma.c **** 
  93:stm_lib/src/stm32f10x_dma.c **** /**
  94:stm_lib/src/stm32f10x_dma.c ****   * @}
  95:stm_lib/src/stm32f10x_dma.c ****   */
  96:stm_lib/src/stm32f10x_dma.c **** 
  97:stm_lib/src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Functions
  98:stm_lib/src/stm32f10x_dma.c ****   * @{
  99:stm_lib/src/stm32f10x_dma.c ****   */
 100:stm_lib/src/stm32f10x_dma.c **** 
 101:stm_lib/src/stm32f10x_dma.c **** /**
 102:stm_lib/src/stm32f10x_dma.c ****   * @brief  Deinitializes the DMAy Channelx registers to their default reset
 103:stm_lib/src/stm32f10x_dma.c ****   *         values.
 104:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
 105:stm_lib/src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 106:stm_lib/src/stm32f10x_dma.c ****   * @retval None
 107:stm_lib/src/stm32f10x_dma.c ****   */
 108:stm_lib/src/stm32f10x_dma.c **** void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
 109:stm_lib/src/stm32f10x_dma.c **** {
  26              		.loc 1 109 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 110:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 111:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 112:stm_lib/src/stm32f10x_dma.c ****   
 113:stm_lib/src/stm32f10x_dma.c ****   /* Disable the selected DMAy Channelx */
 114:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  32              		.loc 1 114 0
  33 0000 0368     		ldr	r3, [r0]
  34 0002 23F00103 		bic	r3, r3, #1
  35 0006 1B04     		lsls	r3, r3, #16
  36 0008 1B0C     		lsrs	r3, r3, #16
  37 000a 0360     		str	r3, [r0]
 115:stm_lib/src/stm32f10x_dma.c ****   
 116:stm_lib/src/stm32f10x_dma.c ****   /* Reset DMAy Channelx control register */
 117:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CCR  = 0;
  38              		.loc 1 117 0
  39 000c 0023     		movs	r3, #0
  40 000e 0360     		str	r3, [r0]
 118:stm_lib/src/stm32f10x_dma.c ****   
 119:stm_lib/src/stm32f10x_dma.c ****   /* Reset DMAy Channelx remaining bytes register */
 120:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CNDTR = 0;
  41              		.loc 1 120 0
  42 0010 4360     		str	r3, [r0, #4]
 121:stm_lib/src/stm32f10x_dma.c ****   
 122:stm_lib/src/stm32f10x_dma.c ****   /* Reset DMAy Channelx peripheral address register */
 123:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CPAR  = 0;
  43              		.loc 1 123 0
  44 0012 8360     		str	r3, [r0, #8]
 124:stm_lib/src/stm32f10x_dma.c ****   
 125:stm_lib/src/stm32f10x_dma.c ****   /* Reset DMAy Channelx memory address register */
 126:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CMAR = 0;
  45              		.loc 1 126 0
  46 0014 C360     		str	r3, [r0, #12]
ARM GAS  /tmp/cccwCEm5.s 			page 4


 127:stm_lib/src/stm32f10x_dma.c ****   
 128:stm_lib/src/stm32f10x_dma.c ****   if (DMAy_Channelx == DMA1_Channel1)
  47              		.loc 1 128 0
  48 0016 364B     		ldr	r3, .L26
  49 0018 9842     		cmp	r0, r3
  50 001a 21D0     		beq	.L14
 129:stm_lib/src/stm32f10x_dma.c ****   {
 130:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel1 */
 131:stm_lib/src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 132:stm_lib/src/stm32f10x_dma.c ****   }
 133:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel2)
  51              		.loc 1 133 0
  52 001c 354B     		ldr	r3, .L26+4
  53 001e 9842     		cmp	r0, r3
  54 0020 24D0     		beq	.L15
 134:stm_lib/src/stm32f10x_dma.c ****   {
 135:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel2 */
 136:stm_lib/src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 137:stm_lib/src/stm32f10x_dma.c ****   }
 138:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel3)
  55              		.loc 1 138 0
  56 0022 354B     		ldr	r3, .L26+8
  57 0024 9842     		cmp	r0, r3
  58 0026 27D0     		beq	.L16
 139:stm_lib/src/stm32f10x_dma.c ****   {
 140:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel3 */
 141:stm_lib/src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 142:stm_lib/src/stm32f10x_dma.c ****   }
 143:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel4)
  59              		.loc 1 143 0
  60 0028 344B     		ldr	r3, .L26+12
  61 002a 9842     		cmp	r0, r3
  62 002c 2AD0     		beq	.L17
 144:stm_lib/src/stm32f10x_dma.c ****   {
 145:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel4 */
 146:stm_lib/src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 147:stm_lib/src/stm32f10x_dma.c ****   }
 148:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel5)
  63              		.loc 1 148 0
  64 002e 344B     		ldr	r3, .L26+16
  65 0030 9842     		cmp	r0, r3
  66 0032 2DD0     		beq	.L18
 149:stm_lib/src/stm32f10x_dma.c ****   {
 150:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel5 */
 151:stm_lib/src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 152:stm_lib/src/stm32f10x_dma.c ****   }
 153:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel6)
  67              		.loc 1 153 0
  68 0034 334B     		ldr	r3, .L26+20
  69 0036 9842     		cmp	r0, r3
  70 0038 30D0     		beq	.L19
 154:stm_lib/src/stm32f10x_dma.c ****   {
 155:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel6 */
 156:stm_lib/src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 157:stm_lib/src/stm32f10x_dma.c ****   }
 158:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel7)
  71              		.loc 1 158 0
ARM GAS  /tmp/cccwCEm5.s 			page 5


  72 003a 334B     		ldr	r3, .L26+24
  73 003c 9842     		cmp	r0, r3
  74 003e 33D0     		beq	.L20
 159:stm_lib/src/stm32f10x_dma.c ****   {
 160:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel7 */
 161:stm_lib/src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 162:stm_lib/src/stm32f10x_dma.c ****   }
 163:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel1)
  75              		.loc 1 163 0
  76 0040 324B     		ldr	r3, .L26+28
  77 0042 9842     		cmp	r0, r3
  78 0044 36D0     		beq	.L21
 164:stm_lib/src/stm32f10x_dma.c ****   {
 165:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel1 */
 166:stm_lib/src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 167:stm_lib/src/stm32f10x_dma.c ****   }
 168:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel2)
  79              		.loc 1 168 0
  80 0046 324B     		ldr	r3, .L26+32
  81 0048 9842     		cmp	r0, r3
  82 004a 39D0     		beq	.L22
 169:stm_lib/src/stm32f10x_dma.c ****   {
 170:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel2 */
 171:stm_lib/src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 172:stm_lib/src/stm32f10x_dma.c ****   }
 173:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel3)
  83              		.loc 1 173 0
  84 004c 314B     		ldr	r3, .L26+36
  85 004e 9842     		cmp	r0, r3
  86 0050 3CD0     		beq	.L23
 174:stm_lib/src/stm32f10x_dma.c ****   {
 175:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel3 */
 176:stm_lib/src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 177:stm_lib/src/stm32f10x_dma.c ****   }
 178:stm_lib/src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel4)
  87              		.loc 1 178 0
  88 0052 314B     		ldr	r3, .L26+40
  89 0054 9842     		cmp	r0, r3
  90 0056 3FD0     		beq	.L24
 179:stm_lib/src/stm32f10x_dma.c ****   {
 180:stm_lib/src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel4 */
 181:stm_lib/src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 182:stm_lib/src/stm32f10x_dma.c ****   }
 183:stm_lib/src/stm32f10x_dma.c ****   else
 184:stm_lib/src/stm32f10x_dma.c ****   { 
 185:stm_lib/src/stm32f10x_dma.c ****     if (DMAy_Channelx == DMA2_Channel5)
  91              		.loc 1 185 0
  92 0058 304B     		ldr	r3, .L26+44
  93 005a 9842     		cmp	r0, r3
  94 005c 42D0     		beq	.L25
  95              	.L1:
  96 005e 7047     		bx	lr
  97              	.L14:
 131:stm_lib/src/stm32f10x_dma.c ****   }
  98              		.loc 1 131 0
  99 0060 2F4A     		ldr	r2, .L26+48
 100 0062 5368     		ldr	r3, [r2, #4]
ARM GAS  /tmp/cccwCEm5.s 			page 6


 101 0064 43F00F03 		orr	r3, r3, #15
 102 0068 5360     		str	r3, [r2, #4]
 103 006a 7047     		bx	lr
 104              	.L15:
 136:stm_lib/src/stm32f10x_dma.c ****   }
 105              		.loc 1 136 0
 106 006c 2C4A     		ldr	r2, .L26+48
 107 006e 5368     		ldr	r3, [r2, #4]
 108 0070 43F0F003 		orr	r3, r3, #240
 109 0074 5360     		str	r3, [r2, #4]
 110 0076 7047     		bx	lr
 111              	.L16:
 141:stm_lib/src/stm32f10x_dma.c ****   }
 112              		.loc 1 141 0
 113 0078 294A     		ldr	r2, .L26+48
 114 007a 5368     		ldr	r3, [r2, #4]
 115 007c 43F47063 		orr	r3, r3, #3840
 116 0080 5360     		str	r3, [r2, #4]
 117 0082 7047     		bx	lr
 118              	.L17:
 146:stm_lib/src/stm32f10x_dma.c ****   }
 119              		.loc 1 146 0
 120 0084 264A     		ldr	r2, .L26+48
 121 0086 5368     		ldr	r3, [r2, #4]
 122 0088 43F47043 		orr	r3, r3, #61440
 123 008c 5360     		str	r3, [r2, #4]
 124 008e 7047     		bx	lr
 125              	.L18:
 151:stm_lib/src/stm32f10x_dma.c ****   }
 126              		.loc 1 151 0
 127 0090 234A     		ldr	r2, .L26+48
 128 0092 5368     		ldr	r3, [r2, #4]
 129 0094 43F47023 		orr	r3, r3, #983040
 130 0098 5360     		str	r3, [r2, #4]
 131 009a 7047     		bx	lr
 132              	.L19:
 156:stm_lib/src/stm32f10x_dma.c ****   }
 133              		.loc 1 156 0
 134 009c 204A     		ldr	r2, .L26+48
 135 009e 5368     		ldr	r3, [r2, #4]
 136 00a0 43F47003 		orr	r3, r3, #15728640
 137 00a4 5360     		str	r3, [r2, #4]
 138 00a6 7047     		bx	lr
 139              	.L20:
 161:stm_lib/src/stm32f10x_dma.c ****   }
 140              		.loc 1 161 0
 141 00a8 1D4A     		ldr	r2, .L26+48
 142 00aa 5368     		ldr	r3, [r2, #4]
 143 00ac 43F07063 		orr	r3, r3, #251658240
 144 00b0 5360     		str	r3, [r2, #4]
 145 00b2 7047     		bx	lr
 146              	.L21:
 166:stm_lib/src/stm32f10x_dma.c ****   }
 147              		.loc 1 166 0
 148 00b4 1B4A     		ldr	r2, .L26+52
 149 00b6 5368     		ldr	r3, [r2, #4]
 150 00b8 43F00F03 		orr	r3, r3, #15
ARM GAS  /tmp/cccwCEm5.s 			page 7


 151 00bc 5360     		str	r3, [r2, #4]
 152 00be 7047     		bx	lr
 153              	.L22:
 171:stm_lib/src/stm32f10x_dma.c ****   }
 154              		.loc 1 171 0
 155 00c0 184A     		ldr	r2, .L26+52
 156 00c2 5368     		ldr	r3, [r2, #4]
 157 00c4 43F0F003 		orr	r3, r3, #240
 158 00c8 5360     		str	r3, [r2, #4]
 159 00ca 7047     		bx	lr
 160              	.L23:
 176:stm_lib/src/stm32f10x_dma.c ****   }
 161              		.loc 1 176 0
 162 00cc 154A     		ldr	r2, .L26+52
 163 00ce 5368     		ldr	r3, [r2, #4]
 164 00d0 43F47063 		orr	r3, r3, #3840
 165 00d4 5360     		str	r3, [r2, #4]
 166 00d6 7047     		bx	lr
 167              	.L24:
 181:stm_lib/src/stm32f10x_dma.c ****   }
 168              		.loc 1 181 0
 169 00d8 124A     		ldr	r2, .L26+52
 170 00da 5368     		ldr	r3, [r2, #4]
 171 00dc 43F47043 		orr	r3, r3, #61440
 172 00e0 5360     		str	r3, [r2, #4]
 173 00e2 7047     		bx	lr
 174              	.L25:
 186:stm_lib/src/stm32f10x_dma.c ****     {
 187:stm_lib/src/stm32f10x_dma.c ****       /* Reset interrupt pending bits for DMA2 Channel5 */
 188:stm_lib/src/stm32f10x_dma.c ****       DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 175              		.loc 1 188 0
 176 00e4 0F4A     		ldr	r2, .L26+52
 177 00e6 5368     		ldr	r3, [r2, #4]
 178 00e8 43F47023 		orr	r3, r3, #983040
 179 00ec 5360     		str	r3, [r2, #4]
 189:stm_lib/src/stm32f10x_dma.c ****     }
 190:stm_lib/src/stm32f10x_dma.c ****   }
 191:stm_lib/src/stm32f10x_dma.c **** }
 180              		.loc 1 191 0
 181 00ee B6E7     		b	.L1
 182              	.L27:
 183              		.align	2
 184              	.L26:
 185 00f0 08000240 		.word	1073872904
 186 00f4 1C000240 		.word	1073872924
 187 00f8 30000240 		.word	1073872944
 188 00fc 44000240 		.word	1073872964
 189 0100 58000240 		.word	1073872984
 190 0104 6C000240 		.word	1073873004
 191 0108 80000240 		.word	1073873024
 192 010c 08040240 		.word	1073873928
 193 0110 1C040240 		.word	1073873948
 194 0114 30040240 		.word	1073873968
 195 0118 44040240 		.word	1073873988
 196 011c 58040240 		.word	1073874008
 197 0120 00000240 		.word	1073872896
 198 0124 00040240 		.word	1073873920
ARM GAS  /tmp/cccwCEm5.s 			page 8


 199              		.cfi_endproc
 200              	.LFE56:
 202              		.section	.text.DMA_Init,"ax",%progbits
 203              		.align	1
 204              		.global	DMA_Init
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu softvfp
 210              	DMA_Init:
 211              	.LFB57:
 192:stm_lib/src/stm32f10x_dma.c **** 
 193:stm_lib/src/stm32f10x_dma.c **** /**
 194:stm_lib/src/stm32f10x_dma.c ****   * @brief  Initializes the DMAy Channelx according to the specified
 195:stm_lib/src/stm32f10x_dma.c ****   *         parameters in the DMA_InitStruct.
 196:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 197:stm_lib/src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 198:stm_lib/src/stm32f10x_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
 199:stm_lib/src/stm32f10x_dma.c ****   *         contains the configuration information for the specified DMA Channel.
 200:stm_lib/src/stm32f10x_dma.c ****   * @retval None
 201:stm_lib/src/stm32f10x_dma.c ****   */
 202:stm_lib/src/stm32f10x_dma.c **** void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
 203:stm_lib/src/stm32f10x_dma.c **** {
 212              		.loc 1 203 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              		@ link register save eliminated.
 217              	.LVL1:
 218 0000 10B4     		push	{r4}
 219              	.LCFI0:
 220              		.cfi_def_cfa_offset 4
 221              		.cfi_offset 4, -4
 222              	.LVL2:
 204:stm_lib/src/stm32f10x_dma.c ****   uint32_t tmpreg = 0;
 205:stm_lib/src/stm32f10x_dma.c **** 
 206:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 207:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 208:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
 209:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 210:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 211:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
 212:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 213:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 214:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 215:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 216:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
 217:stm_lib/src/stm32f10x_dma.c **** 
 218:stm_lib/src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
 219:stm_lib/src/stm32f10x_dma.c ****   /* Get the DMAy_Channelx CCR value */
 220:stm_lib/src/stm32f10x_dma.c ****   tmpreg = DMAy_Channelx->CCR;
 223              		.loc 1 220 0
 224 0002 0268     		ldr	r2, [r0]
 225              	.LVL3:
 221:stm_lib/src/stm32f10x_dma.c ****   /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 222:stm_lib/src/stm32f10x_dma.c ****   tmpreg &= CCR_CLEAR_Mask;
 226              		.loc 1 222 0
ARM GAS  /tmp/cccwCEm5.s 			page 9


 227 0004 22F4FF42 		bic	r2, r2, #32640
 228              	.LVL4:
 229 0008 22F07002 		bic	r2, r2, #112
 230              	.LVL5:
 223:stm_lib/src/stm32f10x_dma.c ****   /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
 224:stm_lib/src/stm32f10x_dma.c ****   /* Set DIR bit according to DMA_DIR value */
 225:stm_lib/src/stm32f10x_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 226:stm_lib/src/stm32f10x_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 227:stm_lib/src/stm32f10x_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 228:stm_lib/src/stm32f10x_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 229:stm_lib/src/stm32f10x_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 230:stm_lib/src/stm32f10x_dma.c ****   /* Set PL bits according to DMA_Priority value */
 231:stm_lib/src/stm32f10x_dma.c ****   /* Set the MEM2MEM bit according to DMA_M2M value */
 232:stm_lib/src/stm32f10x_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 231              		.loc 1 232 0
 232 000c 8B68     		ldr	r3, [r1, #8]
 233 000e 0C6A     		ldr	r4, [r1, #32]
 234 0010 2343     		orrs	r3, r3, r4
 233:stm_lib/src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 235              		.loc 1 233 0
 236 0012 0C69     		ldr	r4, [r1, #16]
 232:stm_lib/src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 237              		.loc 1 232 0
 238 0014 2343     		orrs	r3, r3, r4
 239              		.loc 1 233 0
 240 0016 4C69     		ldr	r4, [r1, #20]
 241 0018 2343     		orrs	r3, r3, r4
 234:stm_lib/src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 242              		.loc 1 234 0
 243 001a 8C69     		ldr	r4, [r1, #24]
 233:stm_lib/src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 244              		.loc 1 233 0
 245 001c 2343     		orrs	r3, r3, r4
 246              		.loc 1 234 0
 247 001e CC69     		ldr	r4, [r1, #28]
 248 0020 2343     		orrs	r3, r3, r4
 235:stm_lib/src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 249              		.loc 1 235 0
 250 0022 4C6A     		ldr	r4, [r1, #36]
 234:stm_lib/src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 251              		.loc 1 234 0
 252 0024 2343     		orrs	r3, r3, r4
 253              		.loc 1 235 0
 254 0026 8C6A     		ldr	r4, [r1, #40]
 255 0028 2343     		orrs	r3, r3, r4
 232:stm_lib/src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 256              		.loc 1 232 0
 257 002a 1343     		orrs	r3, r3, r2
 258              	.LVL6:
 236:stm_lib/src/stm32f10x_dma.c **** 
 237:stm_lib/src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CCR */
 238:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CCR = tmpreg;
 259              		.loc 1 238 0
 260 002c 0360     		str	r3, [r0]
 239:stm_lib/src/stm32f10x_dma.c **** 
 240:stm_lib/src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
 241:stm_lib/src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CNDTR */
ARM GAS  /tmp/cccwCEm5.s 			page 10


 242:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 261              		.loc 1 242 0
 262 002e CB68     		ldr	r3, [r1, #12]
 263              	.LVL7:
 264 0030 4360     		str	r3, [r0, #4]
 265              	.LVL8:
 243:stm_lib/src/stm32f10x_dma.c **** 
 244:stm_lib/src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
 245:stm_lib/src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CPAR */
 246:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 266              		.loc 1 246 0
 267 0032 0B68     		ldr	r3, [r1]
 268 0034 8360     		str	r3, [r0, #8]
 247:stm_lib/src/stm32f10x_dma.c **** 
 248:stm_lib/src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
 249:stm_lib/src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CMAR */
 250:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 269              		.loc 1 250 0
 270 0036 4B68     		ldr	r3, [r1, #4]
 271 0038 C360     		str	r3, [r0, #12]
 251:stm_lib/src/stm32f10x_dma.c **** }
 272              		.loc 1 251 0
 273 003a 10BC     		pop	{r4}
 274              	.LCFI1:
 275              		.cfi_restore 4
 276              		.cfi_def_cfa_offset 0
 277 003c 7047     		bx	lr
 278              		.cfi_endproc
 279              	.LFE57:
 281              		.section	.text.DMA_StructInit,"ax",%progbits
 282              		.align	1
 283              		.global	DMA_StructInit
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 287              		.fpu softvfp
 289              	DMA_StructInit:
 290              	.LFB58:
 252:stm_lib/src/stm32f10x_dma.c **** 
 253:stm_lib/src/stm32f10x_dma.c **** /**
 254:stm_lib/src/stm32f10x_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 255:stm_lib/src/stm32f10x_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
 256:stm_lib/src/stm32f10x_dma.c ****   *         be initialized.
 257:stm_lib/src/stm32f10x_dma.c ****   * @retval None
 258:stm_lib/src/stm32f10x_dma.c ****   */
 259:stm_lib/src/stm32f10x_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 260:stm_lib/src/stm32f10x_dma.c **** {
 291              		.loc 1 260 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 295              		@ link register save eliminated.
 296              	.LVL9:
 261:stm_lib/src/stm32f10x_dma.c **** /*-------------- Reset DMA init structure parameters values ------------------*/
 262:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 263:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 297              		.loc 1 263 0
ARM GAS  /tmp/cccwCEm5.s 			page 11


 298 0000 0023     		movs	r3, #0
 299 0002 0360     		str	r3, [r0]
 264:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_MemoryBaseAddr member */
 265:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 300              		.loc 1 265 0
 301 0004 4360     		str	r3, [r0, #4]
 266:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_DIR member */
 267:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 302              		.loc 1 267 0
 303 0006 8360     		str	r3, [r0, #8]
 268:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_BufferSize member */
 269:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 304              		.loc 1 269 0
 305 0008 C360     		str	r3, [r0, #12]
 270:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 271:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 306              		.loc 1 271 0
 307 000a 0361     		str	r3, [r0, #16]
 272:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_MemoryInc member */
 273:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 308              		.loc 1 273 0
 309 000c 4361     		str	r3, [r0, #20]
 274:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 275:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 310              		.loc 1 275 0
 311 000e 8361     		str	r3, [r0, #24]
 276:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 277:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 312              		.loc 1 277 0
 313 0010 C361     		str	r3, [r0, #28]
 278:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_Mode member */
 279:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 314              		.loc 1 279 0
 315 0012 0362     		str	r3, [r0, #32]
 280:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_Priority member */
 281:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 316              		.loc 1 281 0
 317 0014 4362     		str	r3, [r0, #36]
 282:stm_lib/src/stm32f10x_dma.c ****   /* Initialize the DMA_M2M member */
 283:stm_lib/src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 318              		.loc 1 283 0
 319 0016 8362     		str	r3, [r0, #40]
 320 0018 7047     		bx	lr
 321              		.cfi_endproc
 322              	.LFE58:
 324              		.section	.text.DMA_Cmd,"ax",%progbits
 325              		.align	1
 326              		.global	DMA_Cmd
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu softvfp
 332              	DMA_Cmd:
 333              	.LFB59:
 284:stm_lib/src/stm32f10x_dma.c **** }
 285:stm_lib/src/stm32f10x_dma.c **** 
 286:stm_lib/src/stm32f10x_dma.c **** /**
ARM GAS  /tmp/cccwCEm5.s 			page 12


 287:stm_lib/src/stm32f10x_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx.
 288:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 289:stm_lib/src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 290:stm_lib/src/stm32f10x_dma.c ****   * @param  NewState: new state of the DMAy Channelx. 
 291:stm_lib/src/stm32f10x_dma.c ****   *   This parameter can be: ENABLE or DISABLE.
 292:stm_lib/src/stm32f10x_dma.c ****   * @retval None
 293:stm_lib/src/stm32f10x_dma.c ****   */
 294:stm_lib/src/stm32f10x_dma.c **** void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
 295:stm_lib/src/stm32f10x_dma.c **** {
 334              		.loc 1 295 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339              	.LVL10:
 296:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 297:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 298:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 299:stm_lib/src/stm32f10x_dma.c **** 
 300:stm_lib/src/stm32f10x_dma.c ****   if (NewState != DISABLE)
 340              		.loc 1 300 0
 341 0000 31B9     		cbnz	r1, .L34
 301:stm_lib/src/stm32f10x_dma.c ****   {
 302:stm_lib/src/stm32f10x_dma.c ****     /* Enable the selected DMAy Channelx */
 303:stm_lib/src/stm32f10x_dma.c ****     DMAy_Channelx->CCR |= DMA_CCR1_EN;
 304:stm_lib/src/stm32f10x_dma.c ****   }
 305:stm_lib/src/stm32f10x_dma.c ****   else
 306:stm_lib/src/stm32f10x_dma.c ****   {
 307:stm_lib/src/stm32f10x_dma.c ****     /* Disable the selected DMAy Channelx */
 308:stm_lib/src/stm32f10x_dma.c ****     DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 342              		.loc 1 308 0
 343 0002 0368     		ldr	r3, [r0]
 344 0004 23F00103 		bic	r3, r3, #1
 345 0008 1B04     		lsls	r3, r3, #16
 346 000a 1B0C     		lsrs	r3, r3, #16
 347 000c 0360     		str	r3, [r0]
 348 000e 7047     		bx	lr
 349              	.L34:
 303:stm_lib/src/stm32f10x_dma.c ****   }
 350              		.loc 1 303 0
 351 0010 0368     		ldr	r3, [r0]
 352 0012 43F00103 		orr	r3, r3, #1
 353 0016 0360     		str	r3, [r0]
 354 0018 7047     		bx	lr
 355              		.cfi_endproc
 356              	.LFE59:
 358              		.section	.text.DMA_ITConfig,"ax",%progbits
 359              		.align	1
 360              		.global	DMA_ITConfig
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu softvfp
 366              	DMA_ITConfig:
 367              	.LFB60:
 309:stm_lib/src/stm32f10x_dma.c ****   }
 310:stm_lib/src/stm32f10x_dma.c **** }
ARM GAS  /tmp/cccwCEm5.s 			page 13


 311:stm_lib/src/stm32f10x_dma.c **** 
 312:stm_lib/src/stm32f10x_dma.c **** /**
 313:stm_lib/src/stm32f10x_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx interrupts.
 314:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 315:stm_lib/src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 316:stm_lib/src/stm32f10x_dma.c ****   * @param  DMA_IT: specifies the DMA interrupts sources to be enabled
 317:stm_lib/src/stm32f10x_dma.c ****   *   or disabled. 
 318:stm_lib/src/stm32f10x_dma.c ****   *   This parameter can be any combination of the following values:
 319:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA_IT_TC:  Transfer complete interrupt mask
 320:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA_IT_HT:  Half transfer interrupt mask
 321:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA_IT_TE:  Transfer error interrupt mask
 322:stm_lib/src/stm32f10x_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
 323:stm_lib/src/stm32f10x_dma.c ****   *   This parameter can be: ENABLE or DISABLE.
 324:stm_lib/src/stm32f10x_dma.c ****   * @retval None
 325:stm_lib/src/stm32f10x_dma.c ****   */
 326:stm_lib/src/stm32f10x_dma.c **** void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
 327:stm_lib/src/stm32f10x_dma.c **** {
 368              		.loc 1 327 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              		@ link register save eliminated.
 373              	.LVL11:
 328:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 329:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 330:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 331:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:stm_lib/src/stm32f10x_dma.c ****   if (NewState != DISABLE)
 374              		.loc 1 332 0
 375 0000 22B9     		cbnz	r2, .L38
 333:stm_lib/src/stm32f10x_dma.c ****   {
 334:stm_lib/src/stm32f10x_dma.c ****     /* Enable the selected DMA interrupts */
 335:stm_lib/src/stm32f10x_dma.c ****     DMAy_Channelx->CCR |= DMA_IT;
 336:stm_lib/src/stm32f10x_dma.c ****   }
 337:stm_lib/src/stm32f10x_dma.c ****   else
 338:stm_lib/src/stm32f10x_dma.c ****   {
 339:stm_lib/src/stm32f10x_dma.c ****     /* Disable the selected DMA interrupts */
 340:stm_lib/src/stm32f10x_dma.c ****     DMAy_Channelx->CCR &= ~DMA_IT;
 376              		.loc 1 340 0
 377 0002 0368     		ldr	r3, [r0]
 378 0004 23EA0101 		bic	r1, r3, r1
 379              	.LVL12:
 380 0008 0160     		str	r1, [r0]
 381 000a 7047     		bx	lr
 382              	.LVL13:
 383              	.L38:
 335:stm_lib/src/stm32f10x_dma.c ****   }
 384              		.loc 1 335 0
 385 000c 0368     		ldr	r3, [r0]
 386 000e 1943     		orrs	r1, r1, r3
 387              	.LVL14:
 388 0010 0160     		str	r1, [r0]
 389 0012 7047     		bx	lr
 390              		.cfi_endproc
 391              	.LFE60:
 393              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 394              		.align	1
ARM GAS  /tmp/cccwCEm5.s 			page 14


 395              		.global	DMA_SetCurrDataCounter
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu softvfp
 401              	DMA_SetCurrDataCounter:
 402              	.LFB61:
 341:stm_lib/src/stm32f10x_dma.c ****   }
 342:stm_lib/src/stm32f10x_dma.c **** }
 343:stm_lib/src/stm32f10x_dma.c **** 
 344:stm_lib/src/stm32f10x_dma.c **** /**
 345:stm_lib/src/stm32f10x_dma.c ****   * @brief  Sets the number of data units in the current DMAy Channelx transfer.
 346:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 347:stm_lib/src/stm32f10x_dma.c ****   *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 348:stm_lib/src/stm32f10x_dma.c ****   * @param  DataNumber: The number of data units in the current DMAy Channelx
 349:stm_lib/src/stm32f10x_dma.c ****   *         transfer.   
 350:stm_lib/src/stm32f10x_dma.c ****   * @note   This function can only be used when the DMAy_Channelx is disabled.                 
 351:stm_lib/src/stm32f10x_dma.c ****   * @retval None.
 352:stm_lib/src/stm32f10x_dma.c ****   */
 353:stm_lib/src/stm32f10x_dma.c **** void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
 354:stm_lib/src/stm32f10x_dma.c **** {
 403              		.loc 1 354 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408              	.LVL15:
 355:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 356:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 357:stm_lib/src/stm32f10x_dma.c ****   
 358:stm_lib/src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
 359:stm_lib/src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CNDTR */
 360:stm_lib/src/stm32f10x_dma.c ****   DMAy_Channelx->CNDTR = DataNumber;  
 409              		.loc 1 360 0
 410 0000 4160     		str	r1, [r0, #4]
 411 0002 7047     		bx	lr
 412              		.cfi_endproc
 413              	.LFE61:
 415              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 416              		.align	1
 417              		.global	DMA_GetCurrDataCounter
 418              		.syntax unified
 419              		.thumb
 420              		.thumb_func
 421              		.fpu softvfp
 423              	DMA_GetCurrDataCounter:
 424              	.LFB62:
 361:stm_lib/src/stm32f10x_dma.c **** }
 362:stm_lib/src/stm32f10x_dma.c **** 
 363:stm_lib/src/stm32f10x_dma.c **** /**
 364:stm_lib/src/stm32f10x_dma.c ****   * @brief  Returns the number of remaining data units in the current
 365:stm_lib/src/stm32f10x_dma.c ****   *         DMAy Channelx transfer.
 366:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 367:stm_lib/src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 368:stm_lib/src/stm32f10x_dma.c ****   * @retval The number of remaining data units in the current DMAy Channelx
 369:stm_lib/src/stm32f10x_dma.c ****   *         transfer.
 370:stm_lib/src/stm32f10x_dma.c ****   */
ARM GAS  /tmp/cccwCEm5.s 			page 15


 371:stm_lib/src/stm32f10x_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
 372:stm_lib/src/stm32f10x_dma.c **** {
 425              		.loc 1 372 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              		@ link register save eliminated.
 430              	.LVL16:
 373:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 374:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 375:stm_lib/src/stm32f10x_dma.c ****   /* Return the number of remaining data units for DMAy Channelx */
 376:stm_lib/src/stm32f10x_dma.c ****   return ((uint16_t)(DMAy_Channelx->CNDTR));
 431              		.loc 1 376 0
 432 0000 4068     		ldr	r0, [r0, #4]
 433              	.LVL17:
 377:stm_lib/src/stm32f10x_dma.c **** }
 434              		.loc 1 377 0
 435 0002 80B2     		uxth	r0, r0
 436 0004 7047     		bx	lr
 437              		.cfi_endproc
 438              	.LFE62:
 440              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 441              		.align	1
 442              		.global	DMA_GetFlagStatus
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu softvfp
 448              	DMA_GetFlagStatus:
 449              	.LFB63:
 378:stm_lib/src/stm32f10x_dma.c **** 
 379:stm_lib/src/stm32f10x_dma.c **** /**
 380:stm_lib/src/stm32f10x_dma.c ****   * @brief  Checks whether the specified DMAy Channelx flag is set or not.
 381:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_FLAG: specifies the flag to check.
 382:stm_lib/src/stm32f10x_dma.c ****   *   This parameter can be one of the following values:
 383:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 384:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 385:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 386:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 387:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 388:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 389:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 390:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 391:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 392:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 393:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 394:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 395:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 396:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 397:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 398:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 399:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 400:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 401:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 402:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 403:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
 404:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
ARM GAS  /tmp/cccwCEm5.s 			page 16


 405:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
 406:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
 407:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
 408:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
 409:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
 410:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
 411:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
 412:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
 413:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
 414:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
 415:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
 416:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
 417:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
 418:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
 419:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
 420:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
 421:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
 422:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
 423:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
 424:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
 425:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
 426:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
 427:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
 428:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
 429:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
 430:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
 431:stm_lib/src/stm32f10x_dma.c ****   * @retval The new state of DMAy_FLAG (SET or RESET).
 432:stm_lib/src/stm32f10x_dma.c ****   */
 433:stm_lib/src/stm32f10x_dma.c **** FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
 434:stm_lib/src/stm32f10x_dma.c **** {
 450              		.loc 1 434 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455              	.LVL18:
 435:stm_lib/src/stm32f10x_dma.c ****   FlagStatus bitstatus = RESET;
 436:stm_lib/src/stm32f10x_dma.c ****   uint32_t tmpreg = 0;
 437:stm_lib/src/stm32f10x_dma.c ****   
 438:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 439:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
 440:stm_lib/src/stm32f10x_dma.c **** 
 441:stm_lib/src/stm32f10x_dma.c ****   /* Calculate the used DMAy */
 442:stm_lib/src/stm32f10x_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 456              		.loc 1 442 0
 457 0000 10F0805F 		tst	r0, #268435456
 458 0004 05D0     		beq	.L42
 443:stm_lib/src/stm32f10x_dma.c ****   {
 444:stm_lib/src/stm32f10x_dma.c ****     /* Get DMA2 ISR register value */
 445:stm_lib/src/stm32f10x_dma.c ****     tmpreg = DMA2->ISR ;
 459              		.loc 1 445 0
 460 0006 054B     		ldr	r3, .L47
 461 0008 1B68     		ldr	r3, [r3]
 462              	.LVL19:
 463              	.L43:
 446:stm_lib/src/stm32f10x_dma.c ****   }
 447:stm_lib/src/stm32f10x_dma.c ****   else
ARM GAS  /tmp/cccwCEm5.s 			page 17


 448:stm_lib/src/stm32f10x_dma.c ****   {
 449:stm_lib/src/stm32f10x_dma.c ****     /* Get DMA1 ISR register value */
 450:stm_lib/src/stm32f10x_dma.c ****     tmpreg = DMA1->ISR ;
 451:stm_lib/src/stm32f10x_dma.c ****   }
 452:stm_lib/src/stm32f10x_dma.c **** 
 453:stm_lib/src/stm32f10x_dma.c ****   /* Check the status of the specified DMAy flag */
 454:stm_lib/src/stm32f10x_dma.c ****   if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 464              		.loc 1 454 0
 465 000a 0342     		tst	r3, r0
 466 000c 04D1     		bne	.L46
 455:stm_lib/src/stm32f10x_dma.c ****   {
 456:stm_lib/src/stm32f10x_dma.c ****     /* DMAy_FLAG is set */
 457:stm_lib/src/stm32f10x_dma.c ****     bitstatus = SET;
 458:stm_lib/src/stm32f10x_dma.c ****   }
 459:stm_lib/src/stm32f10x_dma.c ****   else
 460:stm_lib/src/stm32f10x_dma.c ****   {
 461:stm_lib/src/stm32f10x_dma.c ****     /* DMAy_FLAG is reset */
 462:stm_lib/src/stm32f10x_dma.c ****     bitstatus = RESET;
 467              		.loc 1 462 0
 468 000e 0020     		movs	r0, #0
 469              	.LVL20:
 463:stm_lib/src/stm32f10x_dma.c ****   }
 464:stm_lib/src/stm32f10x_dma.c ****   
 465:stm_lib/src/stm32f10x_dma.c ****   /* Return the DMAy_FLAG status */
 466:stm_lib/src/stm32f10x_dma.c ****   return  bitstatus;
 467:stm_lib/src/stm32f10x_dma.c **** }
 470              		.loc 1 467 0
 471 0010 7047     		bx	lr
 472              	.LVL21:
 473              	.L42:
 450:stm_lib/src/stm32f10x_dma.c ****   }
 474              		.loc 1 450 0
 475 0012 034B     		ldr	r3, .L47+4
 476 0014 1B68     		ldr	r3, [r3]
 477              	.LVL22:
 478 0016 F8E7     		b	.L43
 479              	.L46:
 457:stm_lib/src/stm32f10x_dma.c ****   }
 480              		.loc 1 457 0
 481 0018 0120     		movs	r0, #1
 482              	.LVL23:
 483 001a 7047     		bx	lr
 484              	.L48:
 485              		.align	2
 486              	.L47:
 487 001c 00040240 		.word	1073873920
 488 0020 00000240 		.word	1073872896
 489              		.cfi_endproc
 490              	.LFE63:
 492              		.section	.text.DMA_ClearFlag,"ax",%progbits
 493              		.align	1
 494              		.global	DMA_ClearFlag
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu softvfp
 500              	DMA_ClearFlag:
ARM GAS  /tmp/cccwCEm5.s 			page 18


 501              	.LFB64:
 468:stm_lib/src/stm32f10x_dma.c **** 
 469:stm_lib/src/stm32f10x_dma.c **** /**
 470:stm_lib/src/stm32f10x_dma.c ****   * @brief  Clears the DMAy Channelx's pending flags.
 471:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_FLAG: specifies the flag to clear.
 472:stm_lib/src/stm32f10x_dma.c ****   *   This parameter can be any combination (for the same DMA) of the following values:
 473:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 474:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 475:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 476:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 477:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 478:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 479:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 480:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 481:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 482:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 483:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 484:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 485:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 486:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 487:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 488:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 489:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 490:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 491:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 492:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 493:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
 494:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
 495:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
 496:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
 497:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
 498:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
 499:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
 500:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
 501:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
 502:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
 503:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
 504:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
 505:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
 506:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
 507:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
 508:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
 509:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
 510:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
 511:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
 512:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
 513:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
 514:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
 515:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
 516:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
 517:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
 518:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
 519:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
 520:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
 521:stm_lib/src/stm32f10x_dma.c ****   * @retval None
 522:stm_lib/src/stm32f10x_dma.c ****   */
 523:stm_lib/src/stm32f10x_dma.c **** void DMA_ClearFlag(uint32_t DMAy_FLAG)
ARM GAS  /tmp/cccwCEm5.s 			page 19


 524:stm_lib/src/stm32f10x_dma.c **** {
 502              		.loc 1 524 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507              	.LVL24:
 525:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 526:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
 527:stm_lib/src/stm32f10x_dma.c **** 
 528:stm_lib/src/stm32f10x_dma.c ****   /* Calculate the used DMAy */
 529:stm_lib/src/stm32f10x_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 508              		.loc 1 529 0
 509 0000 10F0805F 		tst	r0, #268435456
 510 0004 02D1     		bne	.L52
 530:stm_lib/src/stm32f10x_dma.c ****   {
 531:stm_lib/src/stm32f10x_dma.c ****     /* Clear the selected DMAy flags */
 532:stm_lib/src/stm32f10x_dma.c ****     DMA2->IFCR = DMAy_FLAG;
 533:stm_lib/src/stm32f10x_dma.c ****   }
 534:stm_lib/src/stm32f10x_dma.c ****   else
 535:stm_lib/src/stm32f10x_dma.c ****   {
 536:stm_lib/src/stm32f10x_dma.c ****     /* Clear the selected DMAy flags */
 537:stm_lib/src/stm32f10x_dma.c ****     DMA1->IFCR = DMAy_FLAG;
 511              		.loc 1 537 0
 512 0006 034B     		ldr	r3, .L53
 513 0008 5860     		str	r0, [r3, #4]
 514 000a 7047     		bx	lr
 515              	.L52:
 532:stm_lib/src/stm32f10x_dma.c ****   }
 516              		.loc 1 532 0
 517 000c 024B     		ldr	r3, .L53+4
 518 000e 5860     		str	r0, [r3, #4]
 519 0010 7047     		bx	lr
 520              	.L54:
 521 0012 00BF     		.align	2
 522              	.L53:
 523 0014 00000240 		.word	1073872896
 524 0018 00040240 		.word	1073873920
 525              		.cfi_endproc
 526              	.LFE64:
 528              		.section	.text.DMA_GetITStatus,"ax",%progbits
 529              		.align	1
 530              		.global	DMA_GetITStatus
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu softvfp
 536              	DMA_GetITStatus:
 537              	.LFB65:
 538:stm_lib/src/stm32f10x_dma.c ****   }
 539:stm_lib/src/stm32f10x_dma.c **** }
 540:stm_lib/src/stm32f10x_dma.c **** 
 541:stm_lib/src/stm32f10x_dma.c **** /**
 542:stm_lib/src/stm32f10x_dma.c ****   * @brief  Checks whether the specified DMAy Channelx interrupt has occurred or not.
 543:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_IT: specifies the DMAy interrupt source to check. 
 544:stm_lib/src/stm32f10x_dma.c ****   *   This parameter can be one of the following values:
 545:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
ARM GAS  /tmp/cccwCEm5.s 			page 20


 546:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 547:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 548:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 549:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 550:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 551:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 552:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 553:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 554:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 555:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 556:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 557:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 558:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 559:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 560:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 561:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 562:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 563:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 564:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 565:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
 566:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
 567:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
 568:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
 569:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
 570:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
 571:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
 572:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
 573:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
 574:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
 575:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
 576:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
 577:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
 578:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
 579:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
 580:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
 581:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
 582:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
 583:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
 584:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
 585:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
 586:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
 587:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
 588:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
 589:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
 590:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
 591:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
 592:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
 593:stm_lib/src/stm32f10x_dma.c ****   * @retval The new state of DMAy_IT (SET or RESET).
 594:stm_lib/src/stm32f10x_dma.c ****   */
 595:stm_lib/src/stm32f10x_dma.c **** ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
 596:stm_lib/src/stm32f10x_dma.c **** {
 538              		.loc 1 596 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              		@ link register save eliminated.
 543              	.LVL25:
ARM GAS  /tmp/cccwCEm5.s 			page 21


 597:stm_lib/src/stm32f10x_dma.c ****   ITStatus bitstatus = RESET;
 598:stm_lib/src/stm32f10x_dma.c ****   uint32_t tmpreg = 0;
 599:stm_lib/src/stm32f10x_dma.c **** 
 600:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 601:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_GET_IT(DMAy_IT));
 602:stm_lib/src/stm32f10x_dma.c **** 
 603:stm_lib/src/stm32f10x_dma.c ****   /* Calculate the used DMA */
 604:stm_lib/src/stm32f10x_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 544              		.loc 1 604 0
 545 0000 10F0805F 		tst	r0, #268435456
 546 0004 05D0     		beq	.L56
 605:stm_lib/src/stm32f10x_dma.c ****   {
 606:stm_lib/src/stm32f10x_dma.c ****     /* Get DMA2 ISR register value */
 607:stm_lib/src/stm32f10x_dma.c ****     tmpreg = DMA2->ISR;
 547              		.loc 1 607 0
 548 0006 054B     		ldr	r3, .L61
 549 0008 1B68     		ldr	r3, [r3]
 550              	.LVL26:
 551              	.L57:
 608:stm_lib/src/stm32f10x_dma.c ****   }
 609:stm_lib/src/stm32f10x_dma.c ****   else
 610:stm_lib/src/stm32f10x_dma.c ****   {
 611:stm_lib/src/stm32f10x_dma.c ****     /* Get DMA1 ISR register value */
 612:stm_lib/src/stm32f10x_dma.c ****     tmpreg = DMA1->ISR;
 613:stm_lib/src/stm32f10x_dma.c ****   }
 614:stm_lib/src/stm32f10x_dma.c **** 
 615:stm_lib/src/stm32f10x_dma.c ****   /* Check the status of the specified DMAy interrupt */
 616:stm_lib/src/stm32f10x_dma.c ****   if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 552              		.loc 1 616 0
 553 000a 0342     		tst	r3, r0
 554 000c 04D1     		bne	.L60
 617:stm_lib/src/stm32f10x_dma.c ****   {
 618:stm_lib/src/stm32f10x_dma.c ****     /* DMAy_IT is set */
 619:stm_lib/src/stm32f10x_dma.c ****     bitstatus = SET;
 620:stm_lib/src/stm32f10x_dma.c ****   }
 621:stm_lib/src/stm32f10x_dma.c ****   else
 622:stm_lib/src/stm32f10x_dma.c ****   {
 623:stm_lib/src/stm32f10x_dma.c ****     /* DMAy_IT is reset */
 624:stm_lib/src/stm32f10x_dma.c ****     bitstatus = RESET;
 555              		.loc 1 624 0
 556 000e 0020     		movs	r0, #0
 557              	.LVL27:
 625:stm_lib/src/stm32f10x_dma.c ****   }
 626:stm_lib/src/stm32f10x_dma.c ****   /* Return the DMA_IT status */
 627:stm_lib/src/stm32f10x_dma.c ****   return  bitstatus;
 628:stm_lib/src/stm32f10x_dma.c **** }
 558              		.loc 1 628 0
 559 0010 7047     		bx	lr
 560              	.LVL28:
 561              	.L56:
 612:stm_lib/src/stm32f10x_dma.c ****   }
 562              		.loc 1 612 0
 563 0012 034B     		ldr	r3, .L61+4
 564 0014 1B68     		ldr	r3, [r3]
 565              	.LVL29:
 566 0016 F8E7     		b	.L57
 567              	.L60:
ARM GAS  /tmp/cccwCEm5.s 			page 22


 619:stm_lib/src/stm32f10x_dma.c ****   }
 568              		.loc 1 619 0
 569 0018 0120     		movs	r0, #1
 570              	.LVL30:
 571 001a 7047     		bx	lr
 572              	.L62:
 573              		.align	2
 574              	.L61:
 575 001c 00040240 		.word	1073873920
 576 0020 00000240 		.word	1073872896
 577              		.cfi_endproc
 578              	.LFE65:
 580              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 581              		.align	1
 582              		.global	DMA_ClearITPendingBit
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu softvfp
 588              	DMA_ClearITPendingBit:
 589              	.LFB66:
 629:stm_lib/src/stm32f10x_dma.c **** 
 630:stm_lib/src/stm32f10x_dma.c **** /**
 631:stm_lib/src/stm32f10x_dma.c ****   * @brief  Clears the DMAy Channelx's interrupt pending bits.
 632:stm_lib/src/stm32f10x_dma.c ****   * @param  DMAy_IT: specifies the DMAy interrupt pending bit to clear.
 633:stm_lib/src/stm32f10x_dma.c ****   *   This parameter can be any combination (for the same DMA) of the following values:
 634:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 635:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 636:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 637:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 638:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 639:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 640:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 641:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 642:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 643:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 644:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 645:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 646:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 647:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 648:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 649:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 650:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 651:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 652:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 653:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 654:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
 655:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
 656:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
 657:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
 658:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
 659:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
 660:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
 661:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
 662:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
 663:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
 664:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
ARM GAS  /tmp/cccwCEm5.s 			page 23


 665:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
 666:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
 667:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
 668:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
 669:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
 670:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
 671:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
 672:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
 673:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
 674:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
 675:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
 676:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
 677:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
 678:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
 679:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
 680:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
 681:stm_lib/src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
 682:stm_lib/src/stm32f10x_dma.c ****   * @retval None
 683:stm_lib/src/stm32f10x_dma.c ****   */
 684:stm_lib/src/stm32f10x_dma.c **** void DMA_ClearITPendingBit(uint32_t DMAy_IT)
 685:stm_lib/src/stm32f10x_dma.c **** {
 590              		.loc 1 685 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595              	.LVL31:
 686:stm_lib/src/stm32f10x_dma.c ****   /* Check the parameters */
 687:stm_lib/src/stm32f10x_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
 688:stm_lib/src/stm32f10x_dma.c **** 
 689:stm_lib/src/stm32f10x_dma.c ****   /* Calculate the used DMAy */
 690:stm_lib/src/stm32f10x_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 596              		.loc 1 690 0
 597 0000 10F0805F 		tst	r0, #268435456
 598 0004 02D1     		bne	.L66
 691:stm_lib/src/stm32f10x_dma.c ****   {
 692:stm_lib/src/stm32f10x_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 693:stm_lib/src/stm32f10x_dma.c ****     DMA2->IFCR = DMAy_IT;
 694:stm_lib/src/stm32f10x_dma.c ****   }
 695:stm_lib/src/stm32f10x_dma.c ****   else
 696:stm_lib/src/stm32f10x_dma.c ****   {
 697:stm_lib/src/stm32f10x_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 698:stm_lib/src/stm32f10x_dma.c ****     DMA1->IFCR = DMAy_IT;
 599              		.loc 1 698 0
 600 0006 034B     		ldr	r3, .L67
 601 0008 5860     		str	r0, [r3, #4]
 602 000a 7047     		bx	lr
 603              	.L66:
 693:stm_lib/src/stm32f10x_dma.c ****   }
 604              		.loc 1 693 0
 605 000c 024B     		ldr	r3, .L67+4
 606 000e 5860     		str	r0, [r3, #4]
 607 0010 7047     		bx	lr
 608              	.L68:
 609 0012 00BF     		.align	2
 610              	.L67:
 611 0014 00000240 		.word	1073872896
ARM GAS  /tmp/cccwCEm5.s 			page 24


 612 0018 00040240 		.word	1073873920
 613              		.cfi_endproc
 614              	.LFE66:
 616              		.text
 617              	.Letext0:
 618              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 619              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 620              		.file 4 "cmsis/core_cm3.h"
 621              		.file 5 "cmsis_boot/system_stm32f10x.h"
 622              		.file 6 "stm_lib/inc/stm32f10x.h"
 623              		.file 7 "stm_lib/inc/stm32f10x_dma.h"
ARM GAS  /tmp/cccwCEm5.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_dma.c
     /tmp/cccwCEm5.s:16     .text.DMA_DeInit:0000000000000000 $t
     /tmp/cccwCEm5.s:23     .text.DMA_DeInit:0000000000000000 DMA_DeInit
     /tmp/cccwCEm5.s:185    .text.DMA_DeInit:00000000000000f0 $d
     /tmp/cccwCEm5.s:203    .text.DMA_Init:0000000000000000 $t
     /tmp/cccwCEm5.s:210    .text.DMA_Init:0000000000000000 DMA_Init
     /tmp/cccwCEm5.s:282    .text.DMA_StructInit:0000000000000000 $t
     /tmp/cccwCEm5.s:289    .text.DMA_StructInit:0000000000000000 DMA_StructInit
     /tmp/cccwCEm5.s:325    .text.DMA_Cmd:0000000000000000 $t
     /tmp/cccwCEm5.s:332    .text.DMA_Cmd:0000000000000000 DMA_Cmd
     /tmp/cccwCEm5.s:359    .text.DMA_ITConfig:0000000000000000 $t
     /tmp/cccwCEm5.s:366    .text.DMA_ITConfig:0000000000000000 DMA_ITConfig
     /tmp/cccwCEm5.s:394    .text.DMA_SetCurrDataCounter:0000000000000000 $t
     /tmp/cccwCEm5.s:401    .text.DMA_SetCurrDataCounter:0000000000000000 DMA_SetCurrDataCounter
     /tmp/cccwCEm5.s:416    .text.DMA_GetCurrDataCounter:0000000000000000 $t
     /tmp/cccwCEm5.s:423    .text.DMA_GetCurrDataCounter:0000000000000000 DMA_GetCurrDataCounter
     /tmp/cccwCEm5.s:441    .text.DMA_GetFlagStatus:0000000000000000 $t
     /tmp/cccwCEm5.s:448    .text.DMA_GetFlagStatus:0000000000000000 DMA_GetFlagStatus
     /tmp/cccwCEm5.s:487    .text.DMA_GetFlagStatus:000000000000001c $d
     /tmp/cccwCEm5.s:493    .text.DMA_ClearFlag:0000000000000000 $t
     /tmp/cccwCEm5.s:500    .text.DMA_ClearFlag:0000000000000000 DMA_ClearFlag
     /tmp/cccwCEm5.s:523    .text.DMA_ClearFlag:0000000000000014 $d
     /tmp/cccwCEm5.s:529    .text.DMA_GetITStatus:0000000000000000 $t
     /tmp/cccwCEm5.s:536    .text.DMA_GetITStatus:0000000000000000 DMA_GetITStatus
     /tmp/cccwCEm5.s:575    .text.DMA_GetITStatus:000000000000001c $d
     /tmp/cccwCEm5.s:581    .text.DMA_ClearITPendingBit:0000000000000000 $t
     /tmp/cccwCEm5.s:588    .text.DMA_ClearITPendingBit:0000000000000000 DMA_ClearITPendingBit
     /tmp/cccwCEm5.s:611    .text.DMA_ClearITPendingBit:0000000000000014 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
