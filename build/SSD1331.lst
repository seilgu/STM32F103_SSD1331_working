ARM GAS  /tmp/ccbMwiuG.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"SSD1331.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._sendData,"ax",%progbits
  16              		.align	1
  17              		.global	_sendData
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_sendData:
  24              	.LFB60:
  25              		.file 1 "SSD1331.c"
   1:SSD1331.c     **** #include "stm32f10x.h"
   2:SSD1331.c     **** #include "stm32f10x_rcc.h"
   3:SSD1331.c     **** #include "stm32f10x_gpio.h"
   4:SSD1331.c     **** #include "stm32f10x_spi.h"
   5:SSD1331.c     **** 
   6:SSD1331.c     **** #include "stdio.h"
   7:SSD1331.c     **** #include "misc.h"
   8:SSD1331.c     **** 
   9:SSD1331.c     **** #include "SSD1331.h"
  10:SSD1331.c     **** 
  11:SSD1331.c     **** static unsigned char CHR_X, CHR_Y;
  12:SSD1331.c     **** 
  13:SSD1331.c     **** void _sendCmd(uint8_t c)
  14:SSD1331.c     **** {
  15:SSD1331.c     **** 	GPIO_ResetBits(GPIOB, GPIO_Pin_0); //dc
  16:SSD1331.c     **** 	GPIO_ResetBits(GPIOB, GPIO_Pin_1); //cs
  17:SSD1331.c     **** 	_sendData(c);
  18:SSD1331.c     **** 	GPIO_SetBits(GPIOB, GPIO_Pin_1); //cs
  19:SSD1331.c     **** }
  20:SSD1331.c     **** 
  21:SSD1331.c     **** void _sendData(uint8_t c) {
  26              		.loc 1 21 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  22:SSD1331.c     **** 	SPI_I2S_SendData(SPI1, c);
  36              		.loc 1 22 0
ARM GAS  /tmp/ccbMwiuG.s 			page 2


  37 0002 0146     		mov	r1, r0
  38 0004 0448     		ldr	r0, .L4
  39              	.LVL1:
  40 0006 FFF7FEFF 		bl	SPI_I2S_SendData
  41              	.LVL2:
  42              	.L2:
  23:SSD1331.c     **** 	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_BSY) == SET) {
  43              		.loc 1 23 0 discriminator 1
  44 000a 8021     		movs	r1, #128
  45 000c 0248     		ldr	r0, .L4
  46 000e FFF7FEFF 		bl	SPI_I2S_GetFlagStatus
  47              	.LVL3:
  48 0012 0128     		cmp	r0, #1
  49 0014 F9D0     		beq	.L2
  24:SSD1331.c     **** 	}
  25:SSD1331.c     **** }
  50              		.loc 1 25 0
  51 0016 08BD     		pop	{r3, pc}
  52              	.L5:
  53              		.align	2
  54              	.L4:
  55 0018 00300140 		.word	1073819648
  56              		.cfi_endproc
  57              	.LFE60:
  59              		.section	.text._sendCmd,"ax",%progbits
  60              		.align	1
  61              		.global	_sendCmd
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu softvfp
  67              	_sendCmd:
  68              	.LFB59:
  14:SSD1331.c     **** 	GPIO_ResetBits(GPIOB, GPIO_Pin_0); //dc
  69              		.loc 1 14 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              	.LVL4:
  74 0000 38B5     		push	{r3, r4, r5, lr}
  75              	.LCFI1:
  76              		.cfi_def_cfa_offset 16
  77              		.cfi_offset 3, -16
  78              		.cfi_offset 4, -12
  79              		.cfi_offset 5, -8
  80              		.cfi_offset 14, -4
  81 0002 0546     		mov	r5, r0
  15:SSD1331.c     **** 	GPIO_ResetBits(GPIOB, GPIO_Pin_1); //cs
  82              		.loc 1 15 0
  83 0004 084C     		ldr	r4, .L8
  84 0006 0121     		movs	r1, #1
  85 0008 2046     		mov	r0, r4
  86              	.LVL5:
  87 000a FFF7FEFF 		bl	GPIO_ResetBits
  88              	.LVL6:
  16:SSD1331.c     **** 	_sendData(c);
  89              		.loc 1 16 0
ARM GAS  /tmp/ccbMwiuG.s 			page 3


  90 000e 0221     		movs	r1, #2
  91 0010 2046     		mov	r0, r4
  92 0012 FFF7FEFF 		bl	GPIO_ResetBits
  93              	.LVL7:
  17:SSD1331.c     **** 	GPIO_SetBits(GPIOB, GPIO_Pin_1); //cs
  94              		.loc 1 17 0
  95 0016 2846     		mov	r0, r5
  96 0018 FFF7FEFF 		bl	_sendData
  97              	.LVL8:
  18:SSD1331.c     **** }
  98              		.loc 1 18 0
  99 001c 0221     		movs	r1, #2
 100 001e 2046     		mov	r0, r4
 101 0020 FFF7FEFF 		bl	GPIO_SetBits
 102              	.LVL9:
 103 0024 38BD     		pop	{r3, r4, r5, pc}
 104              	.L9:
 105 0026 00BF     		.align	2
 106              	.L8:
 107 0028 000C0140 		.word	1073810432
 108              		.cfi_endproc
 109              	.LFE59:
 111              		.section	.text.SSD1331_init,"ax",%progbits
 112              		.align	1
 113              		.global	SSD1331_init
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 117              		.fpu softvfp
 119              	SSD1331_init:
 120              	.LFB61:
  26:SSD1331.c     **** 
  27:SSD1331.c     **** void SSD1331_init(void)
  28:SSD1331.c     **** {
 121              		.loc 1 28 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 24
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125 0000 70B5     		push	{r4, r5, r6, lr}
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 16
 128              		.cfi_offset 4, -16
 129              		.cfi_offset 5, -12
 130              		.cfi_offset 6, -8
 131              		.cfi_offset 14, -4
 132 0002 86B0     		sub	sp, sp, #24
 133              	.LCFI3:
 134              		.cfi_def_cfa_offset 40
  29:SSD1331.c     **** 	GPIO_InitTypeDef  GPIO_InitStructure;
  30:SSD1331.c     **** 	SPI_InitTypeDef SPI_InitStructure;
  31:SSD1331.c     **** 
  32:SSD1331.c     **** 	// Enable PORTB Clock
  33:SSD1331.c     **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 135              		.loc 1 33 0
 136 0004 0121     		movs	r1, #1
 137 0006 0820     		movs	r0, #8
 138 0008 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
ARM GAS  /tmp/ccbMwiuG.s 			page 4


 139              	.LVL10:
  34:SSD1331.c     **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 140              		.loc 1 34 0
 141 000c 0323     		movs	r3, #3
 142 000e ADF81430 		strh	r3, [sp, #20]	@ movhi
  35:SSD1331.c     **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 143              		.loc 1 35 0
 144 0012 1025     		movs	r5, #16
 145 0014 8DF81750 		strb	r5, [sp, #23]
  36:SSD1331.c     **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 146              		.loc 1 36 0
 147 0018 0224     		movs	r4, #2
 148 001a 8DF81640 		strb	r4, [sp, #22]
  37:SSD1331.c     **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 149              		.loc 1 37 0
 150 001e 05A9     		add	r1, sp, #20
 151 0020 6148     		ldr	r0, .L12
 152 0022 FFF7FEFF 		bl	GPIO_Init
 153              	.LVL11:
  38:SSD1331.c     **** 
  39:SSD1331.c     **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 154              		.loc 1 39 0
 155 0026 0121     		movs	r1, #1
 156 0028 4FF48050 		mov	r0, #4096
 157 002c FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 158              	.LVL12:
  40:SSD1331.c     **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 159              		.loc 1 40 0
 160 0030 0121     		movs	r1, #1
 161 0032 0420     		movs	r0, #4
 162 0034 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 163              	.LVL13:
  41:SSD1331.c     **** 
  42:SSD1331.c     **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 164              		.loc 1 42 0
 165 0038 1823     		movs	r3, #24
 166 003a 8DF81730 		strb	r3, [sp, #23]
  43:SSD1331.c     **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 167              		.loc 1 43 0
 168 003e 8DF81640 		strb	r4, [sp, #22]
  44:SSD1331.c     **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 |  GPIO_Pin_5;
 169              		.loc 1 44 0
 170 0042 A026     		movs	r6, #160
 171 0044 ADF81460 		strh	r6, [sp, #20]	@ movhi
  45:SSD1331.c     **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 172              		.loc 1 45 0
 173 0048 584C     		ldr	r4, .L12+4
 174 004a 05A9     		add	r1, sp, #20
 175 004c 2046     		mov	r0, r4
 176 004e FFF7FEFF 		bl	GPIO_Init
 177              	.LVL14:
  46:SSD1331.c     **** 
  47:SSD1331.c     **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 178              		.loc 1 47 0
 179 0052 8DF81750 		strb	r5, [sp, #23]
  48:SSD1331.c     **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 180              		.loc 1 48 0
ARM GAS  /tmp/ccbMwiuG.s 			page 5


 181 0056 4025     		movs	r5, #64
 182 0058 ADF81450 		strh	r5, [sp, #20]	@ movhi
  49:SSD1331.c     **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 183              		.loc 1 49 0
 184 005c 05A9     		add	r1, sp, #20
 185 005e 2046     		mov	r0, r4
 186 0060 FFF7FEFF 		bl	GPIO_Init
 187              	.LVL15:
  50:SSD1331.c     **** 	GPIO_ResetBits(GPIOA, GPIO_Pin_6);
 188              		.loc 1 50 0
 189 0064 2946     		mov	r1, r5
 190 0066 2046     		mov	r0, r4
 191 0068 FFF7FEFF 		bl	GPIO_ResetBits
 192              	.LVL16:
  51:SSD1331.c     **** 	GPIO_SetBits(GPIOA, GPIO_Pin_6);
 193              		.loc 1 51 0
 194 006c 2946     		mov	r1, r5
 195 006e 2046     		mov	r0, r4
 196 0070 FFF7FEFF 		bl	GPIO_SetBits
 197              	.LVL17:
  52:SSD1331.c     **** 
  53:SSD1331.c     **** 	//SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  54:SSD1331.c     **** 	SPI_InitStructure.SPI_Direction = SPI_Direction_1Line_Tx;
 198              		.loc 1 54 0
 199 0074 4FF44043 		mov	r3, #49152
 200 0078 ADF80030 		strh	r3, [sp]	@ movhi
  55:SSD1331.c     **** 	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 201              		.loc 1 55 0
 202 007c 0024     		movs	r4, #0
 203 007e ADF80440 		strh	r4, [sp, #4]	@ movhi
  56:SSD1331.c     **** 	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 204              		.loc 1 56 0
 205 0082 ADF80640 		strh	r4, [sp, #6]	@ movhi
  57:SSD1331.c     **** 	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 206              		.loc 1 57 0
 207 0086 ADF80840 		strh	r4, [sp, #8]	@ movhi
  58:SSD1331.c     **** 	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 208              		.loc 1 58 0
 209 008a 4FF40073 		mov	r3, #512
 210 008e ADF80A30 		strh	r3, [sp, #10]	@ movhi
  59:SSD1331.c     **** 	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 211              		.loc 1 59 0
 212 0092 ADF80C40 		strh	r4, [sp, #12]	@ movhi
  60:SSD1331.c     **** 	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 213              		.loc 1 60 0
 214 0096 ADF80E40 		strh	r4, [sp, #14]	@ movhi
  61:SSD1331.c     **** 	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 215              		.loc 1 61 0
 216 009a 4FF48273 		mov	r3, #260
 217 009e ADF80230 		strh	r3, [sp, #2]	@ movhi
  62:SSD1331.c     **** 	SPI_Init(SPI1, &SPI_InitStructure);
 218              		.loc 1 62 0
 219 00a2 434D     		ldr	r5, .L12+8
 220 00a4 6946     		mov	r1, sp
 221 00a6 2846     		mov	r0, r5
 222 00a8 FFF7FEFF 		bl	SPI_Init
 223              	.LVL18:
ARM GAS  /tmp/ccbMwiuG.s 			page 6


  63:SSD1331.c     **** 	SPI_Cmd(SPI1, ENABLE);
 224              		.loc 1 63 0
 225 00ac 0121     		movs	r1, #1
 226 00ae 2846     		mov	r0, r5
 227 00b0 FFF7FEFF 		bl	SPI_Cmd
 228              	.LVL19:
  64:SSD1331.c     **** 	SPI_NSSInternalSoftwareConfig(SPI1, SPI_NSSInternalSoft_Set);
 229              		.loc 1 64 0
 230 00b4 4FF48071 		mov	r1, #256
 231 00b8 2846     		mov	r0, r5
 232 00ba FFF7FEFF 		bl	SPI_NSSInternalSoftwareConfig
 233              	.LVL20:
  65:SSD1331.c     **** 
  66:SSD1331.c     ****     _sendCmd(CMD_DISPLAY_OFF);          //Display Off
 234              		.loc 1 66 0
 235 00be AE20     		movs	r0, #174
 236 00c0 FFF7FEFF 		bl	_sendCmd
 237              	.LVL21:
  67:SSD1331.c     ****     _sendCmd(CMD_SET_CONTRAST_A);       //Set contrast for color A
 238              		.loc 1 67 0
 239 00c4 8120     		movs	r0, #129
 240 00c6 FFF7FEFF 		bl	_sendCmd
 241              	.LVL22:
  68:SSD1331.c     ****     _sendCmd(0x91);                     //145 (0x91)
 242              		.loc 1 68 0
 243 00ca 9120     		movs	r0, #145
 244 00cc FFF7FEFF 		bl	_sendCmd
 245              	.LVL23:
  69:SSD1331.c     ****     _sendCmd(CMD_SET_CONTRAST_B);       //Set contrast for color B
 246              		.loc 1 69 0
 247 00d0 8220     		movs	r0, #130
 248 00d2 FFF7FEFF 		bl	_sendCmd
 249              	.LVL24:
  70:SSD1331.c     ****     _sendCmd(0x50);                     //80 (0x50)
 250              		.loc 1 70 0
 251 00d6 5020     		movs	r0, #80
 252 00d8 FFF7FEFF 		bl	_sendCmd
 253              	.LVL25:
  71:SSD1331.c     ****     _sendCmd(CMD_SET_CONTRAST_C);       //Set contrast for color C
 254              		.loc 1 71 0
 255 00dc 8320     		movs	r0, #131
 256 00de FFF7FEFF 		bl	_sendCmd
 257              	.LVL26:
  72:SSD1331.c     ****     _sendCmd(0x7D);                     //125 (0x7D)
 258              		.loc 1 72 0
 259 00e2 7D20     		movs	r0, #125
 260 00e4 FFF7FEFF 		bl	_sendCmd
 261              	.LVL27:
  73:SSD1331.c     ****     _sendCmd(CMD_MASTER_CURRENT_CONTROL);//master current control
 262              		.loc 1 73 0
 263 00e8 8720     		movs	r0, #135
 264 00ea FFF7FEFF 		bl	_sendCmd
 265              	.LVL28:
  74:SSD1331.c     ****     _sendCmd(0x06);                     //6
 266              		.loc 1 74 0
 267 00ee 0620     		movs	r0, #6
 268 00f0 FFF7FEFF 		bl	_sendCmd
ARM GAS  /tmp/ccbMwiuG.s 			page 7


 269              	.LVL29:
  75:SSD1331.c     ****     _sendCmd(CMD_SET_PRECHARGE_SPEED_A);//Set Second Pre-change Speed For ColorA
 270              		.loc 1 75 0
 271 00f4 8A20     		movs	r0, #138
 272 00f6 FFF7FEFF 		bl	_sendCmd
 273              	.LVL30:
  76:SSD1331.c     ****     _sendCmd(0x64);                     //100
 274              		.loc 1 76 0
 275 00fa 6420     		movs	r0, #100
 276 00fc FFF7FEFF 		bl	_sendCmd
 277              	.LVL31:
  77:SSD1331.c     ****     _sendCmd(CMD_SET_PRECHARGE_SPEED_B);//Set Second Pre-change Speed For ColorB
 278              		.loc 1 77 0
 279 0100 8B20     		movs	r0, #139
 280 0102 FFF7FEFF 		bl	_sendCmd
 281              	.LVL32:
  78:SSD1331.c     ****     _sendCmd(0x78);                     //120
 282              		.loc 1 78 0
 283 0106 7820     		movs	r0, #120
 284 0108 FFF7FEFF 		bl	_sendCmd
 285              	.LVL33:
  79:SSD1331.c     ****     _sendCmd(CMD_SET_PRECHARGE_SPEED_C);//Set Second Pre-change Speed For ColorC
 286              		.loc 1 79 0
 287 010c 8C20     		movs	r0, #140
 288 010e FFF7FEFF 		bl	_sendCmd
 289              	.LVL34:
  80:SSD1331.c     ****     _sendCmd(0x64);                     //100
 290              		.loc 1 80 0
 291 0112 6420     		movs	r0, #100
 292 0114 FFF7FEFF 		bl	_sendCmd
 293              	.LVL35:
  81:SSD1331.c     ****     _sendCmd(CMD_SET_REMAP);            //set remap & data format
 294              		.loc 1 81 0
 295 0118 3046     		mov	r0, r6
 296 011a FFF7FEFF 		bl	_sendCmd
 297              	.LVL36:
  82:SSD1331.c     ****     _sendCmd(0x72);                     //0x72
 298              		.loc 1 82 0
 299 011e 7220     		movs	r0, #114
 300 0120 FFF7FEFF 		bl	_sendCmd
 301              	.LVL37:
  83:SSD1331.c     ****     _sendCmd(CMD_SET_DISPLAY_START_LINE);//Set display Start Line
 302              		.loc 1 83 0
 303 0124 A120     		movs	r0, #161
 304 0126 FFF7FEFF 		bl	_sendCmd
 305              	.LVL38:
  84:SSD1331.c     ****     _sendCmd(0x0);
 306              		.loc 1 84 0
 307 012a 2046     		mov	r0, r4
 308 012c FFF7FEFF 		bl	_sendCmd
 309              	.LVL39:
  85:SSD1331.c     ****     _sendCmd(CMD_SET_DISPLAY_OFFSET);   //Set display offset
 310              		.loc 1 85 0
 311 0130 A220     		movs	r0, #162
 312 0132 FFF7FEFF 		bl	_sendCmd
 313              	.LVL40:
  86:SSD1331.c     ****     _sendCmd(0x0);
ARM GAS  /tmp/ccbMwiuG.s 			page 8


 314              		.loc 1 86 0
 315 0136 2046     		mov	r0, r4
 316 0138 FFF7FEFF 		bl	_sendCmd
 317              	.LVL41:
  87:SSD1331.c     ****     _sendCmd(CMD_NORMAL_DISPLAY);       //Set display mode
 318              		.loc 1 87 0
 319 013c A420     		movs	r0, #164
 320 013e FFF7FEFF 		bl	_sendCmd
 321              	.LVL42:
  88:SSD1331.c     ****     _sendCmd(CMD_SET_MULTIPLEX_RATIO);  //Set multiplex ratio
 322              		.loc 1 88 0
 323 0142 A820     		movs	r0, #168
 324 0144 FFF7FEFF 		bl	_sendCmd
 325              	.LVL43:
  89:SSD1331.c     ****     _sendCmd(0x3F);
 326              		.loc 1 89 0
 327 0148 3F20     		movs	r0, #63
 328 014a FFF7FEFF 		bl	_sendCmd
 329              	.LVL44:
  90:SSD1331.c     ****     _sendCmd(CMD_SET_MASTER_CONFIGURE); //Set master configuration
 330              		.loc 1 90 0
 331 014e AD20     		movs	r0, #173
 332 0150 FFF7FEFF 		bl	_sendCmd
 333              	.LVL45:
  91:SSD1331.c     ****     _sendCmd(0x8E);
 334              		.loc 1 91 0
 335 0154 8E20     		movs	r0, #142
 336 0156 FFF7FEFF 		bl	_sendCmd
 337              	.LVL46:
  92:SSD1331.c     ****     _sendCmd(CMD_POWER_SAVE_MODE);      //Set Power Save Mode
 338              		.loc 1 92 0
 339 015a B020     		movs	r0, #176
 340 015c FFF7FEFF 		bl	_sendCmd
 341              	.LVL47:
  93:SSD1331.c     ****     _sendCmd(0x00);                     //0x00
 342              		.loc 1 93 0
 343 0160 2046     		mov	r0, r4
 344 0162 FFF7FEFF 		bl	_sendCmd
 345              	.LVL48:
  94:SSD1331.c     ****     _sendCmd(CMD_PHASE_PERIOD_ADJUSTMENT);//phase 1 and 2 period adjustment
 346              		.loc 1 94 0
 347 0166 B120     		movs	r0, #177
 348 0168 FFF7FEFF 		bl	_sendCmd
 349              	.LVL49:
  95:SSD1331.c     ****     _sendCmd(0x31);                     //0x31
 350              		.loc 1 95 0
 351 016c 3120     		movs	r0, #49
 352 016e FFF7FEFF 		bl	_sendCmd
 353              	.LVL50:
  96:SSD1331.c     ****     _sendCmd(CMD_DISPLAY_CLOCK_DIV);    //display clock divider/oscillator frequency
 354              		.loc 1 96 0
 355 0172 B320     		movs	r0, #179
 356 0174 FFF7FEFF 		bl	_sendCmd
 357              	.LVL51:
  97:SSD1331.c     ****     _sendCmd(0xF0);
 358              		.loc 1 97 0
 359 0178 F020     		movs	r0, #240
ARM GAS  /tmp/ccbMwiuG.s 			page 9


 360 017a FFF7FEFF 		bl	_sendCmd
 361              	.LVL52:
  98:SSD1331.c     ****     _sendCmd(CMD_SET_PRECHARGE_VOLTAGE);//Set Pre-Change Level
 362              		.loc 1 98 0
 363 017e BB20     		movs	r0, #187
 364 0180 FFF7FEFF 		bl	_sendCmd
 365              	.LVL53:
  99:SSD1331.c     ****     _sendCmd(0x3A);
 366              		.loc 1 99 0
 367 0184 3A20     		movs	r0, #58
 368 0186 FFF7FEFF 		bl	_sendCmd
 369              	.LVL54:
 100:SSD1331.c     ****     _sendCmd(CMD_SET_V_VOLTAGE);        //Set vcomH
 370              		.loc 1 100 0
 371 018a BE20     		movs	r0, #190
 372 018c FFF7FEFF 		bl	_sendCmd
 373              	.LVL55:
 101:SSD1331.c     ****     _sendCmd(0x3E);
 374              		.loc 1 101 0
 375 0190 3E20     		movs	r0, #62
 376 0192 FFF7FEFF 		bl	_sendCmd
 377              	.LVL56:
 102:SSD1331.c     ****     _sendCmd(CMD_DEACTIVE_SCROLLING);   //disable scrolling
 378              		.loc 1 102 0
 379 0196 2E20     		movs	r0, #46
 380 0198 FFF7FEFF 		bl	_sendCmd
 381              	.LVL57:
 103:SSD1331.c     ****     _sendCmd(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);//set display on
 382              		.loc 1 103 0
 383 019c AF20     		movs	r0, #175
 384 019e FFF7FEFF 		bl	_sendCmd
 385              	.LVL58:
 104:SSD1331.c     **** }
 386              		.loc 1 104 0
 387 01a2 06B0     		add	sp, sp, #24
 388              	.LCFI4:
 389              		.cfi_def_cfa_offset 16
 390              		@ sp needed
 391 01a4 70BD     		pop	{r4, r5, r6, pc}
 392              	.L13:
 393 01a6 00BF     		.align	2
 394              	.L12:
 395 01a8 000C0140 		.word	1073810432
 396 01ac 00080140 		.word	1073809408
 397 01b0 00300140 		.word	1073819648
 398              		.cfi_endproc
 399              	.LFE61:
 401              		.section	.text.SSD1331_drawPixel,"ax",%progbits
 402              		.align	1
 403              		.global	SSD1331_drawPixel
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 407              		.fpu softvfp
 409              	SSD1331_drawPixel:
 410              	.LFB62:
 105:SSD1331.c     **** 
ARM GAS  /tmp/ccbMwiuG.s 			page 10


 106:SSD1331.c     **** void SSD1331_drawPixel(uint16_t x, uint16_t y, uint16_t color)
 107:SSD1331.c     **** {
 411              		.loc 1 107 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415              	.LVL59:
 108:SSD1331.c     ****     if ((x < 0) || (x >= RGB_OLED_WIDTH) || (y < 0) || (y >= RGB_OLED_HEIGHT))
 416              		.loc 1 108 0
 417 0000 5F28     		cmp	r0, #95
 418 0002 01D8     		bhi	.L17
 419              		.loc 1 108 0 is_stmt 0 discriminator 1
 420 0004 3F29     		cmp	r1, #63
 421 0006 00D9     		bls	.L20
 422              	.L17:
 423 0008 7047     		bx	lr
 424              	.L20:
 107:SSD1331.c     ****     if ((x < 0) || (x >= RGB_OLED_WIDTH) || (y < 0) || (y >= RGB_OLED_HEIGHT))
 425              		.loc 1 107 0 is_stmt 1
 426 000a 70B5     		push	{r4, r5, r6, lr}
 427              	.LCFI5:
 428              		.cfi_def_cfa_offset 16
 429              		.cfi_offset 4, -16
 430              		.cfi_offset 5, -12
 431              		.cfi_offset 6, -8
 432              		.cfi_offset 14, -4
 433 000c 1646     		mov	r6, r2
 434 000e 0D46     		mov	r5, r1
 435 0010 0446     		mov	r4, r0
 109:SSD1331.c     ****         return;
 110:SSD1331.c     ****     //set column point
 111:SSD1331.c     ****     _sendCmd(CMD_SET_COLUMN_ADDRESS);
 436              		.loc 1 111 0
 437 0012 1520     		movs	r0, #21
 438              	.LVL60:
 439 0014 FFF7FEFF 		bl	_sendCmd
 440              	.LVL61:
 112:SSD1331.c     ****     _sendCmd(x);
 441              		.loc 1 112 0
 442 0018 E0B2     		uxtb	r0, r4
 443 001a FFF7FEFF 		bl	_sendCmd
 444              	.LVL62:
 113:SSD1331.c     ****     _sendCmd(RGB_OLED_WIDTH-1);
 445              		.loc 1 113 0
 446 001e 5F20     		movs	r0, #95
 447 0020 FFF7FEFF 		bl	_sendCmd
 448              	.LVL63:
 114:SSD1331.c     ****     //set row point
 115:SSD1331.c     ****     _sendCmd(CMD_SET_ROW_ADDRESS);
 449              		.loc 1 115 0
 450 0024 7520     		movs	r0, #117
 451 0026 FFF7FEFF 		bl	_sendCmd
 452              	.LVL64:
 116:SSD1331.c     ****     _sendCmd(y);
 453              		.loc 1 116 0
 454 002a E8B2     		uxtb	r0, r5
 455 002c FFF7FEFF 		bl	_sendCmd
ARM GAS  /tmp/ccbMwiuG.s 			page 11


 456              	.LVL65:
 117:SSD1331.c     ****     _sendCmd(RGB_OLED_HEIGHT-1);
 457              		.loc 1 117 0
 458 0030 3F20     		movs	r0, #63
 459 0032 FFF7FEFF 		bl	_sendCmd
 460              	.LVL66:
 118:SSD1331.c     **** 
 119:SSD1331.c     **** 	GPIO_SetBits(GPIOB, GPIO_Pin_0); //dc
 461              		.loc 1 119 0
 462 0036 0A4C     		ldr	r4, .L21
 463 0038 0121     		movs	r1, #1
 464 003a 2046     		mov	r0, r4
 465 003c FFF7FEFF 		bl	GPIO_SetBits
 466              	.LVL67:
 120:SSD1331.c     **** 	GPIO_ResetBits(GPIOB, GPIO_Pin_1); //cs
 467              		.loc 1 120 0
 468 0040 0221     		movs	r1, #2
 469 0042 2046     		mov	r0, r4
 470 0044 FFF7FEFF 		bl	GPIO_ResetBits
 471              	.LVL68:
 121:SSD1331.c     **** 
 122:SSD1331.c     **** 	_sendData(color >> 8);
 472              		.loc 1 122 0
 473 0048 300A     		lsrs	r0, r6, #8
 474 004a FFF7FEFF 		bl	_sendData
 475              	.LVL69:
 123:SSD1331.c     **** 	_sendData(color);
 476              		.loc 1 123 0
 477 004e F0B2     		uxtb	r0, r6
 478 0050 FFF7FEFF 		bl	_sendData
 479              	.LVL70:
 124:SSD1331.c     **** 
 125:SSD1331.c     **** 	GPIO_SetBits(GPIOB, GPIO_Pin_1); //cs
 480              		.loc 1 125 0
 481 0054 0221     		movs	r1, #2
 482 0056 2046     		mov	r0, r4
 483 0058 FFF7FEFF 		bl	GPIO_SetBits
 484              	.LVL71:
 485 005c 70BD     		pop	{r4, r5, r6, pc}
 486              	.L22:
 487 005e 00BF     		.align	2
 488              	.L21:
 489 0060 000C0140 		.word	1073810432
 490              		.cfi_endproc
 491              	.LFE62:
 493              		.section	.text.SSD1331_drawLine,"ax",%progbits
 494              		.align	1
 495              		.global	SSD1331_drawLine
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 499              		.fpu softvfp
 501              	SSD1331_drawLine:
 502              	.LFB63:
 126:SSD1331.c     **** }
 127:SSD1331.c     **** 
 128:SSD1331.c     **** void SSD1331_drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
ARM GAS  /tmp/ccbMwiuG.s 			page 12


 129:SSD1331.c     **** {
 503              		.loc 1 129 0
 504              		.cfi_startproc
 505              		@ args = 4, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              	.LVL72:
 508 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 509              	.LCFI6:
 510              		.cfi_def_cfa_offset 24
 511              		.cfi_offset 4, -24
 512              		.cfi_offset 5, -20
 513              		.cfi_offset 6, -16
 514              		.cfi_offset 7, -12
 515              		.cfi_offset 8, -8
 516              		.cfi_offset 14, -4
 517 0004 8046     		mov	r8, r0
 518 0006 0F46     		mov	r7, r1
 519 0008 1646     		mov	r6, r2
 520 000a 1D46     		mov	r5, r3
 521 000c BDF81840 		ldrh	r4, [sp, #24]
 130:SSD1331.c     ****     if((x0 < 0) || (y0 < 0) || (x1 < 0) || (y1 < 0))
 131:SSD1331.c     ****         return;
 132:SSD1331.c     **** 
 133:SSD1331.c     ****     if (x0 >= RGB_OLED_WIDTH)  x0 = RGB_OLED_WIDTH - 1;
 522              		.loc 1 133 0
 523 0010 5F28     		cmp	r0, #95
 524 0012 01D9     		bls	.L24
 525 0014 4FF05F08 		mov	r8, #95
 526              	.L24:
 527              	.LVL73:
 134:SSD1331.c     ****     if (y0 >= RGB_OLED_HEIGHT) y0 = RGB_OLED_HEIGHT - 1;
 528              		.loc 1 134 0
 529 0018 3F2F     		cmp	r7, #63
 530 001a 00D9     		bls	.L25
 531 001c 3F27     		movs	r7, #63
 532              	.L25:
 533              	.LVL74:
 135:SSD1331.c     ****     if (x1 >= RGB_OLED_WIDTH)  x1 = RGB_OLED_WIDTH - 1;
 534              		.loc 1 135 0
 535 001e 5F2E     		cmp	r6, #95
 536 0020 00D9     		bls	.L26
 537 0022 5F26     		movs	r6, #95
 538              	.L26:
 539              	.LVL75:
 136:SSD1331.c     ****     if (y1 >= RGB_OLED_HEIGHT) y1 = RGB_OLED_HEIGHT - 1;
 540              		.loc 1 136 0
 541 0024 3F2D     		cmp	r5, #63
 542 0026 00D9     		bls	.L27
 543 0028 3F25     		movs	r5, #63
 544              	.L27:
 545              	.LVL76:
 137:SSD1331.c     **** 
 138:SSD1331.c     ****     _sendCmd(CMD_DRAW_LINE);//draw line
 546              		.loc 1 138 0
 547 002a 2120     		movs	r0, #33
 548 002c FFF7FEFF 		bl	_sendCmd
 549              	.LVL77:
ARM GAS  /tmp/ccbMwiuG.s 			page 13


 139:SSD1331.c     ****     _sendCmd(x0);//start column
 550              		.loc 1 139 0
 551 0030 5FFA88F0 		uxtb	r0, r8
 552 0034 FFF7FEFF 		bl	_sendCmd
 553              	.LVL78:
 140:SSD1331.c     ****     _sendCmd(y0);//start row
 554              		.loc 1 140 0
 555 0038 F8B2     		uxtb	r0, r7
 556 003a FFF7FEFF 		bl	_sendCmd
 557              	.LVL79:
 141:SSD1331.c     ****     _sendCmd(x1);//end column
 558              		.loc 1 141 0
 559 003e F0B2     		uxtb	r0, r6
 560 0040 FFF7FEFF 		bl	_sendCmd
 561              	.LVL80:
 142:SSD1331.c     ****     _sendCmd(y1);//end row
 562              		.loc 1 142 0
 563 0044 E8B2     		uxtb	r0, r5
 564 0046 FFF7FEFF 		bl	_sendCmd
 565              	.LVL81:
 143:SSD1331.c     ****     _sendCmd((uint8_t)((color>>11)&0x1F));//R
 566              		.loc 1 143 0
 567 004a E00A     		lsrs	r0, r4, #11
 568 004c FFF7FEFF 		bl	_sendCmd
 569              	.LVL82:
 144:SSD1331.c     ****     _sendCmd((uint8_t)((color>>5)&0x3F));//G
 570              		.loc 1 144 0
 571 0050 C4F34510 		ubfx	r0, r4, #5, #6
 572 0054 FFF7FEFF 		bl	_sendCmd
 573              	.LVL83:
 145:SSD1331.c     ****     _sendCmd((uint8_t)(color&0x1F));//B
 574              		.loc 1 145 0
 575 0058 04F01F00 		and	r0, r4, #31
 576 005c FFF7FEFF 		bl	_sendCmd
 577              	.LVL84:
 578 0060 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 579              		.cfi_endproc
 580              	.LFE63:
 582              		.section	.text.SSD1331_drawFrame,"ax",%progbits
 583              		.align	1
 584              		.global	SSD1331_drawFrame
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 588              		.fpu softvfp
 590              	SSD1331_drawFrame:
 591              	.LFB64:
 146:SSD1331.c     **** }
 147:SSD1331.c     **** 
 148:SSD1331.c     **** void SSD1331_drawFrame(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t outColor, uint1
 149:SSD1331.c     **** {
 592              		.loc 1 149 0
 593              		.cfi_startproc
 594              		@ args = 8, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              	.LVL85:
 597 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /tmp/ccbMwiuG.s 			page 14


 598              	.LCFI7:
 599              		.cfi_def_cfa_offset 32
 600              		.cfi_offset 3, -32
 601              		.cfi_offset 4, -28
 602              		.cfi_offset 5, -24
 603              		.cfi_offset 6, -20
 604              		.cfi_offset 7, -16
 605              		.cfi_offset 8, -12
 606              		.cfi_offset 9, -8
 607              		.cfi_offset 14, -4
 608 0004 8146     		mov	r9, r0
 609 0006 8846     		mov	r8, r1
 610 0008 1746     		mov	r7, r2
 611 000a 1E46     		mov	r6, r3
 612 000c BDF82050 		ldrh	r5, [sp, #32]
 613 0010 BDF82440 		ldrh	r4, [sp, #36]
 150:SSD1331.c     ****     if((x0 < 0) || (y0 < 0) || (x1 < 0) || (y1 < 0))
 151:SSD1331.c     ****         return;
 152:SSD1331.c     **** 
 153:SSD1331.c     ****     if (x0 >= RGB_OLED_WIDTH)  x0 = RGB_OLED_WIDTH - 1;
 614              		.loc 1 153 0
 615 0014 5F28     		cmp	r0, #95
 616 0016 01D9     		bls	.L34
 617 0018 4FF05F09 		mov	r9, #95
 618              	.L34:
 619              	.LVL86:
 154:SSD1331.c     ****     if (y0 >= RGB_OLED_HEIGHT) y0 = RGB_OLED_HEIGHT - 1;
 620              		.loc 1 154 0
 621 001c B8F13F0F 		cmp	r8, #63
 622 0020 01D9     		bls	.L35
 623 0022 4FF03F08 		mov	r8, #63
 624              	.L35:
 625              	.LVL87:
 155:SSD1331.c     ****     if (x1 >= RGB_OLED_WIDTH)  x1 = RGB_OLED_WIDTH - 1;
 626              		.loc 1 155 0
 627 0026 5F2F     		cmp	r7, #95
 628 0028 00D9     		bls	.L36
 629 002a 5F27     		movs	r7, #95
 630              	.L36:
 631              	.LVL88:
 156:SSD1331.c     ****     if (y1 >= RGB_OLED_HEIGHT) y1 = RGB_OLED_HEIGHT - 1;
 632              		.loc 1 156 0
 633 002c 3F2E     		cmp	r6, #63
 634 002e 00D9     		bls	.L37
 635 0030 3F26     		movs	r6, #63
 636              	.L37:
 637              	.LVL89:
 157:SSD1331.c     **** 
 158:SSD1331.c     ****     _sendCmd(CMD_FILL_WINDOW);//fill window
 638              		.loc 1 158 0
 639 0032 2620     		movs	r0, #38
 640 0034 FFF7FEFF 		bl	_sendCmd
 641              	.LVL90:
 159:SSD1331.c     ****     _sendCmd(ENABLE_FILL);
 642              		.loc 1 159 0
 643 0038 0120     		movs	r0, #1
 644 003a FFF7FEFF 		bl	_sendCmd
ARM GAS  /tmp/ccbMwiuG.s 			page 15


 645              	.LVL91:
 160:SSD1331.c     ****     _sendCmd(CMD_DRAW_RECTANGLE);//draw rectangle
 646              		.loc 1 160 0
 647 003e 2220     		movs	r0, #34
 648 0040 FFF7FEFF 		bl	_sendCmd
 649              	.LVL92:
 161:SSD1331.c     ****     _sendCmd(x0);//start column
 650              		.loc 1 161 0
 651 0044 5FFA89F0 		uxtb	r0, r9
 652 0048 FFF7FEFF 		bl	_sendCmd
 653              	.LVL93:
 162:SSD1331.c     ****     _sendCmd(y0);//start row
 654              		.loc 1 162 0
 655 004c 5FFA88F0 		uxtb	r0, r8
 656 0050 FFF7FEFF 		bl	_sendCmd
 657              	.LVL94:
 163:SSD1331.c     ****     _sendCmd(x1);//end column
 658              		.loc 1 163 0
 659 0054 F8B2     		uxtb	r0, r7
 660 0056 FFF7FEFF 		bl	_sendCmd
 661              	.LVL95:
 164:SSD1331.c     ****     _sendCmd(y1);//end row
 662              		.loc 1 164 0
 663 005a F0B2     		uxtb	r0, r6
 664 005c FFF7FEFF 		bl	_sendCmd
 665              	.LVL96:
 165:SSD1331.c     ****     _sendCmd((uint8_t)((outColor>>11)&0x1F));//R
 666              		.loc 1 165 0
 667 0060 E80A     		lsrs	r0, r5, #11
 668 0062 FFF7FEFF 		bl	_sendCmd
 669              	.LVL97:
 166:SSD1331.c     ****     _sendCmd((uint8_t)((outColor>>5)&0x3F));//G
 670              		.loc 1 166 0
 671 0066 C5F34510 		ubfx	r0, r5, #5, #6
 672 006a FFF7FEFF 		bl	_sendCmd
 673              	.LVL98:
 167:SSD1331.c     ****     _sendCmd((uint8_t)(outColor&0x1F));//B
 674              		.loc 1 167 0
 675 006e 05F01F00 		and	r0, r5, #31
 676 0072 FFF7FEFF 		bl	_sendCmd
 677              	.LVL99:
 168:SSD1331.c     ****     _sendCmd((uint8_t)((fillColor>>11)&0x1F));//R
 678              		.loc 1 168 0
 679 0076 E00A     		lsrs	r0, r4, #11
 680 0078 FFF7FEFF 		bl	_sendCmd
 681              	.LVL100:
 169:SSD1331.c     ****     _sendCmd((uint8_t)((fillColor>>5)&0x3F));//G
 682              		.loc 1 169 0
 683 007c C4F34510 		ubfx	r0, r4, #5, #6
 684 0080 FFF7FEFF 		bl	_sendCmd
 685              	.LVL101:
 170:SSD1331.c     ****     _sendCmd((uint8_t)(fillColor&0x1F));//B
 686              		.loc 1 170 0
 687 0084 04F01F00 		and	r0, r4, #31
 688 0088 FFF7FEFF 		bl	_sendCmd
 689              	.LVL102:
 690 008c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/ccbMwiuG.s 			page 16


 691              		.cfi_endproc
 692              	.LFE64:
 694              		.section	.text.SSD1331_drawCircle,"ax",%progbits
 695              		.align	1
 696              		.global	SSD1331_drawCircle
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 700              		.fpu softvfp
 702              	SSD1331_drawCircle:
 703              	.LFB65:
 171:SSD1331.c     **** }
 172:SSD1331.c     **** 
 173:SSD1331.c     **** void SSD1331_drawCircle(uint16_t x, uint16_t y, uint16_t radius, uint16_t color) {
 704              		.loc 1 173 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 16
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 708              	.LVL103:
 174:SSD1331.c     **** 	signed char xc = 0;
 175:SSD1331.c     **** 	signed char yc = 0;
 176:SSD1331.c     **** 	signed char p = 0;
 177:SSD1331.c     **** 
 178:SSD1331.c     ****     // Out of range
 179:SSD1331.c     ****     if (x >= RGB_OLED_WIDTH || y >= RGB_OLED_HEIGHT)
 709              		.loc 1 179 0
 710 0000 5F28     		cmp	r0, #95
 711 0002 78D8     		bhi	.L50
 712              		.loc 1 179 0 is_stmt 0 discriminator 1
 713 0004 3F29     		cmp	r1, #63
 714 0006 76D8     		bhi	.L50
 173:SSD1331.c     **** 	signed char xc = 0;
 715              		.loc 1 173 0 is_stmt 1
 716 0008 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 717              	.LCFI8:
 718              		.cfi_def_cfa_offset 36
 719              		.cfi_offset 4, -36
 720              		.cfi_offset 5, -32
 721              		.cfi_offset 6, -28
 722              		.cfi_offset 7, -24
 723              		.cfi_offset 8, -20
 724              		.cfi_offset 9, -16
 725              		.cfi_offset 10, -12
 726              		.cfi_offset 11, -8
 727              		.cfi_offset 14, -4
 728 000c 85B0     		sub	sp, sp, #20
 729              	.LCFI9:
 730              		.cfi_def_cfa_offset 56
 731 000e 0193     		str	r3, [sp, #4]
 732 0010 8B46     		mov	fp, r1
 733 0012 8246     		mov	r10, r0
 180:SSD1331.c     ****         return;
 181:SSD1331.c     **** 
 182:SSD1331.c     ****     yc = radius;
 734              		.loc 1 182 0
 735 0014 4FFA82F9 		sxtb	r9, r2
 736              	.LVL104:
ARM GAS  /tmp/ccbMwiuG.s 			page 17


 183:SSD1331.c     ****     p = 3 - (radius<<1);
 737              		.loc 1 183 0
 738 0018 5200     		lsls	r2, r2, #1
 739              	.LVL105:
 740 001a D2B2     		uxtb	r2, r2
 741 001c C2F10302 		rsb	r2, r2, #3
 742 0020 53B2     		sxtb	r3, r2
 743              	.LVL106:
 744 0022 0293     		str	r3, [sp, #8]
 745              	.LVL107:
 174:SSD1331.c     **** 	signed char yc = 0;
 746              		.loc 1 174 0
 747 0024 0024     		movs	r4, #0
 184:SSD1331.c     ****     while (xc <= yc)
 748              		.loc 1 184 0
 749 0026 07E0     		b	.L45
 750              	.LVL108:
 751              	.L54:
 185:SSD1331.c     ****     {
 186:SSD1331.c     ****     	SSD1331_drawPixel(x + xc, y + yc, color);
 187:SSD1331.c     ****     	SSD1331_drawPixel(x + xc, y - yc, color);
 188:SSD1331.c     ****     	SSD1331_drawPixel(x - xc, y + yc, color);
 189:SSD1331.c     ****     	SSD1331_drawPixel(x - xc, y - yc, color);
 190:SSD1331.c     ****     	SSD1331_drawPixel(x + yc, y + xc, color);
 191:SSD1331.c     ****     	SSD1331_drawPixel(x + yc, y - xc, color);
 192:SSD1331.c     ****     	SSD1331_drawPixel(x - yc, y + xc, color);
 193:SSD1331.c     ****     	SSD1331_drawPixel(x - yc, y - xc, color);
 194:SSD1331.c     ****         if (p < 0) p += (xc++ << 2) + 6;
 752              		.loc 1 194 0 discriminator 1
 753 0028 631C     		adds	r3, r4, #1
 754              	.LVL109:
 755 002a A400     		lsls	r4, r4, #2
 756 002c 0634     		adds	r4, r4, #6
 757 002e 029A     		ldr	r2, [sp, #8]
 758 0030 1444     		add	r4, r4, r2
 759 0032 62B2     		sxtb	r2, r4
 760 0034 0292     		str	r2, [sp, #8]
 761              	.LVL110:
 762 0036 5CB2     		sxtb	r4, r3
 763              	.LVL111:
 764              	.L45:
 184:SSD1331.c     ****     while (xc <= yc)
 765              		.loc 1 184 0
 766 0038 4C45     		cmp	r4, r9
 767 003a 59DC     		bgt	.L53
 186:SSD1331.c     ****     	SSD1331_drawPixel(x + xc, y - yc, color);
 768              		.loc 1 186 0
 769 003c A6B2     		uxth	r6, r4
 770 003e 0AEB0607 		add	r7, r10, r6
 771 0042 BFB2     		uxth	r7, r7
 772 0044 1FFA89F5 		uxth	r5, r9
 773 0048 0BEB0508 		add	r8, fp, r5
 774 004c 1FFA88F8 		uxth	r8, r8
 775 0050 019A     		ldr	r2, [sp, #4]
 776 0052 4146     		mov	r1, r8
 777 0054 3846     		mov	r0, r7
 778 0056 FFF7FEFF 		bl	SSD1331_drawPixel
ARM GAS  /tmp/ccbMwiuG.s 			page 18


 779              	.LVL112:
 187:SSD1331.c     ****     	SSD1331_drawPixel(x - xc, y + yc, color);
 780              		.loc 1 187 0
 781 005a ABEB0503 		sub	r3, fp, r5
 782 005e 9BB2     		uxth	r3, r3
 783 0060 019A     		ldr	r2, [sp, #4]
 784 0062 0393     		str	r3, [sp, #12]
 785 0064 1946     		mov	r1, r3
 786 0066 3846     		mov	r0, r7
 787 0068 FFF7FEFF 		bl	SSD1331_drawPixel
 788              	.LVL113:
 188:SSD1331.c     ****     	SSD1331_drawPixel(x - xc, y - yc, color);
 789              		.loc 1 188 0
 790 006c AAEB0607 		sub	r7, r10, r6
 791 0070 BFB2     		uxth	r7, r7
 792 0072 019A     		ldr	r2, [sp, #4]
 793 0074 4146     		mov	r1, r8
 794 0076 3846     		mov	r0, r7
 795 0078 FFF7FEFF 		bl	SSD1331_drawPixel
 796              	.LVL114:
 189:SSD1331.c     ****     	SSD1331_drawPixel(x + yc, y + xc, color);
 797              		.loc 1 189 0
 798 007c 019A     		ldr	r2, [sp, #4]
 799 007e 0399     		ldr	r1, [sp, #12]
 800 0080 3846     		mov	r0, r7
 801 0082 FFF7FEFF 		bl	SSD1331_drawPixel
 802              	.LVL115:
 190:SSD1331.c     ****     	SSD1331_drawPixel(x + yc, y - xc, color);
 803              		.loc 1 190 0
 804 0086 0AEB0508 		add	r8, r10, r5
 805 008a 1FFA88F8 		uxth	r8, r8
 806 008e 0BEB0607 		add	r7, fp, r6
 807 0092 BFB2     		uxth	r7, r7
 808 0094 019A     		ldr	r2, [sp, #4]
 809 0096 3946     		mov	r1, r7
 810 0098 4046     		mov	r0, r8
 811 009a FFF7FEFF 		bl	SSD1331_drawPixel
 812              	.LVL116:
 191:SSD1331.c     ****     	SSD1331_drawPixel(x - yc, y + xc, color);
 813              		.loc 1 191 0
 814 009e ABEB0606 		sub	r6, fp, r6
 815 00a2 B6B2     		uxth	r6, r6
 816 00a4 019A     		ldr	r2, [sp, #4]
 817 00a6 3146     		mov	r1, r6
 818 00a8 4046     		mov	r0, r8
 819 00aa FFF7FEFF 		bl	SSD1331_drawPixel
 820              	.LVL117:
 192:SSD1331.c     ****     	SSD1331_drawPixel(x - yc, y - xc, color);
 821              		.loc 1 192 0
 822 00ae AAEB0505 		sub	r5, r10, r5
 823 00b2 ADB2     		uxth	r5, r5
 824 00b4 DDF80480 		ldr	r8, [sp, #4]
 825 00b8 4246     		mov	r2, r8
 826 00ba 3946     		mov	r1, r7
 827 00bc 2846     		mov	r0, r5
 828 00be FFF7FEFF 		bl	SSD1331_drawPixel
 829              	.LVL118:
ARM GAS  /tmp/ccbMwiuG.s 			page 19


 193:SSD1331.c     ****         if (p < 0) p += (xc++ << 2) + 6;
 830              		.loc 1 193 0
 831 00c2 4246     		mov	r2, r8
 832 00c4 3146     		mov	r1, r6
 833 00c6 2846     		mov	r0, r5
 834 00c8 FFF7FEFF 		bl	SSD1331_drawPixel
 835              	.LVL119:
 836              		.loc 1 194 0
 837 00cc 029B     		ldr	r3, [sp, #8]
 838 00ce 002B     		cmp	r3, #0
 839 00d0 AADB     		blt	.L54
 195:SSD1331.c     ****             else p += ((xc++ - yc--)<<2) + 10;
 840              		.loc 1 195 0
 841 00d2 631C     		adds	r3, r4, #1
 842              	.LVL120:
 843 00d4 09F1FF32 		add	r2, r9, #-1
 844              	.LVL121:
 845 00d8 A4EB0904 		sub	r4, r4, r9
 846 00dc A400     		lsls	r4, r4, #2
 847 00de 0A34     		adds	r4, r4, #10
 848 00e0 0299     		ldr	r1, [sp, #8]
 849 00e2 0C44     		add	r4, r4, r1
 850 00e4 61B2     		sxtb	r1, r4
 851 00e6 0291     		str	r1, [sp, #8]
 852              	.LVL122:
 853 00e8 4FFA82F9 		sxtb	r9, r2
 854 00ec 5CB2     		sxtb	r4, r3
 855 00ee A3E7     		b	.L45
 856              	.LVL123:
 857              	.L53:
 196:SSD1331.c     ****     }
 197:SSD1331.c     **** 
 198:SSD1331.c     **** }
 858              		.loc 1 198 0
 859 00f0 05B0     		add	sp, sp, #20
 860              	.LCFI10:
 861              		.cfi_def_cfa_offset 36
 862              		@ sp needed
 863 00f2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 864              	.LVL124:
 865              	.L50:
 866              	.LCFI11:
 867              		.cfi_def_cfa_offset 0
 868              		.cfi_restore 4
 869              		.cfi_restore 5
 870              		.cfi_restore 6
 871              		.cfi_restore 7
 872              		.cfi_restore 8
 873              		.cfi_restore 9
 874              		.cfi_restore 10
 875              		.cfi_restore 11
 876              		.cfi_restore 14
 877 00f6 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE65:
 881              		.section	.text.SSD1331_SetXY,"ax",%progbits
 882              		.align	1
ARM GAS  /tmp/ccbMwiuG.s 			page 20


 883              		.global	SSD1331_SetXY
 884              		.syntax unified
 885              		.thumb
 886              		.thumb_func
 887              		.fpu softvfp
 889              	SSD1331_SetXY:
 890              	.LFB66:
 199:SSD1331.c     **** 
 200:SSD1331.c     **** // Set current position in cache
 201:SSD1331.c     **** void SSD1331_SetXY(unsigned char x, unsigned char y) {
 891              		.loc 1 201 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              		@ link register save eliminated.
 896              	.LVL125:
 202:SSD1331.c     **** 	CHR_X = x;
 897              		.loc 1 202 0
 898 0000 024B     		ldr	r3, .L56
 899 0002 1870     		strb	r0, [r3]
 203:SSD1331.c     **** 	CHR_Y = y;
 900              		.loc 1 203 0
 901 0004 024B     		ldr	r3, .L56+4
 902 0006 1970     		strb	r1, [r3]
 903 0008 7047     		bx	lr
 904              	.L57:
 905 000a 00BF     		.align	2
 906              	.L56:
 907 000c 00000000 		.word	.LANCHOR0
 908 0010 00000000 		.word	.LANCHOR1
 909              		.cfi_endproc
 910              	.LFE66:
 912              		.section	.text.SSD1331_XY_INK,"ax",%progbits
 913              		.align	1
 914              		.global	SSD1331_XY_INK
 915              		.syntax unified
 916              		.thumb
 917              		.thumb_func
 918              		.fpu softvfp
 920              	SSD1331_XY_INK:
 921              	.LFB67:
 204:SSD1331.c     **** }
 205:SSD1331.c     **** 
 206:SSD1331.c     **** void SSD1331_XY_INK(LcdFontSize size) {
 922              		.loc 1 206 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              		@ link register save eliminated.
 927              	.LVL126:
 207:SSD1331.c     **** 	CHR_X += 6*size;
 928              		.loc 1 207 0
 929 0000 00EB4002 		add	r2, r0, r0, lsl #1
 930 0004 5300     		lsls	r3, r2, #1
 931 0006 DBB2     		uxtb	r3, r3
 932 0008 0E4A     		ldr	r2, .L60
 933 000a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccbMwiuG.s 			page 21


 934 000c 0B44     		add	r3, r3, r1
 935 000e DBB2     		uxtb	r3, r3
 936 0010 1370     		strb	r3, [r2]
 208:SSD1331.c     **** 	if (CHR_X + 6*size > RGB_OLED_WIDTH) {
 937              		.loc 1 208 0
 938 0012 00EB4001 		add	r1, r0, r0, lsl #1
 939 0016 4A00     		lsls	r2, r1, #1
 940 0018 1344     		add	r3, r3, r2
 941 001a 602B     		cmp	r3, #96
 942 001c 10DD     		ble	.L58
 209:SSD1331.c     **** 		CHR_X = 0;
 943              		.loc 1 209 0
 944 001e 0022     		movs	r2, #0
 945 0020 084B     		ldr	r3, .L60
 946 0022 1A70     		strb	r2, [r3]
 210:SSD1331.c     **** 		CHR_Y += 8*size;
 947              		.loc 1 210 0
 948 0024 C300     		lsls	r3, r0, #3
 949 0026 DBB2     		uxtb	r3, r3
 950 0028 074A     		ldr	r2, .L60+4
 951 002a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 952 002c 0B44     		add	r3, r3, r1
 953 002e DBB2     		uxtb	r3, r3
 954 0030 1370     		strb	r3, [r2]
 211:SSD1331.c     **** 		if (CHR_Y + 8*size > RGB_OLED_HEIGHT) {
 955              		.loc 1 211 0
 956 0032 03EBC003 		add	r3, r3, r0, lsl #3
 957 0036 402B     		cmp	r3, #64
 958 0038 02DD     		ble	.L58
 212:SSD1331.c     **** 			CHR_Y = 0;
 959              		.loc 1 212 0
 960 003a 0022     		movs	r2, #0
 961 003c 024B     		ldr	r3, .L60+4
 962 003e 1A70     		strb	r2, [r3]
 963              	.L58:
 964 0040 7047     		bx	lr
 965              	.L61:
 966 0042 00BF     		.align	2
 967              	.L60:
 968 0044 00000000 		.word	.LANCHOR0
 969 0048 00000000 		.word	.LANCHOR1
 970              		.cfi_endproc
 971              	.LFE67:
 973              		.section	.text.SSD1331_Chr,"ax",%progbits
 974              		.align	1
 975              		.global	SSD1331_Chr
 976              		.syntax unified
 977              		.thumb
 978              		.thumb_func
 979              		.fpu softvfp
 981              	SSD1331_Chr:
 982              	.LFB68:
 213:SSD1331.c     **** 		}
 214:SSD1331.c     **** 	}
 215:SSD1331.c     **** }
 216:SSD1331.c     **** 
 217:SSD1331.c     **** void SSD1331_Chr(LcdFontSize size, unsigned char ch, uint16_t chr_color, uint16_t bg_color) {
ARM GAS  /tmp/ccbMwiuG.s 			page 22


 983              		.loc 1 217 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 16
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              	.LVL127:
 988 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 989              	.LCFI12:
 990              		.cfi_def_cfa_offset 36
 991              		.cfi_offset 4, -36
 992              		.cfi_offset 5, -32
 993              		.cfi_offset 6, -28
 994              		.cfi_offset 7, -24
 995              		.cfi_offset 8, -20
 996              		.cfi_offset 9, -16
 997              		.cfi_offset 10, -12
 998              		.cfi_offset 11, -8
 999              		.cfi_offset 14, -4
 1000 0004 85B0     		sub	sp, sp, #20
 1001              	.LCFI13:
 1002              		.cfi_def_cfa_offset 56
 218:SSD1331.c     **** 	unsigned char y, x, sx, sy;
 219:SSD1331.c     **** 	uint16_t color;
 220:SSD1331.c     **** 	/////uint16_t cx=CHR_X*6*size;
 221:SSD1331.c     **** 	uint16_t cx=CHR_X;
 1003              		.loc 1 221 0
 1004 0006 834C     		ldr	r4, .L90
 1005 0008 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 1006 000a 2646     		mov	r6, r4
 1007 000c 0294     		str	r4, [sp, #8]
 1008              	.LVL128:
 222:SSD1331.c     **** 	/////uint16_t cy=CHR_Y*8*size;
 223:SSD1331.c     **** 	uint16_t cy=CHR_Y;
 1009              		.loc 1 223 0
 1010 000e 824C     		ldr	r4, .L90+4
 1011 0010 94F80080 		ldrb	r8, [r4]	@ zero_extendqisi2
 1012              	.LVL129:
 224:SSD1331.c     **** 
 225:SSD1331.c     **** 	if ( (cx + 6*size > RGB_OLED_WIDTH) || (cy + 8*size > RGB_OLED_HEIGHT) ) {
 1013              		.loc 1 225 0
 1014 0014 00EB4005 		add	r5, r0, r0, lsl #1
 1015 0018 6C00     		lsls	r4, r5, #1
 1016 001a 3444     		add	r4, r4, r6
 1017 001c 602C     		cmp	r4, #96
 1018 001e 00F3F680 		bgt	.L62
 1019 0022 8246     		mov	r10, r0
 1020              		.loc 1 225 0 is_stmt 0 discriminator 1
 1021 0024 08EBC004 		add	r4, r8, r0, lsl #3
 1022 0028 402C     		cmp	r4, #64
 1023 002a 00F3F080 		bgt	.L62
 226:SSD1331.c     **** 		return;
 227:SSD1331.c     **** 	}
 228:SSD1331.c     **** 
 229:SSD1331.c     **** 	// CHR
 230:SSD1331.c     ****     if ( (ch >= 0x20) && (ch <= 0x7F) )
 1024              		.loc 1 230 0 is_stmt 1
 1025 002e A1F12009 		sub	r9, r1, #32
 1026 0032 5FFA89F9 		uxtb	r9, r9
ARM GAS  /tmp/ccbMwiuG.s 			page 23


 1027 0036 B9F15F0F 		cmp	r9, #95
 1028 003a 04D9     		bls	.L64
 231:SSD1331.c     ****     {
 232:SSD1331.c     ****         // offset in symbols table ASCII[0x20-0x7F]
 233:SSD1331.c     ****         ch -= 32;
 234:SSD1331.c     ****     }
 235:SSD1331.c     ****     else if (ch >= 0xC0)
 1029              		.loc 1 235 0
 1030 003c BF29     		cmp	r1, #191
 1031 003e 18D9     		bls	.L79
 236:SSD1331.c     ****     {
 237:SSD1331.c     ****         // offset in symbols table CP1251[0xC0-0xFF] (Cyrillic)
 238:SSD1331.c     ****         ch -= 96;
 1032              		.loc 1 238 0
 1033 0040 6039     		subs	r1, r1, #96
 1034              	.LVL130:
 1035 0042 5FFA81F9 		uxtb	r9, r1
 1036              	.LVL131:
 1037              	.L64:
 1038 0046 0193     		str	r3, [sp, #4]
 1039 0048 0092     		str	r2, [sp]
 1040 004a 0646     		mov	r6, r0
 1041              	.LVL132:
 239:SSD1331.c     ****     }
 240:SSD1331.c     ****     else
 241:SSD1331.c     ****     {
 242:SSD1331.c     ****         // Ignore unknown symbols
 243:SSD1331.c     ****         ch = 95;
 244:SSD1331.c     ****     }
 245:SSD1331.c     **** 
 246:SSD1331.c     ****     if ((size > FONT_1X) & (ch > 15) & (ch < 26)) {
 1042              		.loc 1 246 0
 1043 004c B9F1190F 		cmp	r9, #25
 1044 0050 8CBF     		ite	hi
 1045 0052 0023     		movhi	r3, #0
 1046              	.LVL133:
 1047 0054 0123     		movls	r3, #1
 1048 0056 0128     		cmp	r0, #1
 1049 0058 88BF     		it	hi
 1050 005a B9F10F0F 		cmphi	r9, #15
 1051 005e 40F2CF80 		bls	.L80
 1052 0062 002B     		cmp	r3, #0
 1053 0064 00F0CC80 		beq	.L80
 247:SSD1331.c     ****         ch -= 16;
 1054              		.loc 1 247 0
 1055 0068 A9F11007 		sub	r7, r9, #16
 1056 006c FFB2     		uxtb	r7, r7
 1057              	.LVL134:
 248:SSD1331.c     ****     	for (sy = 0; sy<size; sy++) {
 1058              		.loc 1 248 0
 1059 006e 0025     		movs	r5, #0
 1060 0070 64E0     		b	.L66
 1061              	.LVL135:
 1062              	.L79:
 243:SSD1331.c     ****     }
 1063              		.loc 1 243 0
 1064 0072 4FF05F09 		mov	r9, #95
ARM GAS  /tmp/ccbMwiuG.s 			page 24


 1065 0076 E6E7     		b	.L64
 1066              	.LVL136:
 1067              	.L81:
 249:SSD1331.c     ****     	for (y = 0; y<8; y++ ) {
 250:SSD1331.c     ****     		//set column point
 251:SSD1331.c     ****     		_sendCmd(CMD_SET_COLUMN_ADDRESS);
 252:SSD1331.c     ****     		_sendCmd(cx);
 253:SSD1331.c     ****     		_sendCmd(RGB_OLED_WIDTH-1);
 254:SSD1331.c     ****     		//set row point
 255:SSD1331.c     ****     		_sendCmd(CMD_SET_ROW_ADDRESS);
 256:SSD1331.c     ****     		_sendCmd(y + cy + sy*8);
 257:SSD1331.c     ****     		_sendCmd(RGB_OLED_HEIGHT-1);
 258:SSD1331.c     ****     		GPIO_SetBits(GPIOB, GPIO_Pin_0); //dc
 259:SSD1331.c     ****     		GPIO_ResetBits(GPIOB, GPIO_Pin_1); //cs
 260:SSD1331.c     ****     		for (x = 0; x < 5*size; x++ ) {
 261:SSD1331.c     ****     			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 262:SSD1331.c     ****     				 (((LargeNumbers[ch][x+sy*20] >> y) & 0x01 ) & (size == FONT_4X))
 263:SSD1331.c     **** 
 264:SSD1331.c     ****     				) {
 265:SSD1331.c     ****     				color = chr_color;
 266:SSD1331.c     ****     			}
 267:SSD1331.c     ****     			else {
 268:SSD1331.c     ****     				color = bg_color;
 1068              		.loc 1 268 0
 1069 0078 DDF80490 		ldr	r9, [sp, #4]
 1070              	.L68:
 1071              	.LVL137:
 269:SSD1331.c     ****     			}
 270:SSD1331.c     **** 				_sendData(color >> 8);
 1072              		.loc 1 270 0 discriminator 2
 1073 007c 4FEA1920 		lsr	r0, r9, #8
 1074 0080 FFF7FEFF 		bl	_sendData
 1075              	.LVL138:
 271:SSD1331.c     **** 				_sendData(color);
 1076              		.loc 1 271 0 discriminator 2
 1077 0084 5FFA89F0 		uxtb	r0, r9
 1078 0088 FFF7FEFF 		bl	_sendData
 1079              	.LVL139:
 260:SSD1331.c     ****     			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 1080              		.loc 1 260 0 discriminator 2
 1081 008c 0134     		adds	r4, r4, #1
 1082              	.LVL140:
 1083 008e E4B2     		uxtb	r4, r4
 1084              	.LVL141:
 1085              	.L67:
 260:SSD1331.c     ****     			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 1086              		.loc 1 260 0 is_stmt 0 discriminator 1
 1087 0090 0AEB8A03 		add	r3, r10, r10, lsl #2
 1088 0094 9C42     		cmp	r4, r3
 1089 0096 25DA     		bge	.L86
 261:SSD1331.c     ****     				 (((LargeNumbers[ch][x+sy*20] >> y) & 0x01 ) & (size == FONT_4X))
 1090              		.loc 1 261 0 is_stmt 1
 1091 0098 A900     		lsls	r1, r5, #2
 1092 009a 4A19     		adds	r2, r1, r5
 1093 009c 5300     		lsls	r3, r2, #1
 1094 009e E218     		adds	r2, r4, r3
 1095 00a0 BB00     		lsls	r3, r7, #2
ARM GAS  /tmp/ccbMwiuG.s 			page 25


 1096 00a2 D819     		adds	r0, r3, r7
 1097 00a4 4FEA800E 		lsl	lr, r0, #2
 1098 00a8 5C48     		ldr	r0, .L90+8
 1099 00aa 7044     		add	r0, r0, lr
 1100 00ac 825C     		ldrb	r2, [r0, r2]	@ zero_extendqisi2
 1101 00ae 42FA0BF2 		asr	r2, r2, fp
 1102 00b2 022E     		cmp	r6, #2
 1103 00b4 14BF     		ite	ne
 1104 00b6 0022     		movne	r2, #0
 1105 00b8 02F00102 		andeq	r2, r2, #1
 262:SSD1331.c     **** 
 1106              		.loc 1 262 0
 1107 00bc 2944     		add	r1, r1, r5
 1108 00be 8800     		lsls	r0, r1, #2
 1109 00c0 2044     		add	r0, r0, r4
 1110 00c2 3B44     		add	r3, r3, r7
 1111 00c4 1901     		lsls	r1, r3, #4
 1112 00c6 564B     		ldr	r3, .L90+12
 1113 00c8 0B44     		add	r3, r3, r1
 1114 00ca 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 1115 00cc 43FA0BF3 		asr	r3, r3, fp
 1116 00d0 042E     		cmp	r6, #4
 1117 00d2 14BF     		ite	ne
 1118 00d4 0023     		movne	r3, #0
 1119 00d6 03F00103 		andeq	r3, r3, #1
 261:SSD1331.c     ****     				 (((LargeNumbers[ch][x+sy*20] >> y) & 0x01 ) & (size == FONT_4X))
 1120              		.loc 1 261 0
 1121 00da 1343     		orrs	r3, r2, r3
 1122 00dc CCD0     		beq	.L81
 265:SSD1331.c     ****     			}
 1123              		.loc 1 265 0
 1124 00de DDF80090 		ldr	r9, [sp]
 1125 00e2 CBE7     		b	.L68
 1126              	.L86:
 249:SSD1331.c     ****     		//set column point
 1127              		.loc 1 249 0 discriminator 2
 1128 00e4 0BF1010B 		add	fp, fp, #1
 1129              	.LVL142:
 1130 00e8 5FFA8BFB 		uxtb	fp, fp
 1131              	.LVL143:
 1132              	.L71:
 249:SSD1331.c     ****     		//set column point
 1133              		.loc 1 249 0 is_stmt 0 discriminator 1
 1134 00ec BBF1070F 		cmp	fp, #7
 1135 00f0 22D8     		bhi	.L87
 251:SSD1331.c     ****     		_sendCmd(cx);
 1136              		.loc 1 251 0 is_stmt 1
 1137 00f2 1520     		movs	r0, #21
 1138 00f4 FFF7FEFF 		bl	_sendCmd
 1139              	.LVL144:
 252:SSD1331.c     ****     		_sendCmd(RGB_OLED_WIDTH-1);
 1140              		.loc 1 252 0
 1141 00f8 0298     		ldr	r0, [sp, #8]
 1142 00fa FFF7FEFF 		bl	_sendCmd
 1143              	.LVL145:
 253:SSD1331.c     ****     		//set row point
 1144              		.loc 1 253 0
ARM GAS  /tmp/ccbMwiuG.s 			page 26


 1145 00fe 5F20     		movs	r0, #95
 1146 0100 FFF7FEFF 		bl	_sendCmd
 1147              	.LVL146:
 255:SSD1331.c     ****     		_sendCmd(y + cy + sy*8);
 1148              		.loc 1 255 0
 1149 0104 7520     		movs	r0, #117
 1150 0106 FFF7FEFF 		bl	_sendCmd
 1151              	.LVL147:
 256:SSD1331.c     ****     		_sendCmd(RGB_OLED_HEIGHT-1);
 1152              		.loc 1 256 0
 1153 010a 0BEB0800 		add	r0, fp, r8
 1154 010e C0B2     		uxtb	r0, r0
 1155 0110 EB00     		lsls	r3, r5, #3
 1156 0112 DBB2     		uxtb	r3, r3
 1157 0114 1844     		add	r0, r0, r3
 1158 0116 C0B2     		uxtb	r0, r0
 1159 0118 FFF7FEFF 		bl	_sendCmd
 1160              	.LVL148:
 257:SSD1331.c     ****     		GPIO_SetBits(GPIOB, GPIO_Pin_0); //dc
 1161              		.loc 1 257 0
 1162 011c 3F20     		movs	r0, #63
 1163 011e FFF7FEFF 		bl	_sendCmd
 1164              	.LVL149:
 258:SSD1331.c     ****     		GPIO_ResetBits(GPIOB, GPIO_Pin_1); //cs
 1165              		.loc 1 258 0
 1166 0122 404C     		ldr	r4, .L90+16
 1167 0124 0121     		movs	r1, #1
 1168 0126 2046     		mov	r0, r4
 1169 0128 FFF7FEFF 		bl	GPIO_SetBits
 1170              	.LVL150:
 259:SSD1331.c     ****     		for (x = 0; x < 5*size; x++ ) {
 1171              		.loc 1 259 0
 1172 012c 0221     		movs	r1, #2
 1173 012e 2046     		mov	r0, r4
 1174 0130 FFF7FEFF 		bl	GPIO_ResetBits
 1175              	.LVL151:
 260:SSD1331.c     ****     			if ( (((BigNumbers[ch][x+sy*10] >> y) & 0x01 ) & (size == FONT_2X)) |
 1176              		.loc 1 260 0
 1177 0134 0024     		movs	r4, #0
 1178 0136 ABE7     		b	.L67
 1179              	.LVL152:
 1180              	.L87:
 248:SSD1331.c     ****     	for (y = 0; y<8; y++ ) {
 1181              		.loc 1 248 0 discriminator 2
 1182 0138 0135     		adds	r5, r5, #1
 1183              	.LVL153:
 1184 013a EDB2     		uxtb	r5, r5
 1185              	.LVL154:
 1186              	.L66:
 248:SSD1331.c     ****     	for (y = 0; y<8; y++ ) {
 1187              		.loc 1 248 0 is_stmt 0 discriminator 1
 1188 013c B542     		cmp	r5, r6
 1189 013e 66D2     		bcs	.L62
 1190 0140 4FF0000B 		mov	fp, #0
 1191 0144 D2E7     		b	.L71
 1192              	.LVL155:
 1193              	.L83:
ARM GAS  /tmp/ccbMwiuG.s 			page 27


 272:SSD1331.c     ****     		}
 273:SSD1331.c     ****     	}
 274:SSD1331.c     ****     	}
 275:SSD1331.c     ****     }
 276:SSD1331.c     ****     else {
 277:SSD1331.c     ****     	for (y = 0; y<8; y++ ) {
 278:SSD1331.c     ****     		for (sy = 0; sy<size; sy++ ) {
 279:SSD1331.c     ****     			//set column point
 280:SSD1331.c     ****     			_sendCmd(CMD_SET_COLUMN_ADDRESS);
 281:SSD1331.c     ****     			_sendCmd(cx);
 282:SSD1331.c     ****     			_sendCmd(RGB_OLED_WIDTH-1);
 283:SSD1331.c     ****     			//set row point
 284:SSD1331.c     ****     			_sendCmd(CMD_SET_ROW_ADDRESS);
 285:SSD1331.c     ****     			_sendCmd(y*size + sy + cy);
 286:SSD1331.c     ****     			_sendCmd(RGB_OLED_HEIGHT-1);
 287:SSD1331.c     ****     			GPIO_SetBits(GPIOB, GPIO_Pin_0); //dc
 288:SSD1331.c     ****     			GPIO_ResetBits(GPIOB, GPIO_Pin_1); //cs
 289:SSD1331.c     ****     			for (x = 0; x<5; x++ ) {
 290:SSD1331.c     ****     				if ((FontLookup[ch][x] >> y) & 0x01) {
 291:SSD1331.c     ****     					color = chr_color;
 292:SSD1331.c     ****     				}
 293:SSD1331.c     ****     				else {
 294:SSD1331.c     ****     					color = bg_color;
 1194              		.loc 1 294 0 is_stmt 1
 1195 0146 4546     		mov	r5, r8
 1196 0148 18E0     		b	.L73
 1197              	.LVL156:
 1198              	.L75:
 295:SSD1331.c     ****     				}
 296:SSD1331.c     ****     				//SSD1331_drawPixel(x+cx, y+cy, color);
 297:SSD1331.c     ****     				for (sx = 0; sx<size; sx++ ) {
 298:SSD1331.c     ****     					_sendData(color >> 8);
 1199              		.loc 1 298 0 discriminator 3
 1200 014a 280A     		lsrs	r0, r5, #8
 1201 014c FFF7FEFF 		bl	_sendData
 1202              	.LVL157:
 299:SSD1331.c     ****     					_sendData(color);
 1203              		.loc 1 299 0 discriminator 3
 1204 0150 E8B2     		uxtb	r0, r5
 1205 0152 FFF7FEFF 		bl	_sendData
 1206              	.LVL158:
 297:SSD1331.c     ****     					_sendData(color >> 8);
 1207              		.loc 1 297 0 discriminator 3
 1208 0156 0134     		adds	r4, r4, #1
 1209              	.LVL159:
 1210 0158 E4B2     		uxtb	r4, r4
 1211              	.LVL160:
 1212              	.L74:
 297:SSD1331.c     ****     					_sendData(color >> 8);
 1213              		.loc 1 297 0 is_stmt 0 discriminator 1
 1214 015a B442     		cmp	r4, r6
 1215 015c F5D3     		bcc	.L75
 289:SSD1331.c     ****     				if ((FontLookup[ch][x] >> y) & 0x01) {
 1216              		.loc 1 289 0 is_stmt 1 discriminator 2
 1217 015e 0137     		adds	r7, r7, #1
 1218              	.LVL161:
 1219 0160 FFB2     		uxtb	r7, r7
ARM GAS  /tmp/ccbMwiuG.s 			page 28


 1220              	.LVL162:
 1221              	.L72:
 289:SSD1331.c     ****     				if ((FontLookup[ch][x] >> y) & 0x01) {
 1222              		.loc 1 289 0 is_stmt 0 discriminator 1
 1223 0162 042F     		cmp	r7, #4
 1224 0164 0CD8     		bhi	.L88
 290:SSD1331.c     ****     					color = chr_color;
 1225              		.loc 1 290 0 is_stmt 1
 1226 0166 09EB8902 		add	r2, r9, r9, lsl #2
 1227 016a 2F4B     		ldr	r3, .L90+20
 1228 016c 1344     		add	r3, r3, r2
 1229 016e DB5D     		ldrb	r3, [r3, r7]	@ zero_extendqisi2
 1230 0170 43FA0AF3 		asr	r3, r3, r10
 1231 0174 13F0010F 		tst	r3, #1
 1232 0178 E5D0     		beq	.L83
 291:SSD1331.c     ****     				}
 1233              		.loc 1 291 0
 1234 017a 009D     		ldr	r5, [sp]
 1235              	.L73:
 1236              	.LVL163:
 297:SSD1331.c     ****     					_sendData(color >> 8);
 1237              		.loc 1 297 0
 1238 017c 0024     		movs	r4, #0
 1239 017e ECE7     		b	.L74
 1240              	.LVL164:
 1241              	.L88:
 300:SSD1331.c     ****     				}
 301:SSD1331.c     ****     			}
 302:SSD1331.c     ****     			_sendData(bg_color >> 8);
 1242              		.loc 1 302 0 discriminator 2
 1243 0180 4FEA1820 		lsr	r0, r8, #8
 1244 0184 FFF7FEFF 		bl	_sendData
 1245              	.LVL165:
 303:SSD1331.c     ****     			_sendData(bg_color);
 1246              		.loc 1 303 0 discriminator 2
 1247 0188 5FFA88F0 		uxtb	r0, r8
 1248 018c FFF7FEFF 		bl	_sendData
 1249              	.LVL166:
 304:SSD1331.c     ****     			GPIO_SetBits(GPIOB, GPIO_Pin_1); //cs
 1250              		.loc 1 304 0 discriminator 2
 1251 0190 0221     		movs	r1, #2
 1252 0192 2448     		ldr	r0, .L90+16
 1253 0194 FFF7FEFF 		bl	GPIO_SetBits
 1254              	.LVL167:
 278:SSD1331.c     ****     			//set column point
 1255              		.loc 1 278 0 discriminator 2
 1256 0198 0BF1010B 		add	fp, fp, #1
 1257              	.LVL168:
 1258 019c 5FFA8BFB 		uxtb	fp, fp
 1259              	.LVL169:
 1260              	.L78:
 278:SSD1331.c     ****     			//set column point
 1261              		.loc 1 278 0 is_stmt 0 discriminator 1
 1262 01a0 B345     		cmp	fp, r6
 1263 01a2 23D2     		bcs	.L89
 280:SSD1331.c     ****     			_sendCmd(cx);
 1264              		.loc 1 280 0 is_stmt 1
ARM GAS  /tmp/ccbMwiuG.s 			page 29


 1265 01a4 1520     		movs	r0, #21
 1266 01a6 FFF7FEFF 		bl	_sendCmd
 1267              	.LVL170:
 281:SSD1331.c     ****     			_sendCmd(RGB_OLED_WIDTH-1);
 1268              		.loc 1 281 0
 1269 01aa 0298     		ldr	r0, [sp, #8]
 1270 01ac FFF7FEFF 		bl	_sendCmd
 1271              	.LVL171:
 282:SSD1331.c     ****     			//set row point
 1272              		.loc 1 282 0
 1273 01b0 5F20     		movs	r0, #95
 1274 01b2 FFF7FEFF 		bl	_sendCmd
 1275              	.LVL172:
 284:SSD1331.c     ****     			_sendCmd(y*size + sy + cy);
 1276              		.loc 1 284 0
 1277 01b6 7520     		movs	r0, #117
 1278 01b8 FFF7FEFF 		bl	_sendCmd
 1279              	.LVL173:
 285:SSD1331.c     ****     			_sendCmd(RGB_OLED_HEIGHT-1);
 1280              		.loc 1 285 0
 1281 01bc 06FB0AF0 		mul	r0, r6, r10
 1282 01c0 C0B2     		uxtb	r0, r0
 1283 01c2 5844     		add	r0, r0, fp
 1284 01c4 C0B2     		uxtb	r0, r0
 1285 01c6 039B     		ldr	r3, [sp, #12]
 1286 01c8 1844     		add	r0, r0, r3
 1287 01ca C0B2     		uxtb	r0, r0
 1288 01cc FFF7FEFF 		bl	_sendCmd
 1289              	.LVL174:
 286:SSD1331.c     ****     			GPIO_SetBits(GPIOB, GPIO_Pin_0); //dc
 1290              		.loc 1 286 0
 1291 01d0 3F20     		movs	r0, #63
 1292 01d2 FFF7FEFF 		bl	_sendCmd
 1293              	.LVL175:
 287:SSD1331.c     ****     			GPIO_ResetBits(GPIOB, GPIO_Pin_1); //cs
 1294              		.loc 1 287 0
 1295 01d6 134C     		ldr	r4, .L90+16
 1296 01d8 0121     		movs	r1, #1
 1297 01da 2046     		mov	r0, r4
 1298 01dc FFF7FEFF 		bl	GPIO_SetBits
 1299              	.LVL176:
 288:SSD1331.c     ****     			for (x = 0; x<5; x++ ) {
 1300              		.loc 1 288 0
 1301 01e0 0221     		movs	r1, #2
 1302 01e2 2046     		mov	r0, r4
 1303 01e4 FFF7FEFF 		bl	GPIO_ResetBits
 1304              	.LVL177:
 289:SSD1331.c     ****     				if ((FontLookup[ch][x] >> y) & 0x01) {
 1305              		.loc 1 289 0
 1306 01e8 0027     		movs	r7, #0
 1307 01ea BAE7     		b	.L72
 1308              	.LVL178:
 1309              	.L89:
 277:SSD1331.c     ****     		for (sy = 0; sy<size; sy++ ) {
 1310              		.loc 1 277 0 discriminator 2
 1311 01ec 0AF1010A 		add	r10, r10, #1
 1312              	.LVL179:
ARM GAS  /tmp/ccbMwiuG.s 			page 30


 1313 01f0 5FFA8AFA 		uxtb	r10, r10
 1314              	.LVL180:
 1315              	.L65:
 277:SSD1331.c     ****     		for (sy = 0; sy<size; sy++ ) {
 1316              		.loc 1 277 0 is_stmt 0 discriminator 1
 1317 01f4 BAF1070F 		cmp	r10, #7
 1318 01f8 09D8     		bhi	.L62
 1319 01fa 4FF0000B 		mov	fp, #0
 1320 01fe CFE7     		b	.L78
 1321              	.LVL181:
 1322              	.L80:
 1323 0200 4FF0000A 		mov	r10, #0
 1324 0204 CDF80C80 		str	r8, [sp, #12]
 1325 0208 DDF80480 		ldr	r8, [sp, #4]
 1326              	.LVL182:
 1327 020c F2E7     		b	.L65
 1328              	.LVL183:
 1329              	.L62:
 305:SSD1331.c     ****     		}
 306:SSD1331.c     ****     	}
 307:SSD1331.c     ****     }
 308:SSD1331.c     **** 
 309:SSD1331.c     ****     /////CHR_X++;
 310:SSD1331.c     ****     //CHR_X += 6*size;
 311:SSD1331.c     **** }
 1330              		.loc 1 311 0 is_stmt 1
 1331 020e 05B0     		add	sp, sp, #20
 1332              	.LCFI14:
 1333              		.cfi_def_cfa_offset 36
 1334              		@ sp needed
 1335 0210 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1336              	.LVL184:
 1337              	.L91:
 1338              		.align	2
 1339              	.L90:
 1340 0214 00000000 		.word	.LANCHOR0
 1341 0218 00000000 		.word	.LANCHOR1
 1342 021c 00000000 		.word	.LANCHOR2
 1343 0220 00000000 		.word	.LANCHOR3
 1344 0224 000C0140 		.word	1073810432
 1345 0228 00000000 		.word	.LANCHOR4
 1346              		.cfi_endproc
 1347              	.LFE68:
 1349              		.section	.text.SSD1331_Str,"ax",%progbits
 1350              		.align	1
 1351              		.global	SSD1331_Str
 1352              		.syntax unified
 1353              		.thumb
 1354              		.thumb_func
 1355              		.fpu softvfp
 1357              	SSD1331_Str:
 1358              	.LFB69:
 312:SSD1331.c     **** 
 313:SSD1331.c     **** // Print a string to display
 314:SSD1331.c     **** void SSD1331_Str(LcdFontSize size, unsigned char dataArray[], uint16_t chr_color, uint16_t bg_color
 1359              		.loc 1 314 0
 1360              		.cfi_startproc
ARM GAS  /tmp/ccbMwiuG.s 			page 31


 1361              		@ args = 0, pretend = 0, frame = 0
 1362              		@ frame_needed = 0, uses_anonymous_args = 0
 1363              	.LVL185:
 1364 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1365              	.LCFI15:
 1366              		.cfi_def_cfa_offset 24
 1367              		.cfi_offset 4, -24
 1368              		.cfi_offset 5, -20
 1369              		.cfi_offset 6, -16
 1370              		.cfi_offset 7, -12
 1371              		.cfi_offset 8, -8
 1372              		.cfi_offset 14, -4
 1373 0004 0546     		mov	r5, r0
 1374 0006 0E46     		mov	r6, r1
 1375 0008 9046     		mov	r8, r2
 1376 000a 1F46     		mov	r7, r3
 1377              	.LVL186:
 315:SSD1331.c     ****     unsigned char tmpIdx=0;
 1378              		.loc 1 315 0
 1379 000c 0024     		movs	r4, #0
 316:SSD1331.c     **** 
 317:SSD1331.c     ****     while( dataArray[ tmpIdx ] != '\0' )
 1380              		.loc 1 317 0
 1381 000e 09E0     		b	.L93
 1382              	.LVL187:
 1383              	.L94:
 318:SSD1331.c     ****     {
 319:SSD1331.c     ****         /*/////
 320:SSD1331.c     ****     	if (CHR_X > 15) {
 321:SSD1331.c     ****         	CHR_X = 0;
 322:SSD1331.c     ****         	CHR_Y++;
 323:SSD1331.c     ****         	if (CHR_Y > 7) {
 324:SSD1331.c     ****         		CHR_Y = 0;
 325:SSD1331.c     ****         	}
 326:SSD1331.c     ****         }
 327:SSD1331.c     ****         */
 328:SSD1331.c     ****     	/*
 329:SSD1331.c     ****     	if (CHR_X + 6*size > RGB_OLED_WIDTH) {
 330:SSD1331.c     ****         	CHR_X = 0;
 331:SSD1331.c     ****         	CHR_Y += 8*size;
 332:SSD1331.c     ****         	if (CHR_Y + 8*size > RGB_OLED_HEIGHT) {
 333:SSD1331.c     ****         		CHR_Y = 0;
 334:SSD1331.c     ****         	}
 335:SSD1331.c     ****         }*/
 336:SSD1331.c     **** 
 337:SSD1331.c     ****         SSD1331_Chr(size, dataArray[ tmpIdx ], chr_color, bg_color);
 1384              		.loc 1 337 0
 1385 0010 3B46     		mov	r3, r7
 1386 0012 4246     		mov	r2, r8
 1387 0014 2846     		mov	r0, r5
 1388 0016 FFF7FEFF 		bl	SSD1331_Chr
 1389              	.LVL188:
 338:SSD1331.c     ****         SSD1331_XY_INK(size);
 1390              		.loc 1 338 0
 1391 001a 2846     		mov	r0, r5
 1392 001c FFF7FEFF 		bl	SSD1331_XY_INK
 1393              	.LVL189:
ARM GAS  /tmp/ccbMwiuG.s 			page 32


 339:SSD1331.c     ****         tmpIdx++;
 1394              		.loc 1 339 0
 1395 0020 0134     		adds	r4, r4, #1
 1396              	.LVL190:
 1397 0022 E4B2     		uxtb	r4, r4
 1398              	.LVL191:
 1399              	.L93:
 317:SSD1331.c     ****     {
 1400              		.loc 1 317 0
 1401 0024 315D     		ldrb	r1, [r6, r4]	@ zero_extendqisi2
 1402 0026 0029     		cmp	r1, #0
 1403 0028 F2D1     		bne	.L94
 340:SSD1331.c     ****     }
 341:SSD1331.c     **** }
 1404              		.loc 1 341 0
 1405 002a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1406              		.cfi_endproc
 1407              	.LFE69:
 1409              		.section	.text.SSD1331_FStr,"ax",%progbits
 1410              		.align	1
 1411              		.global	SSD1331_FStr
 1412              		.syntax unified
 1413              		.thumb
 1414              		.thumb_func
 1415              		.fpu softvfp
 1417              	SSD1331_FStr:
 1418              	.LFB70:
 342:SSD1331.c     **** 
 343:SSD1331.c     **** // Print a string from the Flash to display
 344:SSD1331.c     **** void SSD1331_FStr(LcdFontSize size, const unsigned char *dataPtr, uint16_t chr_color, uint16_t bg_c
 1419              		.loc 1 344 0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 0
 1422              		@ frame_needed = 0, uses_anonymous_args = 0
 1423              	.LVL192:
 1424 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1425              	.LCFI16:
 1426              		.cfi_def_cfa_offset 24
 1427              		.cfi_offset 3, -24
 1428              		.cfi_offset 4, -20
 1429              		.cfi_offset 5, -16
 1430              		.cfi_offset 6, -12
 1431              		.cfi_offset 7, -8
 1432              		.cfi_offset 14, -4
 1433 0002 0546     		mov	r5, r0
 1434 0004 0C46     		mov	r4, r1
 1435 0006 1746     		mov	r7, r2
 1436 0008 1E46     		mov	r6, r3
 345:SSD1331.c     ****     unsigned char c;
 346:SSD1331.c     ****     for (c = *( dataPtr ); c; ++dataPtr, c = *( dataPtr ))
 1437              		.loc 1 346 0
 1438 000a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 1439              	.LVL193:
 1440 000c 09E0     		b	.L97
 1441              	.LVL194:
 1442              	.L98:
 347:SSD1331.c     ****     {
ARM GAS  /tmp/ccbMwiuG.s 			page 33


 348:SSD1331.c     ****         /*
 349:SSD1331.c     ****     	if (CHR_X > 15) {
 350:SSD1331.c     ****         	CHR_X = 0;
 351:SSD1331.c     ****         	CHR_Y++;
 352:SSD1331.c     ****         	if (CHR_Y > 7) {
 353:SSD1331.c     ****         		CHR_Y = 0;
 354:SSD1331.c     ****         	}
 355:SSD1331.c     ****         }
 356:SSD1331.c     ****         */
 357:SSD1331.c     **** 
 358:SSD1331.c     ****         SSD1331_Chr(size, c, chr_color, bg_color);
 1443              		.loc 1 358 0 discriminator 3
 1444 000e 3346     		mov	r3, r6
 1445 0010 3A46     		mov	r2, r7
 1446 0012 2846     		mov	r0, r5
 1447 0014 FFF7FEFF 		bl	SSD1331_Chr
 1448              	.LVL195:
 359:SSD1331.c     ****         SSD1331_XY_INK(size);
 1449              		.loc 1 359 0 discriminator 3
 1450 0018 2846     		mov	r0, r5
 1451 001a FFF7FEFF 		bl	SSD1331_XY_INK
 1452              	.LVL196:
 346:SSD1331.c     ****     {
 1453              		.loc 1 346 0 discriminator 3
 1454 001e 14F8011F 		ldrb	r1, [r4, #1]!	@ zero_extendqisi2
 1455              	.LVL197:
 1456              	.L97:
 346:SSD1331.c     ****     {
 1457              		.loc 1 346 0 is_stmt 0 discriminator 1
 1458 0022 0029     		cmp	r1, #0
 1459 0024 F3D1     		bne	.L98
 360:SSD1331.c     ****     }
 361:SSD1331.c     **** }
 1460              		.loc 1 361 0 is_stmt 1
 1461 0026 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1462              		.cfi_endproc
 1463              	.LFE70:
 1465              		.section	.text.SSD1331_IMG,"ax",%progbits
 1466              		.align	1
 1467              		.global	SSD1331_IMG
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu softvfp
 1473              	SSD1331_IMG:
 1474              	.LFB71:
 362:SSD1331.c     **** 
 363:SSD1331.c     **** void SSD1331_IMG(const unsigned char *img, uint16_t x, uint16_t y, uint16_t width, uint16_t height)
 1475              		.loc 1 363 0
 1476              		.cfi_startproc
 1477              		@ args = 4, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479              	.LVL198:
 1480 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1481              	.LCFI17:
 1482              		.cfi_def_cfa_offset 32
 1483              		.cfi_offset 4, -32
ARM GAS  /tmp/ccbMwiuG.s 			page 34


 1484              		.cfi_offset 5, -28
 1485              		.cfi_offset 6, -24
 1486              		.cfi_offset 7, -20
 1487              		.cfi_offset 8, -16
 1488              		.cfi_offset 9, -12
 1489              		.cfi_offset 10, -8
 1490              		.cfi_offset 14, -4
 1491 0004 BDF820A0 		ldrh	r10, [sp, #32]
 364:SSD1331.c     **** 	uint16_t xx, yy;
 365:SSD1331.c     **** 
 366:SSD1331.c     **** 	if ( (x + width > RGB_OLED_WIDTH) | (y+height > RGB_OLED_HEIGHT) ){
 1492              		.loc 1 366 0
 1493 0008 1D46     		mov	r5, r3
 1494 000a 0B44     		add	r3, r3, r1
 1495              	.LVL199:
 1496 000c 02EB0A04 		add	r4, r2, r10
 1497 0010 402C     		cmp	r4, #64
 1498 0012 D8BF     		it	le
 1499 0014 602B     		cmple	r3, #96
 1500 0016 34DC     		bgt	.L100
 1501 0018 9146     		mov	r9, r2
 1502 001a 8846     		mov	r8, r1
 1503 001c 0746     		mov	r7, r0
 1504 001e 0026     		movs	r6, #0
 1505 0020 0DE0     		b	.L102
 1506              	.LVL200:
 1507              	.L104:
 367:SSD1331.c     **** 		return;
 368:SSD1331.c     **** 	}
 369:SSD1331.c     **** 
 370:SSD1331.c     **** 	for (yy=0; yy<height; yy++) {
 371:SSD1331.c     **** 		//set column point
 372:SSD1331.c     **** 		_sendCmd(CMD_SET_COLUMN_ADDRESS);
 373:SSD1331.c     **** 		_sendCmd(x);
 374:SSD1331.c     **** 		_sendCmd(RGB_OLED_WIDTH-1);
 375:SSD1331.c     **** 		//set row point
 376:SSD1331.c     **** 		_sendCmd(CMD_SET_ROW_ADDRESS);
 377:SSD1331.c     **** 		_sendCmd(y + yy);
 378:SSD1331.c     **** 		_sendCmd(RGB_OLED_HEIGHT-1);
 379:SSD1331.c     **** 		GPIO_SetBits(GPIOB, GPIO_Pin_0); //dc
 380:SSD1331.c     **** 		GPIO_ResetBits(GPIOB, GPIO_Pin_1); //cs
 381:SSD1331.c     **** 
 382:SSD1331.c     **** 		for (xx=0; xx<width*2; xx++) {
 383:SSD1331.c     **** 			_sendData(img[yy*width*2 + xx]);
 1508              		.loc 1 383 0 discriminator 3
 1509 0022 05FB06F3 		mul	r3, r5, r6
 1510 0026 04EB4303 		add	r3, r4, r3, lsl #1
 1511 002a F85C     		ldrb	r0, [r7, r3]	@ zero_extendqisi2
 1512 002c FFF7FEFF 		bl	_sendData
 1513              	.LVL201:
 382:SSD1331.c     **** 			_sendData(img[yy*width*2 + xx]);
 1514              		.loc 1 382 0 discriminator 3
 1515 0030 0134     		adds	r4, r4, #1
 1516              	.LVL202:
 1517 0032 A4B2     		uxth	r4, r4
 1518              	.LVL203:
 1519              	.L103:
ARM GAS  /tmp/ccbMwiuG.s 			page 35


 382:SSD1331.c     **** 			_sendData(img[yy*width*2 + xx]);
 1520              		.loc 1 382 0 is_stmt 0 discriminator 1
 1521 0034 B4EB450F 		cmp	r4, r5, lsl #1
 1522 0038 F3DB     		blt	.L104
 370:SSD1331.c     **** 		//set column point
 1523              		.loc 1 370 0 is_stmt 1 discriminator 2
 1524 003a 0136     		adds	r6, r6, #1
 1525              	.LVL204:
 1526 003c B6B2     		uxth	r6, r6
 1527              	.LVL205:
 1528              	.L102:
 370:SSD1331.c     **** 		//set column point
 1529              		.loc 1 370 0 is_stmt 0 discriminator 1
 1530 003e 5645     		cmp	r6, r10
 1531 0040 1FD2     		bcs	.L100
 372:SSD1331.c     **** 		_sendCmd(x);
 1532              		.loc 1 372 0 is_stmt 1
 1533 0042 1520     		movs	r0, #21
 1534 0044 FFF7FEFF 		bl	_sendCmd
 1535              	.LVL206:
 373:SSD1331.c     **** 		_sendCmd(RGB_OLED_WIDTH-1);
 1536              		.loc 1 373 0
 1537 0048 5FFA88F0 		uxtb	r0, r8
 1538 004c FFF7FEFF 		bl	_sendCmd
 1539              	.LVL207:
 374:SSD1331.c     **** 		//set row point
 1540              		.loc 1 374 0
 1541 0050 5F20     		movs	r0, #95
 1542 0052 FFF7FEFF 		bl	_sendCmd
 1543              	.LVL208:
 376:SSD1331.c     **** 		_sendCmd(y + yy);
 1544              		.loc 1 376 0
 1545 0056 7520     		movs	r0, #117
 1546 0058 FFF7FEFF 		bl	_sendCmd
 1547              	.LVL209:
 377:SSD1331.c     **** 		_sendCmd(RGB_OLED_HEIGHT-1);
 1548              		.loc 1 377 0
 1549 005c 09EB0600 		add	r0, r9, r6
 1550 0060 C0B2     		uxtb	r0, r0
 1551 0062 FFF7FEFF 		bl	_sendCmd
 1552              	.LVL210:
 378:SSD1331.c     **** 		GPIO_SetBits(GPIOB, GPIO_Pin_0); //dc
 1553              		.loc 1 378 0
 1554 0066 3F20     		movs	r0, #63
 1555 0068 FFF7FEFF 		bl	_sendCmd
 1556              	.LVL211:
 379:SSD1331.c     **** 		GPIO_ResetBits(GPIOB, GPIO_Pin_1); //cs
 1557              		.loc 1 379 0
 1558 006c 064C     		ldr	r4, .L107
 1559 006e 0121     		movs	r1, #1
 1560 0070 2046     		mov	r0, r4
 1561 0072 FFF7FEFF 		bl	GPIO_SetBits
 1562              	.LVL212:
 380:SSD1331.c     **** 
 1563              		.loc 1 380 0
 1564 0076 0221     		movs	r1, #2
 1565 0078 2046     		mov	r0, r4
ARM GAS  /tmp/ccbMwiuG.s 			page 36


 1566 007a FFF7FEFF 		bl	GPIO_ResetBits
 1567              	.LVL213:
 382:SSD1331.c     **** 			_sendData(img[yy*width*2 + xx]);
 1568              		.loc 1 382 0
 1569 007e 0024     		movs	r4, #0
 1570 0080 D8E7     		b	.L103
 1571              	.LVL214:
 1572              	.L100:
 1573 0082 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1574              	.LVL215:
 1575              	.L108:
 1576 0086 00BF     		.align	2
 1577              	.L107:
 1578 0088 000C0140 		.word	1073810432
 1579              		.cfi_endproc
 1580              	.LFE71:
 1582              		.section	.text.SSD1331_copyWindow,"ax",%progbits
 1583              		.align	1
 1584              		.global	SSD1331_copyWindow
 1585              		.syntax unified
 1586              		.thumb
 1587              		.thumb_func
 1588              		.fpu softvfp
 1590              	SSD1331_copyWindow:
 1591              	.LFB72:
 384:SSD1331.c     **** 		}
 385:SSD1331.c     **** 	}
 386:SSD1331.c     **** }
 387:SSD1331.c     **** 
 388:SSD1331.c     **** void SSD1331_copyWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint16_t x2, uint16_t y2
 389:SSD1331.c     **** {
 1592              		.loc 1 389 0
 1593              		.cfi_startproc
 1594              		@ args = 8, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596              	.LVL216:
 1597 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1598              	.LCFI18:
 1599              		.cfi_def_cfa_offset 24
 1600              		.cfi_offset 3, -24
 1601              		.cfi_offset 4, -20
 1602              		.cfi_offset 5, -16
 1603              		.cfi_offset 6, -12
 1604              		.cfi_offset 7, -8
 1605              		.cfi_offset 14, -4
 1606 0002 0746     		mov	r7, r0
 1607 0004 0E46     		mov	r6, r1
 1608 0006 1546     		mov	r5, r2
 1609 0008 1C46     		mov	r4, r3
 390:SSD1331.c     ****     _sendCmd(CMD_COPY_WINDOW);//copy window
 1610              		.loc 1 390 0
 1611 000a 2320     		movs	r0, #35
 1612              	.LVL217:
 1613 000c FFF7FEFF 		bl	_sendCmd
 1614              	.LVL218:
 391:SSD1331.c     ****     _sendCmd(x0);//start column
 1615              		.loc 1 391 0
ARM GAS  /tmp/ccbMwiuG.s 			page 37


 1616 0010 F8B2     		uxtb	r0, r7
 1617 0012 FFF7FEFF 		bl	_sendCmd
 1618              	.LVL219:
 392:SSD1331.c     ****     _sendCmd(y0);//start row
 1619              		.loc 1 392 0
 1620 0016 F0B2     		uxtb	r0, r6
 1621 0018 FFF7FEFF 		bl	_sendCmd
 1622              	.LVL220:
 393:SSD1331.c     ****     _sendCmd(x1);//end column
 1623              		.loc 1 393 0
 1624 001c E8B2     		uxtb	r0, r5
 1625 001e FFF7FEFF 		bl	_sendCmd
 1626              	.LVL221:
 394:SSD1331.c     ****     _sendCmd(y1);//end row
 1627              		.loc 1 394 0
 1628 0022 E0B2     		uxtb	r0, r4
 1629 0024 FFF7FEFF 		bl	_sendCmd
 1630              	.LVL222:
 395:SSD1331.c     ****     _sendCmd(x2);//new column
 1631              		.loc 1 395 0
 1632 0028 9DF81800 		ldrb	r0, [sp, #24]	@ zero_extendqisi2
 1633 002c FFF7FEFF 		bl	_sendCmd
 1634              	.LVL223:
 396:SSD1331.c     ****     _sendCmd(y2);//new row
 1635              		.loc 1 396 0
 1636 0030 9DF81C00 		ldrb	r0, [sp, #28]	@ zero_extendqisi2
 1637 0034 FFF7FEFF 		bl	_sendCmd
 1638              	.LVL224:
 1639 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1640              		.cfi_endproc
 1641              	.LFE72:
 1643              		.section	.text.SSD1331_dimWindow,"ax",%progbits
 1644              		.align	1
 1645              		.global	SSD1331_dimWindow
 1646              		.syntax unified
 1647              		.thumb
 1648              		.thumb_func
 1649              		.fpu softvfp
 1651              	SSD1331_dimWindow:
 1652              	.LFB73:
 397:SSD1331.c     **** }
 398:SSD1331.c     **** 
 399:SSD1331.c     **** void SSD1331_dimWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
 400:SSD1331.c     **** {
 1653              		.loc 1 400 0
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 1657              	.LVL225:
 1658 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1659              	.LCFI19:
 1660              		.cfi_def_cfa_offset 24
 1661              		.cfi_offset 3, -24
 1662              		.cfi_offset 4, -20
 1663              		.cfi_offset 5, -16
 1664              		.cfi_offset 6, -12
 1665              		.cfi_offset 7, -8
ARM GAS  /tmp/ccbMwiuG.s 			page 38


 1666              		.cfi_offset 14, -4
 1667 0002 0746     		mov	r7, r0
 1668 0004 0E46     		mov	r6, r1
 1669 0006 1546     		mov	r5, r2
 1670 0008 1C46     		mov	r4, r3
 401:SSD1331.c     ****     _sendCmd(CMD_DIM_WINDOW);//copy area
 1671              		.loc 1 401 0
 1672 000a 2420     		movs	r0, #36
 1673              	.LVL226:
 1674 000c FFF7FEFF 		bl	_sendCmd
 1675              	.LVL227:
 402:SSD1331.c     ****     _sendCmd(x0);//start column
 1676              		.loc 1 402 0
 1677 0010 F8B2     		uxtb	r0, r7
 1678 0012 FFF7FEFF 		bl	_sendCmd
 1679              	.LVL228:
 403:SSD1331.c     ****     _sendCmd(y0);//start row
 1680              		.loc 1 403 0
 1681 0016 F0B2     		uxtb	r0, r6
 1682 0018 FFF7FEFF 		bl	_sendCmd
 1683              	.LVL229:
 404:SSD1331.c     ****     _sendCmd(x1);//end column
 1684              		.loc 1 404 0
 1685 001c E8B2     		uxtb	r0, r5
 1686 001e FFF7FEFF 		bl	_sendCmd
 1687              	.LVL230:
 405:SSD1331.c     ****     _sendCmd(y1);//end row
 1688              		.loc 1 405 0
 1689 0022 E0B2     		uxtb	r0, r4
 1690 0024 FFF7FEFF 		bl	_sendCmd
 1691              	.LVL231:
 1692 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1693              		.cfi_endproc
 1694              	.LFE73:
 1696              		.section	.text.SSD1331_clearWindow,"ax",%progbits
 1697              		.align	1
 1698              		.global	SSD1331_clearWindow
 1699              		.syntax unified
 1700              		.thumb
 1701              		.thumb_func
 1702              		.fpu softvfp
 1704              	SSD1331_clearWindow:
 1705              	.LFB74:
 406:SSD1331.c     **** }
 407:SSD1331.c     **** 
 408:SSD1331.c     **** void SSD1331_clearWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
 409:SSD1331.c     **** {
 1706              		.loc 1 409 0
 1707              		.cfi_startproc
 1708              		@ args = 0, pretend = 0, frame = 0
 1709              		@ frame_needed = 0, uses_anonymous_args = 0
 1710              	.LVL232:
 1711 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1712              	.LCFI20:
 1713              		.cfi_def_cfa_offset 24
 1714              		.cfi_offset 3, -24
 1715              		.cfi_offset 4, -20
ARM GAS  /tmp/ccbMwiuG.s 			page 39


 1716              		.cfi_offset 5, -16
 1717              		.cfi_offset 6, -12
 1718              		.cfi_offset 7, -8
 1719              		.cfi_offset 14, -4
 1720 0002 0746     		mov	r7, r0
 1721 0004 0E46     		mov	r6, r1
 1722 0006 1546     		mov	r5, r2
 1723 0008 1C46     		mov	r4, r3
 410:SSD1331.c     ****     _sendCmd(CMD_CLEAR_WINDOW);//clear window
 1724              		.loc 1 410 0
 1725 000a 2520     		movs	r0, #37
 1726              	.LVL233:
 1727 000c FFF7FEFF 		bl	_sendCmd
 1728              	.LVL234:
 411:SSD1331.c     ****     _sendCmd(x0);//start column
 1729              		.loc 1 411 0
 1730 0010 F8B2     		uxtb	r0, r7
 1731 0012 FFF7FEFF 		bl	_sendCmd
 1732              	.LVL235:
 412:SSD1331.c     ****     _sendCmd(y0);//start row
 1733              		.loc 1 412 0
 1734 0016 F0B2     		uxtb	r0, r6
 1735 0018 FFF7FEFF 		bl	_sendCmd
 1736              	.LVL236:
 413:SSD1331.c     ****     _sendCmd(x1);//end column
 1737              		.loc 1 413 0
 1738 001c E8B2     		uxtb	r0, r5
 1739 001e FFF7FEFF 		bl	_sendCmd
 1740              	.LVL237:
 414:SSD1331.c     ****     _sendCmd(y1);//end row
 1741              		.loc 1 414 0
 1742 0022 E0B2     		uxtb	r0, r4
 1743 0024 FFF7FEFF 		bl	_sendCmd
 1744              	.LVL238:
 1745 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1746              		.cfi_endproc
 1747              	.LFE74:
 1749              		.section	.text.SSD1331_setScrolling,"ax",%progbits
 1750              		.align	1
 1751              		.global	SSD1331_setScrolling
 1752              		.syntax unified
 1753              		.thumb
 1754              		.thumb_func
 1755              		.fpu softvfp
 1757              	SSD1331_setScrolling:
 1758              	.LFB75:
 415:SSD1331.c     **** }
 416:SSD1331.c     **** 
 417:SSD1331.c     **** void SSD1331_setScrolling(ScollingDirection direction, uint8_t rowAddr, uint8_t rowNum, uint8_t tim
 418:SSD1331.c     **** {
 1759              		.loc 1 418 0
 1760              		.cfi_startproc
 1761              		@ args = 0, pretend = 0, frame = 0
 1762              		@ frame_needed = 0, uses_anonymous_args = 0
 1763              	.LVL239:
 1764 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1765              	.LCFI21:
ARM GAS  /tmp/ccbMwiuG.s 			page 40


 1766              		.cfi_def_cfa_offset 24
 1767              		.cfi_offset 4, -24
 1768              		.cfi_offset 5, -20
 1769              		.cfi_offset 6, -16
 1770              		.cfi_offset 7, -12
 1771              		.cfi_offset 8, -8
 1772              		.cfi_offset 14, -4
 1773 0004 0F46     		mov	r7, r1
 1774 0006 1646     		mov	r6, r2
 1775 0008 1D46     		mov	r5, r3
 1776              	.LVL240:
 419:SSD1331.c     ****     uint8_t scolling_horizontal = 0x0;
 420:SSD1331.c     ****     uint8_t scolling_vertical = 0x0;
 421:SSD1331.c     ****     switch(direction){
 1777              		.loc 1 421 0
 1778 000a 0128     		cmp	r0, #1
 1779 000c 1BD0     		beq	.L117
 1780 000e 08B3     		cbz	r0, .L120
 1781 0010 0228     		cmp	r0, #2
 1782 0012 1CD0     		beq	.L119
 420:SSD1331.c     ****     switch(direction){
 1783              		.loc 1 420 0
 1784 0014 0024     		movs	r4, #0
 419:SSD1331.c     ****     uint8_t scolling_horizontal = 0x0;
 1785              		.loc 1 419 0
 1786 0016 A046     		mov	r8, r4
 1787              	.LVL241:
 1788              	.L118:
 422:SSD1331.c     ****         case Horizontal:
 423:SSD1331.c     ****             scolling_horizontal = 0x01;
 424:SSD1331.c     ****             scolling_vertical = 0x00;
 425:SSD1331.c     ****             break;
 426:SSD1331.c     ****         case Vertical:
 427:SSD1331.c     ****             scolling_horizontal = 0x00;
 428:SSD1331.c     ****             scolling_vertical = 0x01;
 429:SSD1331.c     ****             break;
 430:SSD1331.c     ****         case Diagonal:
 431:SSD1331.c     ****             scolling_horizontal = 0x01;
 432:SSD1331.c     ****             scolling_vertical = 0x01;
 433:SSD1331.c     ****             break;
 434:SSD1331.c     ****         default:
 435:SSD1331.c     ****             break;
 436:SSD1331.c     ****     }
 437:SSD1331.c     ****     _sendCmd(CMD_CONTINUOUS_SCROLLING_SETUP);
 1789              		.loc 1 437 0
 1790 0018 2720     		movs	r0, #39
 1791              	.LVL242:
 1792 001a FFF7FEFF 		bl	_sendCmd
 1793              	.LVL243:
 438:SSD1331.c     ****     _sendCmd(scolling_horizontal);
 1794              		.loc 1 438 0
 1795 001e 4046     		mov	r0, r8
 1796 0020 FFF7FEFF 		bl	_sendCmd
 1797              	.LVL244:
 439:SSD1331.c     ****     _sendCmd(rowAddr);
 1798              		.loc 1 439 0
 1799 0024 3846     		mov	r0, r7
ARM GAS  /tmp/ccbMwiuG.s 			page 41


 1800 0026 FFF7FEFF 		bl	_sendCmd
 1801              	.LVL245:
 440:SSD1331.c     ****     _sendCmd(rowNum);
 1802              		.loc 1 440 0
 1803 002a 3046     		mov	r0, r6
 1804 002c FFF7FEFF 		bl	_sendCmd
 1805              	.LVL246:
 441:SSD1331.c     ****     _sendCmd(scolling_vertical);
 1806              		.loc 1 441 0
 1807 0030 2046     		mov	r0, r4
 1808 0032 FFF7FEFF 		bl	_sendCmd
 1809              	.LVL247:
 442:SSD1331.c     ****     _sendCmd(timeInterval);
 1810              		.loc 1 442 0
 1811 0036 2846     		mov	r0, r5
 1812 0038 FFF7FEFF 		bl	_sendCmd
 1813              	.LVL248:
 443:SSD1331.c     ****     _sendCmd(CMD_ACTIVE_SCROLLING);
 1814              		.loc 1 443 0
 1815 003c 2F20     		movs	r0, #47
 1816 003e FFF7FEFF 		bl	_sendCmd
 1817              	.LVL249:
 1818 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1819              	.LVL250:
 1820              	.L117:
 428:SSD1331.c     ****             break;
 1821              		.loc 1 428 0
 1822 0046 0124     		movs	r4, #1
 427:SSD1331.c     ****             scolling_vertical = 0x01;
 1823              		.loc 1 427 0
 1824 0048 4FF00008 		mov	r8, #0
 429:SSD1331.c     ****         case Diagonal:
 1825              		.loc 1 429 0
 1826 004c E4E7     		b	.L118
 1827              	.LVL251:
 1828              	.L119:
 432:SSD1331.c     ****             break;
 1829              		.loc 1 432 0
 1830 004e 0124     		movs	r4, #1
 431:SSD1331.c     ****             scolling_vertical = 0x01;
 1831              		.loc 1 431 0
 1832 0050 A046     		mov	r8, r4
 433:SSD1331.c     ****         default:
 1833              		.loc 1 433 0
 1834 0052 E1E7     		b	.L118
 1835              	.LVL252:
 1836              	.L120:
 424:SSD1331.c     ****             break;
 1837              		.loc 1 424 0
 1838 0054 0024     		movs	r4, #0
 423:SSD1331.c     ****             scolling_vertical = 0x00;
 1839              		.loc 1 423 0
 1840 0056 4FF00108 		mov	r8, #1
 1841 005a DDE7     		b	.L118
 1842              		.cfi_endproc
 1843              	.LFE75:
 1845              		.section	.text.SSD1331_enableScrolling,"ax",%progbits
ARM GAS  /tmp/ccbMwiuG.s 			page 42


 1846              		.align	1
 1847              		.global	SSD1331_enableScrolling
 1848              		.syntax unified
 1849              		.thumb
 1850              		.thumb_func
 1851              		.fpu softvfp
 1853              	SSD1331_enableScrolling:
 1854              	.LFB76:
 444:SSD1331.c     **** }
 445:SSD1331.c     **** 
 446:SSD1331.c     **** void SSD1331_enableScrolling(bool enable)
 447:SSD1331.c     **** {
 1855              		.loc 1 447 0
 1856              		.cfi_startproc
 1857              		@ args = 0, pretend = 0, frame = 0
 1858              		@ frame_needed = 0, uses_anonymous_args = 0
 1859              	.LVL253:
 1860 0000 08B5     		push	{r3, lr}
 1861              	.LCFI22:
 1862              		.cfi_def_cfa_offset 8
 1863              		.cfi_offset 3, -8
 1864              		.cfi_offset 14, -4
 448:SSD1331.c     ****     if(enable)
 1865              		.loc 1 448 0
 1866 0002 18B9     		cbnz	r0, .L126
 449:SSD1331.c     ****         _sendCmd(CMD_ACTIVE_SCROLLING);
 450:SSD1331.c     ****     else
 451:SSD1331.c     ****         _sendCmd(CMD_DEACTIVE_SCROLLING);
 1867              		.loc 1 451 0
 1868 0004 2E20     		movs	r0, #46
 1869              	.LVL254:
 1870 0006 FFF7FEFF 		bl	_sendCmd
 1871              	.LVL255:
 1872 000a 08BD     		pop	{r3, pc}
 1873              	.LVL256:
 1874              	.L126:
 449:SSD1331.c     ****         _sendCmd(CMD_ACTIVE_SCROLLING);
 1875              		.loc 1 449 0
 1876 000c 2F20     		movs	r0, #47
 1877              	.LVL257:
 1878 000e FFF7FEFF 		bl	_sendCmd
 1879              	.LVL258:
 1880 0012 08BD     		pop	{r3, pc}
 1881              		.cfi_endproc
 1882              	.LFE76:
 1884              		.section	.text.SSD1331_setDisplayMode,"ax",%progbits
 1885              		.align	1
 1886              		.global	SSD1331_setDisplayMode
 1887              		.syntax unified
 1888              		.thumb
 1889              		.thumb_func
 1890              		.fpu softvfp
 1892              	SSD1331_setDisplayMode:
 1893              	.LFB77:
 452:SSD1331.c     **** }
 453:SSD1331.c     **** 
 454:SSD1331.c     **** void SSD1331_setDisplayMode(DisplayMode mode)
ARM GAS  /tmp/ccbMwiuG.s 			page 43


 455:SSD1331.c     **** {
 1894              		.loc 1 455 0
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 0
 1897              		@ frame_needed = 0, uses_anonymous_args = 0
 1898              	.LVL259:
 1899 0000 08B5     		push	{r3, lr}
 1900              	.LCFI23:
 1901              		.cfi_def_cfa_offset 8
 1902              		.cfi_offset 3, -8
 1903              		.cfi_offset 14, -4
 456:SSD1331.c     ****     _sendCmd(mode);
 1904              		.loc 1 456 0
 1905 0002 FFF7FEFF 		bl	_sendCmd
 1906              	.LVL260:
 1907 0006 08BD     		pop	{r3, pc}
 1908              		.cfi_endproc
 1909              	.LFE77:
 1911              		.section	.text.SSD1331_setDisplayPower,"ax",%progbits
 1912              		.align	1
 1913              		.global	SSD1331_setDisplayPower
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
 1917              		.fpu softvfp
 1919              	SSD1331_setDisplayPower:
 1920              	.LFB78:
 457:SSD1331.c     **** }
 458:SSD1331.c     **** 
 459:SSD1331.c     **** void SSD1331_setDisplayPower(DisplayPower power)
 460:SSD1331.c     **** {
 1921              		.loc 1 460 0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              	.LVL261:
 1926 0000 08B5     		push	{r3, lr}
 1927              	.LCFI24:
 1928              		.cfi_def_cfa_offset 8
 1929              		.cfi_offset 3, -8
 1930              		.cfi_offset 14, -4
 461:SSD1331.c     ****     _sendCmd(power);
 1931              		.loc 1 461 0
 1932 0002 FFF7FEFF 		bl	_sendCmd
 1933              	.LVL262:
 1934 0006 08BD     		pop	{r3, pc}
 1935              		.cfi_endproc
 1936              	.LFE78:
 1938              		.section	.bss.CHR_X,"aw",%nobits
 1939              		.set	.LANCHOR0,. + 0
 1942              	CHR_X:
 1943 0000 00       		.space	1
 1944              		.section	.bss.CHR_Y,"aw",%nobits
 1945              		.set	.LANCHOR1,. + 0
 1948              	CHR_Y:
 1949 0000 00       		.space	1
 1950              		.section	.rodata.BigNumbers,"a",%progbits
ARM GAS  /tmp/ccbMwiuG.s 			page 44


 1951              		.align	2
 1952              		.set	.LANCHOR2,. + 0
 1955              	BigNumbers:
 1956 0000 FC       		.byte	-4
 1957 0001 7A       		.byte	122
 1958 0002 06       		.byte	6
 1959 0003 06       		.byte	6
 1960 0004 06       		.byte	6
 1961 0005 06       		.byte	6
 1962 0006 06       		.byte	6
 1963 0007 06       		.byte	6
 1964 0008 7A       		.byte	122
 1965 0009 FC       		.byte	-4
 1966 000a 7E       		.byte	126
 1967 000b BC       		.byte	-68
 1968 000c C0       		.byte	-64
 1969 000d C0       		.byte	-64
 1970 000e C0       		.byte	-64
 1971 000f C0       		.byte	-64
 1972 0010 C0       		.byte	-64
 1973 0011 C0       		.byte	-64
 1974 0012 BC       		.byte	-68
 1975 0013 7E       		.byte	126
 1976 0014 00       		.byte	0
 1977 0015 00       		.byte	0
 1978 0016 00       		.byte	0
 1979 0017 00       		.byte	0
 1980 0018 00       		.byte	0
 1981 0019 00       		.byte	0
 1982 001a 00       		.byte	0
 1983 001b 00       		.byte	0
 1984 001c 78       		.byte	120
 1985 001d FC       		.byte	-4
 1986 001e 00       		.byte	0
 1987 001f 00       		.byte	0
 1988 0020 00       		.byte	0
 1989 0021 00       		.byte	0
 1990 0022 00       		.byte	0
 1991 0023 00       		.byte	0
 1992 0024 00       		.byte	0
 1993 0025 00       		.byte	0
 1994 0026 3C       		.byte	60
 1995 0027 7E       		.byte	126
 1996 0028 00       		.byte	0
 1997 0029 02       		.byte	2
 1998 002a 86       		.byte	-122
 1999 002b 86       		.byte	-122
 2000 002c 86       		.byte	-122
 2001 002d 86       		.byte	-122
 2002 002e 86       		.byte	-122
 2003 002f 86       		.byte	-122
 2004 0030 7A       		.byte	122
 2005 0031 FC       		.byte	-4
 2006 0032 7E       		.byte	126
 2007 0033 BD       		.byte	-67
 2008 0034 C3       		.byte	-61
 2009 0035 C3       		.byte	-61
ARM GAS  /tmp/ccbMwiuG.s 			page 45


 2010 0036 C3       		.byte	-61
 2011 0037 C3       		.byte	-61
 2012 0038 C3       		.byte	-61
 2013 0039 C3       		.byte	-61
 2014 003a 81       		.byte	-127
 2015 003b 00       		.byte	0
 2016 003c 00       		.byte	0
 2017 003d 02       		.byte	2
 2018 003e 86       		.byte	-122
 2019 003f 86       		.byte	-122
 2020 0040 86       		.byte	-122
 2021 0041 86       		.byte	-122
 2022 0042 86       		.byte	-122
 2023 0043 86       		.byte	-122
 2024 0044 7A       		.byte	122
 2025 0045 FC       		.byte	-4
 2026 0046 00       		.byte	0
 2027 0047 81       		.byte	-127
 2028 0048 C3       		.byte	-61
 2029 0049 C3       		.byte	-61
 2030 004a C3       		.byte	-61
 2031 004b C3       		.byte	-61
 2032 004c C3       		.byte	-61
 2033 004d C3       		.byte	-61
 2034 004e BD       		.byte	-67
 2035 004f 7E       		.byte	126
 2036 0050 FC       		.byte	-4
 2037 0051 78       		.byte	120
 2038 0052 80       		.byte	-128
 2039 0053 80       		.byte	-128
 2040 0054 80       		.byte	-128
 2041 0055 80       		.byte	-128
 2042 0056 80       		.byte	-128
 2043 0057 80       		.byte	-128
 2044 0058 78       		.byte	120
 2045 0059 FC       		.byte	-4
 2046 005a 00       		.byte	0
 2047 005b 01       		.byte	1
 2048 005c 03       		.byte	3
 2049 005d 03       		.byte	3
 2050 005e 03       		.byte	3
 2051 005f 03       		.byte	3
 2052 0060 03       		.byte	3
 2053 0061 03       		.byte	3
 2054 0062 3D       		.byte	61
 2055 0063 7E       		.byte	126
 2056 0064 FC       		.byte	-4
 2057 0065 7A       		.byte	122
 2058 0066 86       		.byte	-122
 2059 0067 86       		.byte	-122
 2060 0068 86       		.byte	-122
 2061 0069 86       		.byte	-122
 2062 006a 86       		.byte	-122
 2063 006b 86       		.byte	-122
 2064 006c 02       		.byte	2
 2065 006d 00       		.byte	0
 2066 006e 00       		.byte	0
ARM GAS  /tmp/ccbMwiuG.s 			page 46


 2067 006f 81       		.byte	-127
 2068 0070 C3       		.byte	-61
 2069 0071 C3       		.byte	-61
 2070 0072 C3       		.byte	-61
 2071 0073 C3       		.byte	-61
 2072 0074 C3       		.byte	-61
 2073 0075 C3       		.byte	-61
 2074 0076 BD       		.byte	-67
 2075 0077 7E       		.byte	126
 2076 0078 FC       		.byte	-4
 2077 0079 7A       		.byte	122
 2078 007a 86       		.byte	-122
 2079 007b 86       		.byte	-122
 2080 007c 86       		.byte	-122
 2081 007d 86       		.byte	-122
 2082 007e 86       		.byte	-122
 2083 007f 86       		.byte	-122
 2084 0080 02       		.byte	2
 2085 0081 00       		.byte	0
 2086 0082 7E       		.byte	126
 2087 0083 BD       		.byte	-67
 2088 0084 C3       		.byte	-61
 2089 0085 C3       		.byte	-61
 2090 0086 C3       		.byte	-61
 2091 0087 C3       		.byte	-61
 2092 0088 C3       		.byte	-61
 2093 0089 C3       		.byte	-61
 2094 008a BD       		.byte	-67
 2095 008b 7E       		.byte	126
 2096 008c 00       		.byte	0
 2097 008d 02       		.byte	2
 2098 008e 06       		.byte	6
 2099 008f 06       		.byte	6
 2100 0090 06       		.byte	6
 2101 0091 06       		.byte	6
 2102 0092 06       		.byte	6
 2103 0093 06       		.byte	6
 2104 0094 7A       		.byte	122
 2105 0095 FC       		.byte	-4
 2106 0096 00       		.byte	0
 2107 0097 00       		.byte	0
 2108 0098 00       		.byte	0
 2109 0099 00       		.byte	0
 2110 009a 00       		.byte	0
 2111 009b 00       		.byte	0
 2112 009c 00       		.byte	0
 2113 009d 00       		.byte	0
 2114 009e 3C       		.byte	60
 2115 009f 7E       		.byte	126
 2116 00a0 FC       		.byte	-4
 2117 00a1 7A       		.byte	122
 2118 00a2 86       		.byte	-122
 2119 00a3 86       		.byte	-122
 2120 00a4 86       		.byte	-122
 2121 00a5 86       		.byte	-122
 2122 00a6 86       		.byte	-122
 2123 00a7 86       		.byte	-122
ARM GAS  /tmp/ccbMwiuG.s 			page 47


 2124 00a8 7A       		.byte	122
 2125 00a9 FC       		.byte	-4
 2126 00aa 7E       		.byte	126
 2127 00ab BD       		.byte	-67
 2128 00ac C3       		.byte	-61
 2129 00ad C3       		.byte	-61
 2130 00ae C3       		.byte	-61
 2131 00af C3       		.byte	-61
 2132 00b0 C3       		.byte	-61
 2133 00b1 C3       		.byte	-61
 2134 00b2 BD       		.byte	-67
 2135 00b3 7E       		.byte	126
 2136 00b4 FC       		.byte	-4
 2137 00b5 7A       		.byte	122
 2138 00b6 86       		.byte	-122
 2139 00b7 86       		.byte	-122
 2140 00b8 86       		.byte	-122
 2141 00b9 86       		.byte	-122
 2142 00ba 86       		.byte	-122
 2143 00bb 86       		.byte	-122
 2144 00bc 7A       		.byte	122
 2145 00bd FC       		.byte	-4
 2146 00be 00       		.byte	0
 2147 00bf 81       		.byte	-127
 2148 00c0 C3       		.byte	-61
 2149 00c1 C3       		.byte	-61
 2150 00c2 C3       		.byte	-61
 2151 00c3 C3       		.byte	-61
 2152 00c4 C3       		.byte	-61
 2153 00c5 C3       		.byte	-61
 2154 00c6 BD       		.byte	-67
 2155 00c7 7E       		.byte	126
 2156              		.section	.rodata.FontLookup,"a",%progbits
 2157              		.align	2
 2158              		.set	.LANCHOR4,. + 0
 2161              	FontLookup:
 2162 0000 00       		.byte	0
 2163 0001 00       		.byte	0
 2164 0002 00       		.byte	0
 2165 0003 00       		.byte	0
 2166 0004 00       		.byte	0
 2167 0005 00       		.byte	0
 2168 0006 00       		.byte	0
 2169 0007 5F       		.byte	95
 2170 0008 00       		.byte	0
 2171 0009 00       		.byte	0
 2172 000a 00       		.byte	0
 2173 000b 07       		.byte	7
 2174 000c 00       		.byte	0
 2175 000d 07       		.byte	7
 2176 000e 00       		.byte	0
 2177 000f 14       		.byte	20
 2178 0010 7F       		.byte	127
 2179 0011 14       		.byte	20
 2180 0012 7F       		.byte	127
 2181 0013 14       		.byte	20
 2182 0014 24       		.byte	36
ARM GAS  /tmp/ccbMwiuG.s 			page 48


 2183 0015 2A       		.byte	42
 2184 0016 7F       		.byte	127
 2185 0017 2A       		.byte	42
 2186 0018 12       		.byte	18
 2187 0019 4C       		.byte	76
 2188 001a 2C       		.byte	44
 2189 001b 10       		.byte	16
 2190 001c 68       		.byte	104
 2191 001d 64       		.byte	100
 2192 001e 36       		.byte	54
 2193 001f 49       		.byte	73
 2194 0020 55       		.byte	85
 2195 0021 22       		.byte	34
 2196 0022 50       		.byte	80
 2197 0023 00       		.byte	0
 2198 0024 05       		.byte	5
 2199 0025 03       		.byte	3
 2200 0026 00       		.byte	0
 2201 0027 00       		.byte	0
 2202 0028 00       		.byte	0
 2203 0029 1C       		.byte	28
 2204 002a 22       		.byte	34
 2205 002b 41       		.byte	65
 2206 002c 00       		.byte	0
 2207 002d 00       		.byte	0
 2208 002e 41       		.byte	65
 2209 002f 22       		.byte	34
 2210 0030 1C       		.byte	28
 2211 0031 00       		.byte	0
 2212 0032 14       		.byte	20
 2213 0033 08       		.byte	8
 2214 0034 3E       		.byte	62
 2215 0035 08       		.byte	8
 2216 0036 14       		.byte	20
 2217 0037 08       		.byte	8
 2218 0038 08       		.byte	8
 2219 0039 3E       		.byte	62
 2220 003a 08       		.byte	8
 2221 003b 08       		.byte	8
 2222 003c 00       		.byte	0
 2223 003d 00       		.byte	0
 2224 003e 50       		.byte	80
 2225 003f 30       		.byte	48
 2226 0040 00       		.byte	0
 2227 0041 10       		.byte	16
 2228 0042 10       		.byte	16
 2229 0043 10       		.byte	16
 2230 0044 10       		.byte	16
 2231 0045 10       		.byte	16
 2232 0046 00       		.byte	0
 2233 0047 60       		.byte	96
 2234 0048 60       		.byte	96
 2235 0049 00       		.byte	0
 2236 004a 00       		.byte	0
 2237 004b 20       		.byte	32
 2238 004c 10       		.byte	16
 2239 004d 08       		.byte	8
ARM GAS  /tmp/ccbMwiuG.s 			page 49


 2240 004e 04       		.byte	4
 2241 004f 02       		.byte	2
 2242 0050 3E       		.byte	62
 2243 0051 51       		.byte	81
 2244 0052 49       		.byte	73
 2245 0053 45       		.byte	69
 2246 0054 3E       		.byte	62
 2247 0055 00       		.byte	0
 2248 0056 42       		.byte	66
 2249 0057 7F       		.byte	127
 2250 0058 40       		.byte	64
 2251 0059 00       		.byte	0
 2252 005a 42       		.byte	66
 2253 005b 61       		.byte	97
 2254 005c 51       		.byte	81
 2255 005d 49       		.byte	73
 2256 005e 46       		.byte	70
 2257 005f 21       		.byte	33
 2258 0060 41       		.byte	65
 2259 0061 45       		.byte	69
 2260 0062 4B       		.byte	75
 2261 0063 31       		.byte	49
 2262 0064 18       		.byte	24
 2263 0065 14       		.byte	20
 2264 0066 12       		.byte	18
 2265 0067 7F       		.byte	127
 2266 0068 10       		.byte	16
 2267 0069 27       		.byte	39
 2268 006a 45       		.byte	69
 2269 006b 45       		.byte	69
 2270 006c 45       		.byte	69
 2271 006d 39       		.byte	57
 2272 006e 3C       		.byte	60
 2273 006f 4A       		.byte	74
 2274 0070 49       		.byte	73
 2275 0071 49       		.byte	73
 2276 0072 30       		.byte	48
 2277 0073 01       		.byte	1
 2278 0074 71       		.byte	113
 2279 0075 09       		.byte	9
 2280 0076 05       		.byte	5
 2281 0077 03       		.byte	3
 2282 0078 36       		.byte	54
 2283 0079 49       		.byte	73
 2284 007a 49       		.byte	73
 2285 007b 49       		.byte	73
 2286 007c 36       		.byte	54
 2287 007d 06       		.byte	6
 2288 007e 49       		.byte	73
 2289 007f 49       		.byte	73
 2290 0080 29       		.byte	41
 2291 0081 1E       		.byte	30
 2292 0082 00       		.byte	0
 2293 0083 36       		.byte	54
 2294 0084 36       		.byte	54
 2295 0085 00       		.byte	0
 2296 0086 00       		.byte	0
ARM GAS  /tmp/ccbMwiuG.s 			page 50


 2297 0087 00       		.byte	0
 2298 0088 56       		.byte	86
 2299 0089 36       		.byte	54
 2300 008a 00       		.byte	0
 2301 008b 00       		.byte	0
 2302 008c 08       		.byte	8
 2303 008d 14       		.byte	20
 2304 008e 22       		.byte	34
 2305 008f 41       		.byte	65
 2306 0090 00       		.byte	0
 2307 0091 14       		.byte	20
 2308 0092 14       		.byte	20
 2309 0093 14       		.byte	20
 2310 0094 14       		.byte	20
 2311 0095 14       		.byte	20
 2312 0096 00       		.byte	0
 2313 0097 41       		.byte	65
 2314 0098 22       		.byte	34
 2315 0099 14       		.byte	20
 2316 009a 08       		.byte	8
 2317 009b 02       		.byte	2
 2318 009c 01       		.byte	1
 2319 009d 51       		.byte	81
 2320 009e 09       		.byte	9
 2321 009f 06       		.byte	6
 2322 00a0 32       		.byte	50
 2323 00a1 49       		.byte	73
 2324 00a2 79       		.byte	121
 2325 00a3 41       		.byte	65
 2326 00a4 3E       		.byte	62
 2327 00a5 7E       		.byte	126
 2328 00a6 11       		.byte	17
 2329 00a7 11       		.byte	17
 2330 00a8 11       		.byte	17
 2331 00a9 7E       		.byte	126
 2332 00aa 7F       		.byte	127
 2333 00ab 49       		.byte	73
 2334 00ac 49       		.byte	73
 2335 00ad 49       		.byte	73
 2336 00ae 36       		.byte	54
 2337 00af 3E       		.byte	62
 2338 00b0 41       		.byte	65
 2339 00b1 41       		.byte	65
 2340 00b2 41       		.byte	65
 2341 00b3 22       		.byte	34
 2342 00b4 7F       		.byte	127
 2343 00b5 41       		.byte	65
 2344 00b6 41       		.byte	65
 2345 00b7 22       		.byte	34
 2346 00b8 1C       		.byte	28
 2347 00b9 7F       		.byte	127
 2348 00ba 49       		.byte	73
 2349 00bb 49       		.byte	73
 2350 00bc 49       		.byte	73
 2351 00bd 41       		.byte	65
 2352 00be 7F       		.byte	127
 2353 00bf 09       		.byte	9
ARM GAS  /tmp/ccbMwiuG.s 			page 51


 2354 00c0 09       		.byte	9
 2355 00c1 09       		.byte	9
 2356 00c2 01       		.byte	1
 2357 00c3 3E       		.byte	62
 2358 00c4 41       		.byte	65
 2359 00c5 49       		.byte	73
 2360 00c6 49       		.byte	73
 2361 00c7 7A       		.byte	122
 2362 00c8 7F       		.byte	127
 2363 00c9 08       		.byte	8
 2364 00ca 08       		.byte	8
 2365 00cb 08       		.byte	8
 2366 00cc 7F       		.byte	127
 2367 00cd 00       		.byte	0
 2368 00ce 41       		.byte	65
 2369 00cf 7F       		.byte	127
 2370 00d0 41       		.byte	65
 2371 00d1 00       		.byte	0
 2372 00d2 20       		.byte	32
 2373 00d3 40       		.byte	64
 2374 00d4 41       		.byte	65
 2375 00d5 3F       		.byte	63
 2376 00d6 01       		.byte	1
 2377 00d7 7F       		.byte	127
 2378 00d8 08       		.byte	8
 2379 00d9 14       		.byte	20
 2380 00da 22       		.byte	34
 2381 00db 41       		.byte	65
 2382 00dc 7F       		.byte	127
 2383 00dd 40       		.byte	64
 2384 00de 40       		.byte	64
 2385 00df 40       		.byte	64
 2386 00e0 40       		.byte	64
 2387 00e1 7F       		.byte	127
 2388 00e2 02       		.byte	2
 2389 00e3 0C       		.byte	12
 2390 00e4 02       		.byte	2
 2391 00e5 7F       		.byte	127
 2392 00e6 7F       		.byte	127
 2393 00e7 04       		.byte	4
 2394 00e8 08       		.byte	8
 2395 00e9 10       		.byte	16
 2396 00ea 7F       		.byte	127
 2397 00eb 3E       		.byte	62
 2398 00ec 41       		.byte	65
 2399 00ed 41       		.byte	65
 2400 00ee 41       		.byte	65
 2401 00ef 3E       		.byte	62
 2402 00f0 7F       		.byte	127
 2403 00f1 09       		.byte	9
 2404 00f2 09       		.byte	9
 2405 00f3 09       		.byte	9
 2406 00f4 06       		.byte	6
 2407 00f5 3E       		.byte	62
 2408 00f6 41       		.byte	65
 2409 00f7 51       		.byte	81
 2410 00f8 21       		.byte	33
ARM GAS  /tmp/ccbMwiuG.s 			page 52


 2411 00f9 5E       		.byte	94
 2412 00fa 7F       		.byte	127
 2413 00fb 09       		.byte	9
 2414 00fc 19       		.byte	25
 2415 00fd 29       		.byte	41
 2416 00fe 46       		.byte	70
 2417 00ff 46       		.byte	70
 2418 0100 49       		.byte	73
 2419 0101 49       		.byte	73
 2420 0102 49       		.byte	73
 2421 0103 31       		.byte	49
 2422 0104 01       		.byte	1
 2423 0105 01       		.byte	1
 2424 0106 7F       		.byte	127
 2425 0107 01       		.byte	1
 2426 0108 01       		.byte	1
 2427 0109 3F       		.byte	63
 2428 010a 40       		.byte	64
 2429 010b 40       		.byte	64
 2430 010c 40       		.byte	64
 2431 010d 3F       		.byte	63
 2432 010e 1F       		.byte	31
 2433 010f 20       		.byte	32
 2434 0110 40       		.byte	64
 2435 0111 20       		.byte	32
 2436 0112 1F       		.byte	31
 2437 0113 3F       		.byte	63
 2438 0114 40       		.byte	64
 2439 0115 38       		.byte	56
 2440 0116 40       		.byte	64
 2441 0117 3F       		.byte	63
 2442 0118 63       		.byte	99
 2443 0119 14       		.byte	20
 2444 011a 08       		.byte	8
 2445 011b 14       		.byte	20
 2446 011c 63       		.byte	99
 2447 011d 07       		.byte	7
 2448 011e 08       		.byte	8
 2449 011f 70       		.byte	112
 2450 0120 08       		.byte	8
 2451 0121 07       		.byte	7
 2452 0122 61       		.byte	97
 2453 0123 51       		.byte	81
 2454 0124 49       		.byte	73
 2455 0125 45       		.byte	69
 2456 0126 43       		.byte	67
 2457 0127 00       		.byte	0
 2458 0128 7F       		.byte	127
 2459 0129 41       		.byte	65
 2460 012a 41       		.byte	65
 2461 012b 00       		.byte	0
 2462 012c 02       		.byte	2
 2463 012d 04       		.byte	4
 2464 012e 08       		.byte	8
 2465 012f 10       		.byte	16
 2466 0130 20       		.byte	32
 2467 0131 00       		.byte	0
ARM GAS  /tmp/ccbMwiuG.s 			page 53


 2468 0132 41       		.byte	65
 2469 0133 41       		.byte	65
 2470 0134 7F       		.byte	127
 2471 0135 00       		.byte	0
 2472 0136 04       		.byte	4
 2473 0137 02       		.byte	2
 2474 0138 01       		.byte	1
 2475 0139 02       		.byte	2
 2476 013a 04       		.byte	4
 2477 013b 40       		.byte	64
 2478 013c 40       		.byte	64
 2479 013d 40       		.byte	64
 2480 013e 40       		.byte	64
 2481 013f 40       		.byte	64
 2482 0140 00       		.byte	0
 2483 0141 01       		.byte	1
 2484 0142 02       		.byte	2
 2485 0143 04       		.byte	4
 2486 0144 00       		.byte	0
 2487 0145 20       		.byte	32
 2488 0146 54       		.byte	84
 2489 0147 54       		.byte	84
 2490 0148 54       		.byte	84
 2491 0149 78       		.byte	120
 2492 014a 7F       		.byte	127
 2493 014b 48       		.byte	72
 2494 014c 44       		.byte	68
 2495 014d 44       		.byte	68
 2496 014e 38       		.byte	56
 2497 014f 38       		.byte	56
 2498 0150 44       		.byte	68
 2499 0151 44       		.byte	68
 2500 0152 44       		.byte	68
 2501 0153 00       		.byte	0
 2502 0154 38       		.byte	56
 2503 0155 44       		.byte	68
 2504 0156 44       		.byte	68
 2505 0157 48       		.byte	72
 2506 0158 7F       		.byte	127
 2507 0159 38       		.byte	56
 2508 015a 54       		.byte	84
 2509 015b 54       		.byte	84
 2510 015c 54       		.byte	84
 2511 015d 18       		.byte	24
 2512 015e 08       		.byte	8
 2513 015f 7E       		.byte	126
 2514 0160 09       		.byte	9
 2515 0161 01       		.byte	1
 2516 0162 02       		.byte	2
 2517 0163 0C       		.byte	12
 2518 0164 52       		.byte	82
 2519 0165 52       		.byte	82
 2520 0166 52       		.byte	82
 2521 0167 3E       		.byte	62
 2522 0168 7F       		.byte	127
 2523 0169 08       		.byte	8
 2524 016a 04       		.byte	4
ARM GAS  /tmp/ccbMwiuG.s 			page 54


 2525 016b 04       		.byte	4
 2526 016c 78       		.byte	120
 2527 016d 00       		.byte	0
 2528 016e 44       		.byte	68
 2529 016f 7D       		.byte	125
 2530 0170 40       		.byte	64
 2531 0171 00       		.byte	0
 2532 0172 20       		.byte	32
 2533 0173 40       		.byte	64
 2534 0174 44       		.byte	68
 2535 0175 3D       		.byte	61
 2536 0176 00       		.byte	0
 2537 0177 7F       		.byte	127
 2538 0178 10       		.byte	16
 2539 0179 28       		.byte	40
 2540 017a 44       		.byte	68
 2541 017b 00       		.byte	0
 2542 017c 00       		.byte	0
 2543 017d 41       		.byte	65
 2544 017e 7F       		.byte	127
 2545 017f 40       		.byte	64
 2546 0180 00       		.byte	0
 2547 0181 7C       		.byte	124
 2548 0182 04       		.byte	4
 2549 0183 18       		.byte	24
 2550 0184 04       		.byte	4
 2551 0185 78       		.byte	120
 2552 0186 7C       		.byte	124
 2553 0187 08       		.byte	8
 2554 0188 04       		.byte	4
 2555 0189 04       		.byte	4
 2556 018a 78       		.byte	120
 2557 018b 38       		.byte	56
 2558 018c 44       		.byte	68
 2559 018d 44       		.byte	68
 2560 018e 44       		.byte	68
 2561 018f 38       		.byte	56
 2562 0190 7C       		.byte	124
 2563 0191 14       		.byte	20
 2564 0192 14       		.byte	20
 2565 0193 14       		.byte	20
 2566 0194 08       		.byte	8
 2567 0195 08       		.byte	8
 2568 0196 14       		.byte	20
 2569 0197 14       		.byte	20
 2570 0198 18       		.byte	24
 2571 0199 7C       		.byte	124
 2572 019a 7C       		.byte	124
 2573 019b 08       		.byte	8
 2574 019c 04       		.byte	4
 2575 019d 04       		.byte	4
 2576 019e 08       		.byte	8
 2577 019f 48       		.byte	72
 2578 01a0 54       		.byte	84
 2579 01a1 54       		.byte	84
 2580 01a2 54       		.byte	84
 2581 01a3 20       		.byte	32
ARM GAS  /tmp/ccbMwiuG.s 			page 55


 2582 01a4 04       		.byte	4
 2583 01a5 3F       		.byte	63
 2584 01a6 44       		.byte	68
 2585 01a7 40       		.byte	64
 2586 01a8 20       		.byte	32
 2587 01a9 3C       		.byte	60
 2588 01aa 40       		.byte	64
 2589 01ab 40       		.byte	64
 2590 01ac 20       		.byte	32
 2591 01ad 7C       		.byte	124
 2592 01ae 1C       		.byte	28
 2593 01af 20       		.byte	32
 2594 01b0 40       		.byte	64
 2595 01b1 20       		.byte	32
 2596 01b2 1C       		.byte	28
 2597 01b3 3C       		.byte	60
 2598 01b4 40       		.byte	64
 2599 01b5 30       		.byte	48
 2600 01b6 40       		.byte	64
 2601 01b7 3C       		.byte	60
 2602 01b8 44       		.byte	68
 2603 01b9 28       		.byte	40
 2604 01ba 10       		.byte	16
 2605 01bb 28       		.byte	40
 2606 01bc 44       		.byte	68
 2607 01bd 0C       		.byte	12
 2608 01be 50       		.byte	80
 2609 01bf 50       		.byte	80
 2610 01c0 50       		.byte	80
 2611 01c1 3C       		.byte	60
 2612 01c2 44       		.byte	68
 2613 01c3 64       		.byte	100
 2614 01c4 54       		.byte	84
 2615 01c5 4C       		.byte	76
 2616 01c6 44       		.byte	68
 2617 01c7 00       		.byte	0
 2618 01c8 08       		.byte	8
 2619 01c9 36       		.byte	54
 2620 01ca 41       		.byte	65
 2621 01cb 00       		.byte	0
 2622 01cc 00       		.byte	0
 2623 01cd 12       		.byte	18
 2624 01ce 3F       		.byte	63
 2625 01cf 2D       		.byte	45
 2626 01d0 12       		.byte	18
 2627 01d1 00       		.byte	0
 2628 01d2 41       		.byte	65
 2629 01d3 36       		.byte	54
 2630 01d4 08       		.byte	8
 2631 01d5 00       		.byte	0
 2632 01d6 00       		.byte	0
 2633 01d7 45       		.byte	69
 2634 01d8 7C       		.byte	124
 2635 01d9 45       		.byte	69
 2636 01da 00       		.byte	0
 2637 01db 06       		.byte	6
 2638 01dc 09       		.byte	9
ARM GAS  /tmp/ccbMwiuG.s 			page 56


 2639 01dd 09       		.byte	9
 2640 01de 06       		.byte	6
 2641 01df 00       		.byte	0
 2642 01e0 7C       		.byte	124
 2643 01e1 12       		.byte	18
 2644 01e2 11       		.byte	17
 2645 01e3 12       		.byte	18
 2646 01e4 7C       		.byte	124
 2647 01e5 7F       		.byte	127
 2648 01e6 49       		.byte	73
 2649 01e7 49       		.byte	73
 2650 01e8 49       		.byte	73
 2651 01e9 31       		.byte	49
 2652 01ea 7F       		.byte	127
 2653 01eb 49       		.byte	73
 2654 01ec 49       		.byte	73
 2655 01ed 49       		.byte	73
 2656 01ee 36       		.byte	54
 2657 01ef 7F       		.byte	127
 2658 01f0 01       		.byte	1
 2659 01f1 01       		.byte	1
 2660 01f2 01       		.byte	1
 2661 01f3 01       		.byte	1
 2662 01f4 60       		.byte	96
 2663 01f5 3F       		.byte	63
 2664 01f6 21       		.byte	33
 2665 01f7 3F       		.byte	63
 2666 01f8 60       		.byte	96
 2667 01f9 7F       		.byte	127
 2668 01fa 49       		.byte	73
 2669 01fb 49       		.byte	73
 2670 01fc 49       		.byte	73
 2671 01fd 41       		.byte	65
 2672 01fe 77       		.byte	119
 2673 01ff 08       		.byte	8
 2674 0200 7F       		.byte	127
 2675 0201 08       		.byte	8
 2676 0202 77       		.byte	119
 2677 0203 22       		.byte	34
 2678 0204 41       		.byte	65
 2679 0205 49       		.byte	73
 2680 0206 49       		.byte	73
 2681 0207 36       		.byte	54
 2682 0208 7F       		.byte	127
 2683 0209 10       		.byte	16
 2684 020a 08       		.byte	8
 2685 020b 04       		.byte	4
 2686 020c 7F       		.byte	127
 2687 020d 7E       		.byte	126
 2688 020e 10       		.byte	16
 2689 020f 09       		.byte	9
 2690 0210 04       		.byte	4
 2691 0211 7E       		.byte	126
 2692 0212 7F       		.byte	127
 2693 0213 08       		.byte	8
 2694 0214 14       		.byte	20
 2695 0215 22       		.byte	34
ARM GAS  /tmp/ccbMwiuG.s 			page 57


 2696 0216 41       		.byte	65
 2697 0217 40       		.byte	64
 2698 0218 3E       		.byte	62
 2699 0219 01       		.byte	1
 2700 021a 01       		.byte	1
 2701 021b 7F       		.byte	127
 2702 021c 7F       		.byte	127
 2703 021d 02       		.byte	2
 2704 021e 0C       		.byte	12
 2705 021f 02       		.byte	2
 2706 0220 7F       		.byte	127
 2707 0221 7F       		.byte	127
 2708 0222 08       		.byte	8
 2709 0223 08       		.byte	8
 2710 0224 08       		.byte	8
 2711 0225 7F       		.byte	127
 2712 0226 3E       		.byte	62
 2713 0227 41       		.byte	65
 2714 0228 41       		.byte	65
 2715 0229 41       		.byte	65
 2716 022a 3E       		.byte	62
 2717 022b 7F       		.byte	127
 2718 022c 01       		.byte	1
 2719 022d 01       		.byte	1
 2720 022e 01       		.byte	1
 2721 022f 7F       		.byte	127
 2722 0230 7F       		.byte	127
 2723 0231 09       		.byte	9
 2724 0232 09       		.byte	9
 2725 0233 09       		.byte	9
 2726 0234 06       		.byte	6
 2727 0235 3E       		.byte	62
 2728 0236 41       		.byte	65
 2729 0237 41       		.byte	65
 2730 0238 41       		.byte	65
 2731 0239 22       		.byte	34
 2732 023a 01       		.byte	1
 2733 023b 01       		.byte	1
 2734 023c 7F       		.byte	127
 2735 023d 01       		.byte	1
 2736 023e 01       		.byte	1
 2737 023f 07       		.byte	7
 2738 0240 48       		.byte	72
 2739 0241 48       		.byte	72
 2740 0242 48       		.byte	72
 2741 0243 3F       		.byte	63
 2742 0244 0E       		.byte	14
 2743 0245 11       		.byte	17
 2744 0246 7F       		.byte	127
 2745 0247 11       		.byte	17
 2746 0248 0E       		.byte	14
 2747 0249 63       		.byte	99
 2748 024a 14       		.byte	20
 2749 024b 08       		.byte	8
 2750 024c 14       		.byte	20
 2751 024d 63       		.byte	99
 2752 024e 3F       		.byte	63
ARM GAS  /tmp/ccbMwiuG.s 			page 58


 2753 024f 20       		.byte	32
 2754 0250 20       		.byte	32
 2755 0251 3F       		.byte	63
 2756 0252 60       		.byte	96
 2757 0253 07       		.byte	7
 2758 0254 08       		.byte	8
 2759 0255 08       		.byte	8
 2760 0256 08       		.byte	8
 2761 0257 7F       		.byte	127
 2762 0258 7F       		.byte	127
 2763 0259 40       		.byte	64
 2764 025a 7E       		.byte	126
 2765 025b 40       		.byte	64
 2766 025c 7F       		.byte	127
 2767 025d 3F       		.byte	63
 2768 025e 20       		.byte	32
 2769 025f 3F       		.byte	63
 2770 0260 20       		.byte	32
 2771 0261 7F       		.byte	127
 2772 0262 01       		.byte	1
 2773 0263 7F       		.byte	127
 2774 0264 48       		.byte	72
 2775 0265 48       		.byte	72
 2776 0266 30       		.byte	48
 2777 0267 7F       		.byte	127
 2778 0268 48       		.byte	72
 2779 0269 30       		.byte	48
 2780 026a 00       		.byte	0
 2781 026b 7F       		.byte	127
 2782 026c 00       		.byte	0
 2783 026d 7F       		.byte	127
 2784 026e 48       		.byte	72
 2785 026f 48       		.byte	72
 2786 0270 30       		.byte	48
 2787 0271 22       		.byte	34
 2788 0272 41       		.byte	65
 2789 0273 49       		.byte	73
 2790 0274 49       		.byte	73
 2791 0275 3E       		.byte	62
 2792 0276 7F       		.byte	127
 2793 0277 08       		.byte	8
 2794 0278 3E       		.byte	62
 2795 0279 41       		.byte	65
 2796 027a 3E       		.byte	62
 2797 027b 46       		.byte	70
 2798 027c 29       		.byte	41
 2799 027d 19       		.byte	25
 2800 027e 09       		.byte	9
 2801 027f 7F       		.byte	127
 2802 0280 20       		.byte	32
 2803 0281 54       		.byte	84
 2804 0282 54       		.byte	84
 2805 0283 54       		.byte	84
 2806 0284 78       		.byte	120
 2807 0285 3C       		.byte	60
 2808 0286 4A       		.byte	74
 2809 0287 4A       		.byte	74
ARM GAS  /tmp/ccbMwiuG.s 			page 59


 2810 0288 4A       		.byte	74
 2811 0289 31       		.byte	49
 2812 028a 7C       		.byte	124
 2813 028b 54       		.byte	84
 2814 028c 54       		.byte	84
 2815 028d 28       		.byte	40
 2816 028e 00       		.byte	0
 2817 028f 7C       		.byte	124
 2818 0290 04       		.byte	4
 2819 0291 04       		.byte	4
 2820 0292 0C       		.byte	12
 2821 0293 00       		.byte	0
 2822 0294 60       		.byte	96
 2823 0295 3C       		.byte	60
 2824 0296 24       		.byte	36
 2825 0297 3C       		.byte	60
 2826 0298 60       		.byte	96
 2827 0299 38       		.byte	56
 2828 029a 54       		.byte	84
 2829 029b 54       		.byte	84
 2830 029c 54       		.byte	84
 2831 029d 18       		.byte	24
 2832 029e 6C       		.byte	108
 2833 029f 10       		.byte	16
 2834 02a0 7C       		.byte	124
 2835 02a1 10       		.byte	16
 2836 02a2 6C       		.byte	108
 2837 02a3 00       		.byte	0
 2838 02a4 44       		.byte	68
 2839 02a5 54       		.byte	84
 2840 02a6 54       		.byte	84
 2841 02a7 28       		.byte	40
 2842 02a8 7C       		.byte	124
 2843 02a9 20       		.byte	32
 2844 02aa 10       		.byte	16
 2845 02ab 08       		.byte	8
 2846 02ac 7C       		.byte	124
 2847 02ad 7C       		.byte	124
 2848 02ae 21       		.byte	33
 2849 02af 12       		.byte	18
 2850 02b0 09       		.byte	9
 2851 02b1 7C       		.byte	124
 2852 02b2 7C       		.byte	124
 2853 02b3 10       		.byte	16
 2854 02b4 28       		.byte	40
 2855 02b5 44       		.byte	68
 2856 02b6 00       		.byte	0
 2857 02b7 40       		.byte	64
 2858 02b8 38       		.byte	56
 2859 02b9 04       		.byte	4
 2860 02ba 04       		.byte	4
 2861 02bb 7C       		.byte	124
 2862 02bc 7C       		.byte	124
 2863 02bd 08       		.byte	8
 2864 02be 10       		.byte	16
 2865 02bf 08       		.byte	8
 2866 02c0 7C       		.byte	124
ARM GAS  /tmp/ccbMwiuG.s 			page 60


 2867 02c1 7C       		.byte	124
 2868 02c2 10       		.byte	16
 2869 02c3 10       		.byte	16
 2870 02c4 10       		.byte	16
 2871 02c5 7C       		.byte	124
 2872 02c6 38       		.byte	56
 2873 02c7 44       		.byte	68
 2874 02c8 44       		.byte	68
 2875 02c9 44       		.byte	68
 2876 02ca 38       		.byte	56
 2877 02cb 7C       		.byte	124
 2878 02cc 04       		.byte	4
 2879 02cd 04       		.byte	4
 2880 02ce 04       		.byte	4
 2881 02cf 7C       		.byte	124
 2882 02d0 7C       		.byte	124
 2883 02d1 14       		.byte	20
 2884 02d2 14       		.byte	20
 2885 02d3 14       		.byte	20
 2886 02d4 08       		.byte	8
 2887 02d5 38       		.byte	56
 2888 02d6 44       		.byte	68
 2889 02d7 44       		.byte	68
 2890 02d8 44       		.byte	68
 2891 02d9 00       		.byte	0
 2892 02da 04       		.byte	4
 2893 02db 04       		.byte	4
 2894 02dc 7C       		.byte	124
 2895 02dd 04       		.byte	4
 2896 02de 04       		.byte	4
 2897 02df 0C       		.byte	12
 2898 02e0 50       		.byte	80
 2899 02e1 50       		.byte	80
 2900 02e2 50       		.byte	80
 2901 02e3 3C       		.byte	60
 2902 02e4 08       		.byte	8
 2903 02e5 14       		.byte	20
 2904 02e6 7C       		.byte	124
 2905 02e7 14       		.byte	20
 2906 02e8 08       		.byte	8
 2907 02e9 44       		.byte	68
 2908 02ea 28       		.byte	40
 2909 02eb 10       		.byte	16
 2910 02ec 28       		.byte	40
 2911 02ed 44       		.byte	68
 2912 02ee 3C       		.byte	60
 2913 02ef 20       		.byte	32
 2914 02f0 20       		.byte	32
 2915 02f1 3C       		.byte	60
 2916 02f2 60       		.byte	96
 2917 02f3 0C       		.byte	12
 2918 02f4 10       		.byte	16
 2919 02f5 10       		.byte	16
 2920 02f6 10       		.byte	16
 2921 02f7 7C       		.byte	124
 2922 02f8 7C       		.byte	124
 2923 02f9 40       		.byte	64
ARM GAS  /tmp/ccbMwiuG.s 			page 61


 2924 02fa 7C       		.byte	124
 2925 02fb 40       		.byte	64
 2926 02fc 7C       		.byte	124
 2927 02fd 3C       		.byte	60
 2928 02fe 20       		.byte	32
 2929 02ff 3C       		.byte	60
 2930 0300 20       		.byte	32
 2931 0301 7C       		.byte	124
 2932 0302 04       		.byte	4
 2933 0303 7C       		.byte	124
 2934 0304 50       		.byte	80
 2935 0305 50       		.byte	80
 2936 0306 20       		.byte	32
 2937 0307 7C       		.byte	124
 2938 0308 50       		.byte	80
 2939 0309 20       		.byte	32
 2940 030a 00       		.byte	0
 2941 030b 7C       		.byte	124
 2942 030c 00       		.byte	0
 2943 030d 7C       		.byte	124
 2944 030e 50       		.byte	80
 2945 030f 50       		.byte	80
 2946 0310 20       		.byte	32
 2947 0311 28       		.byte	40
 2948 0312 44       		.byte	68
 2949 0313 54       		.byte	84
 2950 0314 54       		.byte	84
 2951 0315 38       		.byte	56
 2952 0316 7C       		.byte	124
 2953 0317 10       		.byte	16
 2954 0318 38       		.byte	56
 2955 0319 44       		.byte	68
 2956 031a 38       		.byte	56
 2957 031b 48       		.byte	72
 2958 031c 54       		.byte	84
 2959 031d 34       		.byte	52
 2960 031e 14       		.byte	20
 2961 031f 7C       		.byte	124
 2962              		.section	.rodata.LargeNumbers,"a",%progbits
 2963              		.align	2
 2964              		.set	.LANCHOR3,. + 0
 2967              	LargeNumbers:
 2968 0000 00       		.byte	0
 2969 0001 FC       		.byte	-4
 2970 0002 F8       		.byte	-8
 2971 0003 F2       		.byte	-14
 2972 0004 E6       		.byte	-26
 2973 0005 CE       		.byte	-50
 2974 0006 1E       		.byte	30
 2975 0007 3E       		.byte	62
 2976 0008 3E       		.byte	62
 2977 0009 3E       		.byte	62
 2978 000a 3E       		.byte	62
 2979 000b 3E       		.byte	62
 2980 000c 3E       		.byte	62
 2981 000d 3E       		.byte	62
 2982 000e 1E       		.byte	30
ARM GAS  /tmp/ccbMwiuG.s 			page 62


 2983 000f CE       		.byte	-50
 2984 0010 E6       		.byte	-26
 2985 0011 F2       		.byte	-14
 2986 0012 F8       		.byte	-8
 2987 0013 FC       		.byte	-4
 2988 0014 00       		.byte	0
 2989 0015 FF       		.byte	-1
 2990 0016 7F       		.byte	127
 2991 0017 3F       		.byte	63
 2992 0018 1F       		.byte	31
 2993 0019 0F       		.byte	15
 2994 001a 00       		.byte	0
 2995 001b 00       		.byte	0
 2996 001c 00       		.byte	0
 2997 001d 00       		.byte	0
 2998 001e 00       		.byte	0
 2999 001f 00       		.byte	0
 3000 0020 00       		.byte	0
 3001 0021 00       		.byte	0
 3002 0022 00       		.byte	0
 3003 0023 0F       		.byte	15
 3004 0024 1F       		.byte	31
 3005 0025 3F       		.byte	63
 3006 0026 7F       		.byte	127
 3007 0027 FF       		.byte	-1
 3008 0028 00       		.byte	0
 3009 0029 FE       		.byte	-2
 3010 002a FC       		.byte	-4
 3011 002b F8       		.byte	-8
 3012 002c F0       		.byte	-16
 3013 002d E0       		.byte	-32
 3014 002e 00       		.byte	0
 3015 002f 00       		.byte	0
 3016 0030 00       		.byte	0
 3017 0031 00       		.byte	0
 3018 0032 00       		.byte	0
 3019 0033 00       		.byte	0
 3020 0034 00       		.byte	0
 3021 0035 00       		.byte	0
 3022 0036 00       		.byte	0
 3023 0037 E0       		.byte	-32
 3024 0038 F0       		.byte	-16
 3025 0039 F8       		.byte	-8
 3026 003a FC       		.byte	-4
 3027 003b FE       		.byte	-2
 3028 003c 00       		.byte	0
 3029 003d 7F       		.byte	127
 3030 003e 3F       		.byte	63
 3031 003f 9F       		.byte	-97
 3032 0040 CF       		.byte	-49
 3033 0041 E7       		.byte	-25
 3034 0042 F0       		.byte	-16
 3035 0043 F8       		.byte	-8
 3036 0044 F8       		.byte	-8
 3037 0045 F8       		.byte	-8
 3038 0046 F8       		.byte	-8
 3039 0047 F8       		.byte	-8
ARM GAS  /tmp/ccbMwiuG.s 			page 63


 3040 0048 F8       		.byte	-8
 3041 0049 F8       		.byte	-8
 3042 004a F0       		.byte	-16
 3043 004b E7       		.byte	-25
 3044 004c CF       		.byte	-49
 3045 004d 9F       		.byte	-97
 3046 004e 3F       		.byte	63
 3047 004f 7F       		.byte	127
 3048 0050 00       		.byte	0
 3049 0051 00       		.byte	0
 3050 0052 00       		.byte	0
 3051 0053 00       		.byte	0
 3052 0054 00       		.byte	0
 3053 0055 00       		.byte	0
 3054 0056 00       		.byte	0
 3055 0057 00       		.byte	0
 3056 0058 00       		.byte	0
 3057 0059 00       		.byte	0
 3058 005a 00       		.byte	0
 3059 005b 00       		.byte	0
 3060 005c 00       		.byte	0
 3061 005d 00       		.byte	0
 3062 005e 00       		.byte	0
 3063 005f C0       		.byte	-64
 3064 0060 E0       		.byte	-32
 3065 0061 F0       		.byte	-16
 3066 0062 F8       		.byte	-8
 3067 0063 FC       		.byte	-4
 3068 0064 00       		.byte	0
 3069 0065 00       		.byte	0
 3070 0066 00       		.byte	0
 3071 0067 00       		.byte	0
 3072 0068 00       		.byte	0
 3073 0069 00       		.byte	0
 3074 006a 00       		.byte	0
 3075 006b 00       		.byte	0
 3076 006c 00       		.byte	0
 3077 006d 00       		.byte	0
 3078 006e 00       		.byte	0
 3079 006f 00       		.byte	0
 3080 0070 00       		.byte	0
 3081 0071 00       		.byte	0
 3082 0072 00       		.byte	0
 3083 0073 0F       		.byte	15
 3084 0074 1F       		.byte	31
 3085 0075 3F       		.byte	63
 3086 0076 7F       		.byte	127
 3087 0077 FF       		.byte	-1
 3088 0078 00       		.byte	0
 3089 0079 00       		.byte	0
 3090 007a 00       		.byte	0
 3091 007b 00       		.byte	0
 3092 007c 00       		.byte	0
 3093 007d 00       		.byte	0
 3094 007e 00       		.byte	0
 3095 007f 00       		.byte	0
 3096 0080 00       		.byte	0
ARM GAS  /tmp/ccbMwiuG.s 			page 64


 3097 0081 00       		.byte	0
 3098 0082 00       		.byte	0
 3099 0083 00       		.byte	0
 3100 0084 00       		.byte	0
 3101 0085 00       		.byte	0
 3102 0086 00       		.byte	0
 3103 0087 E0       		.byte	-32
 3104 0088 F0       		.byte	-16
 3105 0089 F8       		.byte	-8
 3106 008a FC       		.byte	-4
 3107 008b FE       		.byte	-2
 3108 008c 00       		.byte	0
 3109 008d 00       		.byte	0
 3110 008e 00       		.byte	0
 3111 008f 00       		.byte	0
 3112 0090 00       		.byte	0
 3113 0091 00       		.byte	0
 3114 0092 00       		.byte	0
 3115 0093 00       		.byte	0
 3116 0094 00       		.byte	0
 3117 0095 00       		.byte	0
 3118 0096 00       		.byte	0
 3119 0097 00       		.byte	0
 3120 0098 00       		.byte	0
 3121 0099 00       		.byte	0
 3122 009a 00       		.byte	0
 3123 009b 07       		.byte	7
 3124 009c 0F       		.byte	15
 3125 009d 1F       		.byte	31
 3126 009e 3F       		.byte	63
 3127 009f 7F       		.byte	127
 3128 00a0 00       		.byte	0
 3129 00a1 00       		.byte	0
 3130 00a2 00       		.byte	0
 3131 00a3 02       		.byte	2
 3132 00a4 06       		.byte	6
 3133 00a5 0E       		.byte	14
 3134 00a6 1E       		.byte	30
 3135 00a7 3E       		.byte	62
 3136 00a8 3E       		.byte	62
 3137 00a9 3E       		.byte	62
 3138 00aa 3E       		.byte	62
 3139 00ab 3E       		.byte	62
 3140 00ac 3E       		.byte	62
 3141 00ad 3E       		.byte	62
 3142 00ae 1E       		.byte	30
 3143 00af CE       		.byte	-50
 3144 00b0 E6       		.byte	-26
 3145 00b1 F2       		.byte	-14
 3146 00b2 F8       		.byte	-8
 3147 00b3 FC       		.byte	-4
 3148 00b4 00       		.byte	0
 3149 00b5 00       		.byte	0
 3150 00b6 00       		.byte	0
 3151 00b7 80       		.byte	-128
 3152 00b8 C0       		.byte	-64
 3153 00b9 C0       		.byte	-64
ARM GAS  /tmp/ccbMwiuG.s 			page 65


 3154 00ba C0       		.byte	-64
 3155 00bb C0       		.byte	-64
 3156 00bc C0       		.byte	-64
 3157 00bd C0       		.byte	-64
 3158 00be C0       		.byte	-64
 3159 00bf C0       		.byte	-64
 3160 00c0 C0       		.byte	-64
 3161 00c1 C0       		.byte	-64
 3162 00c2 C0       		.byte	-64
 3163 00c3 C7       		.byte	-57
 3164 00c4 CF       		.byte	-49
 3165 00c5 9F       		.byte	-97
 3166 00c6 3F       		.byte	63
 3167 00c7 7F       		.byte	127
 3168 00c8 00       		.byte	0
 3169 00c9 FC       		.byte	-4
 3170 00ca F9       		.byte	-7
 3171 00cb F3       		.byte	-13
 3172 00cc E7       		.byte	-25
 3173 00cd C7       		.byte	-57
 3174 00ce 07       		.byte	7
 3175 00cf 07       		.byte	7
 3176 00d0 07       		.byte	7
 3177 00d1 07       		.byte	7
 3178 00d2 07       		.byte	7
 3179 00d3 07       		.byte	7
 3180 00d4 07       		.byte	7
 3181 00d5 07       		.byte	7
 3182 00d6 07       		.byte	7
 3183 00d7 07       		.byte	7
 3184 00d8 07       		.byte	7
 3185 00d9 03       		.byte	3
 3186 00da 01       		.byte	1
 3187 00db 00       		.byte	0
 3188 00dc 00       		.byte	0
 3189 00dd 7F       		.byte	127
 3190 00de 3F       		.byte	63
 3191 00df 9F       		.byte	-97
 3192 00e0 CF       		.byte	-49
 3193 00e1 E7       		.byte	-25
 3194 00e2 F0       		.byte	-16
 3195 00e3 F0       		.byte	-16
 3196 00e4 F8       		.byte	-8
 3197 00e5 F8       		.byte	-8
 3198 00e6 F8       		.byte	-8
 3199 00e7 F8       		.byte	-8
 3200 00e8 F8       		.byte	-8
 3201 00e9 F8       		.byte	-8
 3202 00ea F0       		.byte	-16
 3203 00eb E0       		.byte	-32
 3204 00ec C0       		.byte	-64
 3205 00ed 80       		.byte	-128
 3206 00ee 00       		.byte	0
 3207 00ef 00       		.byte	0
 3208 00f0 00       		.byte	0
 3209 00f1 00       		.byte	0
 3210 00f2 00       		.byte	0
ARM GAS  /tmp/ccbMwiuG.s 			page 66


 3211 00f3 02       		.byte	2
 3212 00f4 06       		.byte	6
 3213 00f5 0E       		.byte	14
 3214 00f6 1E       		.byte	30
 3215 00f7 3E       		.byte	62
 3216 00f8 3E       		.byte	62
 3217 00f9 3E       		.byte	62
 3218 00fa 3E       		.byte	62
 3219 00fb 3E       		.byte	62
 3220 00fc 3E       		.byte	62
 3221 00fd 3E       		.byte	62
 3222 00fe 1E       		.byte	30
 3223 00ff CE       		.byte	-50
 3224 0100 E6       		.byte	-26
 3225 0101 F2       		.byte	-14
 3226 0102 F8       		.byte	-8
 3227 0103 FC       		.byte	-4
 3228 0104 00       		.byte	0
 3229 0105 00       		.byte	0
 3230 0106 00       		.byte	0
 3231 0107 80       		.byte	-128
 3232 0108 C0       		.byte	-64
 3233 0109 C0       		.byte	-64
 3234 010a C0       		.byte	-64
 3235 010b C0       		.byte	-64
 3236 010c C0       		.byte	-64
 3237 010d C0       		.byte	-64
 3238 010e C0       		.byte	-64
 3239 010f C0       		.byte	-64
 3240 0110 C0       		.byte	-64
 3241 0111 C0       		.byte	-64
 3242 0112 C0       		.byte	-64
 3243 0113 C7       		.byte	-57
 3244 0114 CF       		.byte	-49
 3245 0115 9F       		.byte	-97
 3246 0116 3F       		.byte	63
 3247 0117 7F       		.byte	127
 3248 0118 00       		.byte	0
 3249 0119 00       		.byte	0
 3250 011a 01       		.byte	1
 3251 011b 03       		.byte	3
 3252 011c 07       		.byte	7
 3253 011d 07       		.byte	7
 3254 011e 07       		.byte	7
 3255 011f 07       		.byte	7
 3256 0120 07       		.byte	7
 3257 0121 07       		.byte	7
 3258 0122 07       		.byte	7
 3259 0123 07       		.byte	7
 3260 0124 07       		.byte	7
 3261 0125 07       		.byte	7
 3262 0126 07       		.byte	7
 3263 0127 C7       		.byte	-57
 3264 0128 E7       		.byte	-25
 3265 0129 F3       		.byte	-13
 3266 012a F9       		.byte	-7
 3267 012b FC       		.byte	-4
ARM GAS  /tmp/ccbMwiuG.s 			page 67


 3268 012c 00       		.byte	0
 3269 012d 00       		.byte	0
 3270 012e 00       		.byte	0
 3271 012f 80       		.byte	-128
 3272 0130 C0       		.byte	-64
 3273 0131 E0       		.byte	-32
 3274 0132 F0       		.byte	-16
 3275 0133 F0       		.byte	-16
 3276 0134 F8       		.byte	-8
 3277 0135 F8       		.byte	-8
 3278 0136 F8       		.byte	-8
 3279 0137 F8       		.byte	-8
 3280 0138 F8       		.byte	-8
 3281 0139 F8       		.byte	-8
 3282 013a F0       		.byte	-16
 3283 013b E7       		.byte	-25
 3284 013c CF       		.byte	-49
 3285 013d 9F       		.byte	-97
 3286 013e 3F       		.byte	63
 3287 013f 7F       		.byte	127
 3288 0140 00       		.byte	0
 3289 0141 FC       		.byte	-4
 3290 0142 F8       		.byte	-8
 3291 0143 F0       		.byte	-16
 3292 0144 E0       		.byte	-32
 3293 0145 C0       		.byte	-64
 3294 0146 00       		.byte	0
 3295 0147 00       		.byte	0
 3296 0148 00       		.byte	0
 3297 0149 00       		.byte	0
 3298 014a 00       		.byte	0
 3299 014b 00       		.byte	0
 3300 014c 00       		.byte	0
 3301 014d 00       		.byte	0
 3302 014e 00       		.byte	0
 3303 014f C0       		.byte	-64
 3304 0150 E0       		.byte	-32
 3305 0151 F0       		.byte	-16
 3306 0152 F8       		.byte	-8
 3307 0153 FC       		.byte	-4
 3308 0154 00       		.byte	0
 3309 0155 7F       		.byte	127
 3310 0156 3F       		.byte	63
 3311 0157 9F       		.byte	-97
 3312 0158 CF       		.byte	-49
 3313 0159 C7       		.byte	-57
 3314 015a C0       		.byte	-64
 3315 015b C0       		.byte	-64
 3316 015c C0       		.byte	-64
 3317 015d C0       		.byte	-64
 3318 015e C0       		.byte	-64
 3319 015f C0       		.byte	-64
 3320 0160 C0       		.byte	-64
 3321 0161 C0       		.byte	-64
 3322 0162 C0       		.byte	-64
 3323 0163 C7       		.byte	-57
 3324 0164 CF       		.byte	-49
ARM GAS  /tmp/ccbMwiuG.s 			page 68


 3325 0165 9F       		.byte	-97
 3326 0166 3F       		.byte	63
 3327 0167 7F       		.byte	127
 3328 0168 00       		.byte	0
 3329 0169 00       		.byte	0
 3330 016a 01       		.byte	1
 3331 016b 03       		.byte	3
 3332 016c 07       		.byte	7
 3333 016d 07       		.byte	7
 3334 016e 07       		.byte	7
 3335 016f 07       		.byte	7
 3336 0170 07       		.byte	7
 3337 0171 07       		.byte	7
 3338 0172 07       		.byte	7
 3339 0173 07       		.byte	7
 3340 0174 07       		.byte	7
 3341 0175 07       		.byte	7
 3342 0176 07       		.byte	7
 3343 0177 C7       		.byte	-57
 3344 0178 E7       		.byte	-25
 3345 0179 F3       		.byte	-13
 3346 017a F9       		.byte	-7
 3347 017b FC       		.byte	-4
 3348 017c 00       		.byte	0
 3349 017d 00       		.byte	0
 3350 017e 00       		.byte	0
 3351 017f 00       		.byte	0
 3352 0180 00       		.byte	0
 3353 0181 00       		.byte	0
 3354 0182 00       		.byte	0
 3355 0183 00       		.byte	0
 3356 0184 00       		.byte	0
 3357 0185 00       		.byte	0
 3358 0186 00       		.byte	0
 3359 0187 00       		.byte	0
 3360 0188 00       		.byte	0
 3361 0189 00       		.byte	0
 3362 018a 00       		.byte	0
 3363 018b 07       		.byte	7
 3364 018c 0F       		.byte	15
 3365 018d 1F       		.byte	31
 3366 018e 3F       		.byte	63
 3367 018f 7F       		.byte	127
 3368 0190 00       		.byte	0
 3369 0191 FC       		.byte	-4
 3370 0192 F8       		.byte	-8
 3371 0193 F2       		.byte	-14
 3372 0194 E6       		.byte	-26
 3373 0195 CE       		.byte	-50
 3374 0196 1E       		.byte	30
 3375 0197 3E       		.byte	62
 3376 0198 3E       		.byte	62
 3377 0199 3E       		.byte	62
 3378 019a 3E       		.byte	62
 3379 019b 3E       		.byte	62
 3380 019c 3E       		.byte	62
 3381 019d 3E       		.byte	62
ARM GAS  /tmp/ccbMwiuG.s 			page 69


 3382 019e 1E       		.byte	30
 3383 019f 0E       		.byte	14
 3384 01a0 06       		.byte	6
 3385 01a1 02       		.byte	2
 3386 01a2 00       		.byte	0
 3387 01a3 00       		.byte	0
 3388 01a4 00       		.byte	0
 3389 01a5 7F       		.byte	127
 3390 01a6 3F       		.byte	63
 3391 01a7 9F       		.byte	-97
 3392 01a8 CF       		.byte	-49
 3393 01a9 C7       		.byte	-57
 3394 01aa C0       		.byte	-64
 3395 01ab C0       		.byte	-64
 3396 01ac C0       		.byte	-64
 3397 01ad C0       		.byte	-64
 3398 01ae C0       		.byte	-64
 3399 01af C0       		.byte	-64
 3400 01b0 C0       		.byte	-64
 3401 01b1 C0       		.byte	-64
 3402 01b2 C0       		.byte	-64
 3403 01b3 C0       		.byte	-64
 3404 01b4 C0       		.byte	-64
 3405 01b5 80       		.byte	-128
 3406 01b6 00       		.byte	0
 3407 01b7 00       		.byte	0
 3408 01b8 00       		.byte	0
 3409 01b9 00       		.byte	0
 3410 01ba 01       		.byte	1
 3411 01bb 03       		.byte	3
 3412 01bc 07       		.byte	7
 3413 01bd 07       		.byte	7
 3414 01be 07       		.byte	7
 3415 01bf 07       		.byte	7
 3416 01c0 07       		.byte	7
 3417 01c1 07       		.byte	7
 3418 01c2 07       		.byte	7
 3419 01c3 07       		.byte	7
 3420 01c4 07       		.byte	7
 3421 01c5 07       		.byte	7
 3422 01c6 07       		.byte	7
 3423 01c7 C7       		.byte	-57
 3424 01c8 E7       		.byte	-25
 3425 01c9 F3       		.byte	-13
 3426 01ca F9       		.byte	-7
 3427 01cb FC       		.byte	-4
 3428 01cc 00       		.byte	0
 3429 01cd 00       		.byte	0
 3430 01ce 00       		.byte	0
 3431 01cf 80       		.byte	-128
 3432 01d0 C0       		.byte	-64
 3433 01d1 E0       		.byte	-32
 3434 01d2 F0       		.byte	-16
 3435 01d3 F0       		.byte	-16
 3436 01d4 F8       		.byte	-8
 3437 01d5 F8       		.byte	-8
 3438 01d6 F8       		.byte	-8
ARM GAS  /tmp/ccbMwiuG.s 			page 70


 3439 01d7 F8       		.byte	-8
 3440 01d8 F8       		.byte	-8
 3441 01d9 F8       		.byte	-8
 3442 01da F0       		.byte	-16
 3443 01db E7       		.byte	-25
 3444 01dc CF       		.byte	-49
 3445 01dd 9F       		.byte	-97
 3446 01de 3F       		.byte	63
 3447 01df 7F       		.byte	127
 3448 01e0 00       		.byte	0
 3449 01e1 FC       		.byte	-4
 3450 01e2 F8       		.byte	-8
 3451 01e3 F2       		.byte	-14
 3452 01e4 E6       		.byte	-26
 3453 01e5 CE       		.byte	-50
 3454 01e6 1E       		.byte	30
 3455 01e7 3E       		.byte	62
 3456 01e8 3E       		.byte	62
 3457 01e9 3E       		.byte	62
 3458 01ea 3E       		.byte	62
 3459 01eb 3E       		.byte	62
 3460 01ec 3E       		.byte	62
 3461 01ed 3E       		.byte	62
 3462 01ee 1E       		.byte	30
 3463 01ef 0E       		.byte	14
 3464 01f0 06       		.byte	6
 3465 01f1 02       		.byte	2
 3466 01f2 00       		.byte	0
 3467 01f3 00       		.byte	0
 3468 01f4 00       		.byte	0
 3469 01f5 7F       		.byte	127
 3470 01f6 3F       		.byte	63
 3471 01f7 9F       		.byte	-97
 3472 01f8 CF       		.byte	-49
 3473 01f9 C7       		.byte	-57
 3474 01fa C0       		.byte	-64
 3475 01fb C0       		.byte	-64
 3476 01fc C0       		.byte	-64
 3477 01fd C0       		.byte	-64
 3478 01fe C0       		.byte	-64
 3479 01ff C0       		.byte	-64
 3480 0200 C0       		.byte	-64
 3481 0201 C0       		.byte	-64
 3482 0202 C0       		.byte	-64
 3483 0203 C0       		.byte	-64
 3484 0204 C0       		.byte	-64
 3485 0205 80       		.byte	-128
 3486 0206 00       		.byte	0
 3487 0207 00       		.byte	0
 3488 0208 00       		.byte	0
 3489 0209 FC       		.byte	-4
 3490 020a F9       		.byte	-7
 3491 020b F3       		.byte	-13
 3492 020c E7       		.byte	-25
 3493 020d C7       		.byte	-57
 3494 020e 07       		.byte	7
 3495 020f 07       		.byte	7
ARM GAS  /tmp/ccbMwiuG.s 			page 71


 3496 0210 07       		.byte	7
 3497 0211 07       		.byte	7
 3498 0212 07       		.byte	7
 3499 0213 07       		.byte	7
 3500 0214 07       		.byte	7
 3501 0215 07       		.byte	7
 3502 0216 07       		.byte	7
 3503 0217 C7       		.byte	-57
 3504 0218 E7       		.byte	-25
 3505 0219 F3       		.byte	-13
 3506 021a F9       		.byte	-7
 3507 021b FC       		.byte	-4
 3508 021c 00       		.byte	0
 3509 021d 7F       		.byte	127
 3510 021e 3F       		.byte	63
 3511 021f 9F       		.byte	-97
 3512 0220 CF       		.byte	-49
 3513 0221 E7       		.byte	-25
 3514 0222 F0       		.byte	-16
 3515 0223 F0       		.byte	-16
 3516 0224 F8       		.byte	-8
 3517 0225 F8       		.byte	-8
 3518 0226 F8       		.byte	-8
 3519 0227 F8       		.byte	-8
 3520 0228 F8       		.byte	-8
 3521 0229 F8       		.byte	-8
 3522 022a F0       		.byte	-16
 3523 022b E7       		.byte	-25
 3524 022c CF       		.byte	-49
 3525 022d 9F       		.byte	-97
 3526 022e 3F       		.byte	63
 3527 022f 7F       		.byte	127
 3528 0230 00       		.byte	0
 3529 0231 00       		.byte	0
 3530 0232 00       		.byte	0
 3531 0233 02       		.byte	2
 3532 0234 06       		.byte	6
 3533 0235 0E       		.byte	14
 3534 0236 1E       		.byte	30
 3535 0237 3E       		.byte	62
 3536 0238 3E       		.byte	62
 3537 0239 3E       		.byte	62
 3538 023a 3E       		.byte	62
 3539 023b 3E       		.byte	62
 3540 023c 3E       		.byte	62
 3541 023d 3E       		.byte	62
 3542 023e 1E       		.byte	30
 3543 023f CE       		.byte	-50
 3544 0240 E6       		.byte	-26
 3545 0241 F2       		.byte	-14
 3546 0242 F8       		.byte	-8
 3547 0243 FC       		.byte	-4
 3548 0244 00       		.byte	0
 3549 0245 00       		.byte	0
 3550 0246 00       		.byte	0
 3551 0247 00       		.byte	0
 3552 0248 00       		.byte	0
ARM GAS  /tmp/ccbMwiuG.s 			page 72


 3553 0249 00       		.byte	0
 3554 024a 00       		.byte	0
 3555 024b 00       		.byte	0
 3556 024c 00       		.byte	0
 3557 024d 00       		.byte	0
 3558 024e 00       		.byte	0
 3559 024f 00       		.byte	0
 3560 0250 00       		.byte	0
 3561 0251 00       		.byte	0
 3562 0252 00       		.byte	0
 3563 0253 0F       		.byte	15
 3564 0254 1F       		.byte	31
 3565 0255 3F       		.byte	63
 3566 0256 7F       		.byte	127
 3567 0257 FF       		.byte	-1
 3568 0258 00       		.byte	0
 3569 0259 00       		.byte	0
 3570 025a 00       		.byte	0
 3571 025b 00       		.byte	0
 3572 025c 00       		.byte	0
 3573 025d 00       		.byte	0
 3574 025e 00       		.byte	0
 3575 025f 00       		.byte	0
 3576 0260 00       		.byte	0
 3577 0261 00       		.byte	0
 3578 0262 00       		.byte	0
 3579 0263 00       		.byte	0
 3580 0264 00       		.byte	0
 3581 0265 00       		.byte	0
 3582 0266 00       		.byte	0
 3583 0267 E0       		.byte	-32
 3584 0268 F0       		.byte	-16
 3585 0269 F8       		.byte	-8
 3586 026a FC       		.byte	-4
 3587 026b FE       		.byte	-2
 3588 026c 00       		.byte	0
 3589 026d 00       		.byte	0
 3590 026e 00       		.byte	0
 3591 026f 00       		.byte	0
 3592 0270 00       		.byte	0
 3593 0271 00       		.byte	0
 3594 0272 00       		.byte	0
 3595 0273 00       		.byte	0
 3596 0274 00       		.byte	0
 3597 0275 00       		.byte	0
 3598 0276 00       		.byte	0
 3599 0277 00       		.byte	0
 3600 0278 00       		.byte	0
 3601 0279 00       		.byte	0
 3602 027a 00       		.byte	0
 3603 027b 07       		.byte	7
 3604 027c 0F       		.byte	15
 3605 027d 1F       		.byte	31
 3606 027e 3F       		.byte	63
 3607 027f 7F       		.byte	127
 3608 0280 00       		.byte	0
 3609 0281 FC       		.byte	-4
ARM GAS  /tmp/ccbMwiuG.s 			page 73


 3610 0282 F8       		.byte	-8
 3611 0283 F2       		.byte	-14
 3612 0284 E6       		.byte	-26
 3613 0285 CE       		.byte	-50
 3614 0286 1E       		.byte	30
 3615 0287 3E       		.byte	62
 3616 0288 3E       		.byte	62
 3617 0289 3E       		.byte	62
 3618 028a 3E       		.byte	62
 3619 028b 3E       		.byte	62
 3620 028c 3E       		.byte	62
 3621 028d 3E       		.byte	62
 3622 028e 1E       		.byte	30
 3623 028f CE       		.byte	-50
 3624 0290 E6       		.byte	-26
 3625 0291 F2       		.byte	-14
 3626 0292 F8       		.byte	-8
 3627 0293 FC       		.byte	-4
 3628 0294 00       		.byte	0
 3629 0295 7F       		.byte	127
 3630 0296 3F       		.byte	63
 3631 0297 9F       		.byte	-97
 3632 0298 CF       		.byte	-49
 3633 0299 C7       		.byte	-57
 3634 029a C0       		.byte	-64
 3635 029b C0       		.byte	-64
 3636 029c C0       		.byte	-64
 3637 029d C0       		.byte	-64
 3638 029e C0       		.byte	-64
 3639 029f C0       		.byte	-64
 3640 02a0 C0       		.byte	-64
 3641 02a1 C0       		.byte	-64
 3642 02a2 C0       		.byte	-64
 3643 02a3 C7       		.byte	-57
 3644 02a4 CF       		.byte	-49
 3645 02a5 9F       		.byte	-97
 3646 02a6 3F       		.byte	63
 3647 02a7 7F       		.byte	127
 3648 02a8 00       		.byte	0
 3649 02a9 FC       		.byte	-4
 3650 02aa F9       		.byte	-7
 3651 02ab F3       		.byte	-13
 3652 02ac E7       		.byte	-25
 3653 02ad C7       		.byte	-57
 3654 02ae 07       		.byte	7
 3655 02af 07       		.byte	7
 3656 02b0 07       		.byte	7
 3657 02b1 07       		.byte	7
 3658 02b2 07       		.byte	7
 3659 02b3 07       		.byte	7
 3660 02b4 07       		.byte	7
 3661 02b5 07       		.byte	7
 3662 02b6 07       		.byte	7
 3663 02b7 C7       		.byte	-57
 3664 02b8 E7       		.byte	-25
 3665 02b9 F3       		.byte	-13
 3666 02ba F9       		.byte	-7
ARM GAS  /tmp/ccbMwiuG.s 			page 74


 3667 02bb FC       		.byte	-4
 3668 02bc 00       		.byte	0
 3669 02bd 7F       		.byte	127
 3670 02be 3F       		.byte	63
 3671 02bf 9F       		.byte	-97
 3672 02c0 CF       		.byte	-49
 3673 02c1 E7       		.byte	-25
 3674 02c2 F0       		.byte	-16
 3675 02c3 F0       		.byte	-16
 3676 02c4 F8       		.byte	-8
 3677 02c5 F8       		.byte	-8
 3678 02c6 F8       		.byte	-8
 3679 02c7 F8       		.byte	-8
 3680 02c8 F8       		.byte	-8
 3681 02c9 F8       		.byte	-8
 3682 02ca F0       		.byte	-16
 3683 02cb E7       		.byte	-25
 3684 02cc CF       		.byte	-49
 3685 02cd 9F       		.byte	-97
 3686 02ce 3F       		.byte	63
 3687 02cf 7F       		.byte	127
 3688 02d0 00       		.byte	0
 3689 02d1 FC       		.byte	-4
 3690 02d2 F8       		.byte	-8
 3691 02d3 F2       		.byte	-14
 3692 02d4 E6       		.byte	-26
 3693 02d5 CE       		.byte	-50
 3694 02d6 1E       		.byte	30
 3695 02d7 3E       		.byte	62
 3696 02d8 3E       		.byte	62
 3697 02d9 3E       		.byte	62
 3698 02da 3E       		.byte	62
 3699 02db 3E       		.byte	62
 3700 02dc 3E       		.byte	62
 3701 02dd 3E       		.byte	62
 3702 02de 1E       		.byte	30
 3703 02df CE       		.byte	-50
 3704 02e0 E6       		.byte	-26
 3705 02e1 F2       		.byte	-14
 3706 02e2 F8       		.byte	-8
 3707 02e3 FC       		.byte	-4
 3708 02e4 00       		.byte	0
 3709 02e5 7F       		.byte	127
 3710 02e6 3F       		.byte	63
 3711 02e7 9F       		.byte	-97
 3712 02e8 CF       		.byte	-49
 3713 02e9 C7       		.byte	-57
 3714 02ea C0       		.byte	-64
 3715 02eb C0       		.byte	-64
 3716 02ec C0       		.byte	-64
 3717 02ed C0       		.byte	-64
 3718 02ee C0       		.byte	-64
 3719 02ef C0       		.byte	-64
 3720 02f0 C0       		.byte	-64
 3721 02f1 C0       		.byte	-64
 3722 02f2 C0       		.byte	-64
 3723 02f3 C7       		.byte	-57
ARM GAS  /tmp/ccbMwiuG.s 			page 75


 3724 02f4 CF       		.byte	-49
 3725 02f5 9F       		.byte	-97
 3726 02f6 3F       		.byte	63
 3727 02f7 7F       		.byte	127
 3728 02f8 00       		.byte	0
 3729 02f9 00       		.byte	0
 3730 02fa 01       		.byte	1
 3731 02fb 03       		.byte	3
 3732 02fc 07       		.byte	7
 3733 02fd 07       		.byte	7
 3734 02fe 07       		.byte	7
 3735 02ff 07       		.byte	7
 3736 0300 07       		.byte	7
 3737 0301 07       		.byte	7
 3738 0302 07       		.byte	7
 3739 0303 07       		.byte	7
 3740 0304 07       		.byte	7
 3741 0305 07       		.byte	7
 3742 0306 07       		.byte	7
 3743 0307 C7       		.byte	-57
 3744 0308 E7       		.byte	-25
 3745 0309 F3       		.byte	-13
 3746 030a F9       		.byte	-7
 3747 030b FC       		.byte	-4
 3748 030c 00       		.byte	0
 3749 030d 00       		.byte	0
 3750 030e 00       		.byte	0
 3751 030f 80       		.byte	-128
 3752 0310 C0       		.byte	-64
 3753 0311 E0       		.byte	-32
 3754 0312 F0       		.byte	-16
 3755 0313 F0       		.byte	-16
 3756 0314 F8       		.byte	-8
 3757 0315 F8       		.byte	-8
 3758 0316 F8       		.byte	-8
 3759 0317 F8       		.byte	-8
 3760 0318 F8       		.byte	-8
 3761 0319 F8       		.byte	-8
 3762 031a F0       		.byte	-16
 3763 031b E7       		.byte	-25
 3764 031c CF       		.byte	-49
 3765 031d 9F       		.byte	-97
 3766 031e 3F       		.byte	63
 3767 031f 7F       		.byte	127
 3768 0320 00       		.byte	0
 3769 0321 00       		.byte	0
 3770 0322 00       		.byte	0
 3771 0323 00       		.byte	0
 3772 0324 00       		.byte	0
 3773 0325 00       		.byte	0
 3774 0326 00       		.byte	0
 3775 0327 00       		.byte	0
 3776 0328 00       		.byte	0
 3777 0329 00       		.byte	0
 3778 032a 00       		.byte	0
 3779 032b 00       		.byte	0
 3780 032c 00       		.byte	0
ARM GAS  /tmp/ccbMwiuG.s 			page 76


 3781 032d 00       		.byte	0
 3782 032e 00       		.byte	0
 3783 032f 00       		.byte	0
 3784 0330 00       		.byte	0
 3785 0331 00       		.byte	0
 3786 0332 00       		.byte	0
 3787 0333 00       		.byte	0
 3788 0334 00       		.byte	0
 3789 0335 00       		.byte	0
 3790 0336 00       		.byte	0
 3791 0337 C0       		.byte	-64
 3792 0338 C0       		.byte	-64
 3793 0339 C0       		.byte	-64
 3794 033a C0       		.byte	-64
 3795 033b C0       		.byte	-64
 3796 033c FE       		.byte	-2
 3797 033d FE       		.byte	-2
 3798 033e FE       		.byte	-2
 3799 033f FE       		.byte	-2
 3800 0340 FE       		.byte	-2
 3801 0341 C0       		.byte	-64
 3802 0342 C0       		.byte	-64
 3803 0343 C0       		.byte	-64
 3804 0344 C0       		.byte	-64
 3805 0345 C0       		.byte	-64
 3806 0346 00       		.byte	0
 3807 0347 00       		.byte	0
 3808 0348 00       		.byte	0
 3809 0349 00       		.byte	0
 3810 034a 00       		.byte	0
 3811 034b 07       		.byte	7
 3812 034c 07       		.byte	7
 3813 034d 07       		.byte	7
 3814 034e 07       		.byte	7
 3815 034f 07       		.byte	7
 3816 0350 FF       		.byte	-1
 3817 0351 FF       		.byte	-1
 3818 0352 FF       		.byte	-1
 3819 0353 FF       		.byte	-1
 3820 0354 FF       		.byte	-1
 3821 0355 07       		.byte	7
 3822 0356 07       		.byte	7
 3823 0357 07       		.byte	7
 3824 0358 07       		.byte	7
 3825 0359 07       		.byte	7
 3826 035a 00       		.byte	0
 3827 035b 00       		.byte	0
 3828 035c 00       		.byte	0
 3829 035d 00       		.byte	0
 3830 035e 00       		.byte	0
 3831 035f 00       		.byte	0
 3832 0360 00       		.byte	0
 3833 0361 00       		.byte	0
 3834 0362 00       		.byte	0
 3835 0363 00       		.byte	0
 3836 0364 00       		.byte	0
 3837 0365 00       		.byte	0
ARM GAS  /tmp/ccbMwiuG.s 			page 77


 3838 0366 00       		.byte	0
 3839 0367 00       		.byte	0
 3840 0368 00       		.byte	0
 3841 0369 00       		.byte	0
 3842 036a 00       		.byte	0
 3843 036b 00       		.byte	0
 3844 036c 00       		.byte	0
 3845 036d 00       		.byte	0
 3846 036e 00       		.byte	0
 3847 036f 00       		.byte	0
 3848 0370 00       		.byte	0
 3849 0371 00       		.byte	0
 3850 0372 00       		.byte	0
 3851 0373 00       		.byte	0
 3852 0374 00       		.byte	0
 3853 0375 00       		.byte	0
 3854 0376 00       		.byte	0
 3855 0377 00       		.byte	0
 3856 0378 00       		.byte	0
 3857 0379 00       		.byte	0
 3858 037a 00       		.byte	0
 3859 037b 00       		.byte	0
 3860 037c 00       		.byte	0
 3861 037d 00       		.byte	0
 3862 037e 00       		.byte	0
 3863 037f 00       		.byte	0
 3864 0380 00       		.byte	0
 3865 0381 00       		.byte	0
 3866 0382 00       		.byte	0
 3867 0383 00       		.byte	0
 3868 0384 00       		.byte	0
 3869 0385 00       		.byte	0
 3870 0386 00       		.byte	0
 3871 0387 C0       		.byte	-64
 3872 0388 C0       		.byte	-64
 3873 0389 C0       		.byte	-64
 3874 038a C0       		.byte	-64
 3875 038b C0       		.byte	-64
 3876 038c C0       		.byte	-64
 3877 038d C0       		.byte	-64
 3878 038e C0       		.byte	-64
 3879 038f C0       		.byte	-64
 3880 0390 C0       		.byte	-64
 3881 0391 C0       		.byte	-64
 3882 0392 C0       		.byte	-64
 3883 0393 C0       		.byte	-64
 3884 0394 C0       		.byte	-64
 3885 0395 C0       		.byte	-64
 3886 0396 00       		.byte	0
 3887 0397 00       		.byte	0
 3888 0398 00       		.byte	0
 3889 0399 00       		.byte	0
 3890 039a 00       		.byte	0
 3891 039b 07       		.byte	7
 3892 039c 07       		.byte	7
 3893 039d 07       		.byte	7
 3894 039e 07       		.byte	7
ARM GAS  /tmp/ccbMwiuG.s 			page 78


 3895 039f 07       		.byte	7
 3896 03a0 07       		.byte	7
 3897 03a1 07       		.byte	7
 3898 03a2 07       		.byte	7
 3899 03a3 07       		.byte	7
 3900 03a4 07       		.byte	7
 3901 03a5 07       		.byte	7
 3902 03a6 07       		.byte	7
 3903 03a7 07       		.byte	7
 3904 03a8 07       		.byte	7
 3905 03a9 07       		.byte	7
 3906 03aa 00       		.byte	0
 3907 03ab 00       		.byte	0
 3908 03ac 00       		.byte	0
 3909 03ad 00       		.byte	0
 3910 03ae 00       		.byte	0
 3911 03af 00       		.byte	0
 3912 03b0 00       		.byte	0
 3913 03b1 00       		.byte	0
 3914 03b2 00       		.byte	0
 3915 03b3 00       		.byte	0
 3916 03b4 00       		.byte	0
 3917 03b5 00       		.byte	0
 3918 03b6 00       		.byte	0
 3919 03b7 00       		.byte	0
 3920 03b8 00       		.byte	0
 3921 03b9 00       		.byte	0
 3922 03ba 00       		.byte	0
 3923 03bb 00       		.byte	0
 3924 03bc 00       		.byte	0
 3925 03bd 00       		.byte	0
 3926 03be 00       		.byte	0
 3927 03bf 00       		.byte	0
 3928 03c0 00       		.byte	0
 3929 03c1 00       		.byte	0
 3930 03c2 00       		.byte	0
 3931 03c3 00       		.byte	0
 3932 03c4 00       		.byte	0
 3933 03c5 00       		.byte	0
 3934 03c6 00       		.byte	0
 3935 03c7 00       		.byte	0
 3936 03c8 00       		.byte	0
 3937 03c9 00       		.byte	0
 3938 03ca 00       		.byte	0
 3939 03cb 00       		.byte	0
 3940 03cc 00       		.byte	0
 3941 03cd 00       		.byte	0
 3942 03ce 00       		.byte	0
 3943 03cf 00       		.byte	0
 3944 03d0 00       		.byte	0
 3945 03d1 00       		.byte	0
 3946 03d2 00       		.byte	0
 3947 03d3 00       		.byte	0
 3948 03d4 00       		.byte	0
 3949 03d5 00       		.byte	0
 3950 03d6 00       		.byte	0
 3951 03d7 00       		.byte	0
ARM GAS  /tmp/ccbMwiuG.s 			page 79


 3952 03d8 00       		.byte	0
 3953 03d9 00       		.byte	0
 3954 03da 00       		.byte	0
 3955 03db 00       		.byte	0
 3956 03dc 00       		.byte	0
 3957 03dd 00       		.byte	0
 3958 03de 00       		.byte	0
 3959 03df 00       		.byte	0
 3960 03e0 00       		.byte	0
 3961 03e1 00       		.byte	0
 3962 03e2 00       		.byte	0
 3963 03e3 00       		.byte	0
 3964 03e4 00       		.byte	0
 3965 03e5 00       		.byte	0
 3966 03e6 00       		.byte	0
 3967 03e7 00       		.byte	0
 3968 03e8 00       		.byte	0
 3969 03e9 00       		.byte	0
 3970 03ea 00       		.byte	0
 3971 03eb 00       		.byte	0
 3972 03ec 00       		.byte	0
 3973 03ed 00       		.byte	0
 3974 03ee 00       		.byte	0
 3975 03ef 00       		.byte	0
 3976 03f0 00       		.byte	0
 3977 03f1 00       		.byte	0
 3978 03f2 00       		.byte	0
 3979 03f3 00       		.byte	0
 3980 03f4 00       		.byte	0
 3981 03f5 00       		.byte	0
 3982 03f6 00       		.byte	0
 3983 03f7 00       		.byte	0
 3984 03f8 00       		.byte	0
 3985 03f9 00       		.byte	0
 3986 03fa 00       		.byte	0
 3987 03fb 00       		.byte	0
 3988 03fc 00       		.byte	0
 3989 03fd 00       		.byte	0
 3990 03fe 00       		.byte	0
 3991 03ff 00       		.byte	0
 3992 0400 00       		.byte	0
 3993 0401 3E       		.byte	62
 3994 0402 3E       		.byte	62
 3995 0403 3E       		.byte	62
 3996 0404 3E       		.byte	62
 3997 0405 3E       		.byte	62
 3998 0406 00       		.byte	0
 3999 0407 00       		.byte	0
 4000 0408 00       		.byte	0
 4001 0409 00       		.byte	0
 4002 040a 00       		.byte	0
 4003 040b 00       		.byte	0
 4004 040c 00       		.byte	0
 4005 040d 00       		.byte	0
 4006 040e 00       		.byte	0
 4007 040f 00       		.byte	0
 4008              		.text
ARM GAS  /tmp/ccbMwiuG.s 			page 80


 4009              	.Letext0:
 4010              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4011              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4012              		.file 4 "cmsis/core_cm3.h"
 4013              		.file 5 "cmsis_boot/system_stm32f10x.h"
 4014              		.file 6 "stm_lib/inc/stm32f10x.h"
 4015              		.file 7 "stm_lib/inc/stm32f10x_gpio.h"
 4016              		.file 8 "stm_lib/inc/stm32f10x_spi.h"
 4017              		.file 9 "/usr/include/newlib/sys/lock.h"
 4018              		.file 10 "/usr/include/newlib/sys/_types.h"
 4019              		.file 11 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4020              		.file 12 "/usr/include/newlib/sys/reent.h"
 4021              		.file 13 "SSD1331.h"
 4022              		.file 14 "stm_lib/inc/stm32f10x_rcc.h"
ARM GAS  /tmp/ccbMwiuG.s 			page 81


DEFINED SYMBOLS
                            *ABS*:0000000000000000 SSD1331.c
     /tmp/ccbMwiuG.s:16     .text._sendData:0000000000000000 $t
     /tmp/ccbMwiuG.s:23     .text._sendData:0000000000000000 _sendData
     /tmp/ccbMwiuG.s:55     .text._sendData:0000000000000018 $d
     /tmp/ccbMwiuG.s:60     .text._sendCmd:0000000000000000 $t
     /tmp/ccbMwiuG.s:67     .text._sendCmd:0000000000000000 _sendCmd
     /tmp/ccbMwiuG.s:107    .text._sendCmd:0000000000000028 $d
     /tmp/ccbMwiuG.s:112    .text.SSD1331_init:0000000000000000 $t
     /tmp/ccbMwiuG.s:119    .text.SSD1331_init:0000000000000000 SSD1331_init
     /tmp/ccbMwiuG.s:395    .text.SSD1331_init:00000000000001a8 $d
     /tmp/ccbMwiuG.s:402    .text.SSD1331_drawPixel:0000000000000000 $t
     /tmp/ccbMwiuG.s:409    .text.SSD1331_drawPixel:0000000000000000 SSD1331_drawPixel
     /tmp/ccbMwiuG.s:489    .text.SSD1331_drawPixel:0000000000000060 $d
     /tmp/ccbMwiuG.s:494    .text.SSD1331_drawLine:0000000000000000 $t
     /tmp/ccbMwiuG.s:501    .text.SSD1331_drawLine:0000000000000000 SSD1331_drawLine
     /tmp/ccbMwiuG.s:583    .text.SSD1331_drawFrame:0000000000000000 $t
     /tmp/ccbMwiuG.s:590    .text.SSD1331_drawFrame:0000000000000000 SSD1331_drawFrame
     /tmp/ccbMwiuG.s:695    .text.SSD1331_drawCircle:0000000000000000 $t
     /tmp/ccbMwiuG.s:702    .text.SSD1331_drawCircle:0000000000000000 SSD1331_drawCircle
     /tmp/ccbMwiuG.s:882    .text.SSD1331_SetXY:0000000000000000 $t
     /tmp/ccbMwiuG.s:889    .text.SSD1331_SetXY:0000000000000000 SSD1331_SetXY
     /tmp/ccbMwiuG.s:907    .text.SSD1331_SetXY:000000000000000c $d
     /tmp/ccbMwiuG.s:913    .text.SSD1331_XY_INK:0000000000000000 $t
     /tmp/ccbMwiuG.s:920    .text.SSD1331_XY_INK:0000000000000000 SSD1331_XY_INK
     /tmp/ccbMwiuG.s:968    .text.SSD1331_XY_INK:0000000000000044 $d
     /tmp/ccbMwiuG.s:974    .text.SSD1331_Chr:0000000000000000 $t
     /tmp/ccbMwiuG.s:981    .text.SSD1331_Chr:0000000000000000 SSD1331_Chr
     /tmp/ccbMwiuG.s:1340   .text.SSD1331_Chr:0000000000000214 $d
     /tmp/ccbMwiuG.s:1350   .text.SSD1331_Str:0000000000000000 $t
     /tmp/ccbMwiuG.s:1357   .text.SSD1331_Str:0000000000000000 SSD1331_Str
     /tmp/ccbMwiuG.s:1410   .text.SSD1331_FStr:0000000000000000 $t
     /tmp/ccbMwiuG.s:1417   .text.SSD1331_FStr:0000000000000000 SSD1331_FStr
     /tmp/ccbMwiuG.s:1466   .text.SSD1331_IMG:0000000000000000 $t
     /tmp/ccbMwiuG.s:1473   .text.SSD1331_IMG:0000000000000000 SSD1331_IMG
     /tmp/ccbMwiuG.s:1578   .text.SSD1331_IMG:0000000000000088 $d
     /tmp/ccbMwiuG.s:1583   .text.SSD1331_copyWindow:0000000000000000 $t
     /tmp/ccbMwiuG.s:1590   .text.SSD1331_copyWindow:0000000000000000 SSD1331_copyWindow
     /tmp/ccbMwiuG.s:1644   .text.SSD1331_dimWindow:0000000000000000 $t
     /tmp/ccbMwiuG.s:1651   .text.SSD1331_dimWindow:0000000000000000 SSD1331_dimWindow
     /tmp/ccbMwiuG.s:1697   .text.SSD1331_clearWindow:0000000000000000 $t
     /tmp/ccbMwiuG.s:1704   .text.SSD1331_clearWindow:0000000000000000 SSD1331_clearWindow
     /tmp/ccbMwiuG.s:1750   .text.SSD1331_setScrolling:0000000000000000 $t
     /tmp/ccbMwiuG.s:1757   .text.SSD1331_setScrolling:0000000000000000 SSD1331_setScrolling
     /tmp/ccbMwiuG.s:1846   .text.SSD1331_enableScrolling:0000000000000000 $t
     /tmp/ccbMwiuG.s:1853   .text.SSD1331_enableScrolling:0000000000000000 SSD1331_enableScrolling
     /tmp/ccbMwiuG.s:1885   .text.SSD1331_setDisplayMode:0000000000000000 $t
     /tmp/ccbMwiuG.s:1892   .text.SSD1331_setDisplayMode:0000000000000000 SSD1331_setDisplayMode
     /tmp/ccbMwiuG.s:1912   .text.SSD1331_setDisplayPower:0000000000000000 $t
     /tmp/ccbMwiuG.s:1919   .text.SSD1331_setDisplayPower:0000000000000000 SSD1331_setDisplayPower
     /tmp/ccbMwiuG.s:1942   .bss.CHR_X:0000000000000000 CHR_X
     /tmp/ccbMwiuG.s:1943   .bss.CHR_X:0000000000000000 $d
     /tmp/ccbMwiuG.s:1948   .bss.CHR_Y:0000000000000000 CHR_Y
     /tmp/ccbMwiuG.s:1949   .bss.CHR_Y:0000000000000000 $d
     /tmp/ccbMwiuG.s:1951   .rodata.BigNumbers:0000000000000000 $d
     /tmp/ccbMwiuG.s:1955   .rodata.BigNumbers:0000000000000000 BigNumbers
     /tmp/ccbMwiuG.s:2157   .rodata.FontLookup:0000000000000000 $d
ARM GAS  /tmp/ccbMwiuG.s 			page 82


     /tmp/ccbMwiuG.s:2161   .rodata.FontLookup:0000000000000000 FontLookup
     /tmp/ccbMwiuG.s:2963   .rodata.LargeNumbers:0000000000000000 $d
     /tmp/ccbMwiuG.s:2967   .rodata.LargeNumbers:0000000000000000 LargeNumbers
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
SPI_I2S_SendData
SPI_I2S_GetFlagStatus
GPIO_ResetBits
GPIO_SetBits
RCC_APB2PeriphClockCmd
GPIO_Init
SPI_Init
SPI_Cmd
SPI_NSSInternalSoftwareConfig
