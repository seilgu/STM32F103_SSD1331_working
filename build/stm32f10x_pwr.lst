ARM GAS  /tmp/cc1QqX1z.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.PWR_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	PWR_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	PWR_DeInit:
  24              	.LFB56:
  25              		.file 1 "stm_lib/src/stm32f10x_pwr.c"
   1:stm_lib/src/stm32f10x_pwr.c **** /**
   2:stm_lib/src/stm32f10x_pwr.c ****   ******************************************************************************
   3:stm_lib/src/stm32f10x_pwr.c ****   * @file    stm32f10x_pwr.c
   4:stm_lib/src/stm32f10x_pwr.c ****   * @author  MCD Application Team
   5:stm_lib/src/stm32f10x_pwr.c ****   * @version V3.5.0
   6:stm_lib/src/stm32f10x_pwr.c ****   * @date    11-March-2011
   7:stm_lib/src/stm32f10x_pwr.c ****   * @brief   This file provides all the PWR firmware functions.
   8:stm_lib/src/stm32f10x_pwr.c ****   ******************************************************************************
   9:stm_lib/src/stm32f10x_pwr.c ****   * @attention
  10:stm_lib/src/stm32f10x_pwr.c ****   *
  11:stm_lib/src/stm32f10x_pwr.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:stm_lib/src/stm32f10x_pwr.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:stm_lib/src/stm32f10x_pwr.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:stm_lib/src/stm32f10x_pwr.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:stm_lib/src/stm32f10x_pwr.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:stm_lib/src/stm32f10x_pwr.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:stm_lib/src/stm32f10x_pwr.c ****   *
  18:stm_lib/src/stm32f10x_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:stm_lib/src/stm32f10x_pwr.c ****   ******************************************************************************
  20:stm_lib/src/stm32f10x_pwr.c ****   */
  21:stm_lib/src/stm32f10x_pwr.c **** 
  22:stm_lib/src/stm32f10x_pwr.c **** /* Includes ------------------------------------------------------------------*/
  23:stm_lib/src/stm32f10x_pwr.c **** #include "stm32f10x_pwr.h"
  24:stm_lib/src/stm32f10x_pwr.c **** #include "stm32f10x_rcc.h"
  25:stm_lib/src/stm32f10x_pwr.c **** 
  26:stm_lib/src/stm32f10x_pwr.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:stm_lib/src/stm32f10x_pwr.c ****   * @{
  28:stm_lib/src/stm32f10x_pwr.c ****   */
  29:stm_lib/src/stm32f10x_pwr.c **** 
  30:stm_lib/src/stm32f10x_pwr.c **** /** @defgroup PWR 
  31:stm_lib/src/stm32f10x_pwr.c ****   * @brief PWR driver modules
  32:stm_lib/src/stm32f10x_pwr.c ****   * @{
  33:stm_lib/src/stm32f10x_pwr.c ****   */ 
ARM GAS  /tmp/cc1QqX1z.s 			page 2


  34:stm_lib/src/stm32f10x_pwr.c **** 
  35:stm_lib/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_TypesDefinitions
  36:stm_lib/src/stm32f10x_pwr.c ****   * @{
  37:stm_lib/src/stm32f10x_pwr.c ****   */
  38:stm_lib/src/stm32f10x_pwr.c **** 
  39:stm_lib/src/stm32f10x_pwr.c **** /**
  40:stm_lib/src/stm32f10x_pwr.c ****   * @}
  41:stm_lib/src/stm32f10x_pwr.c ****   */
  42:stm_lib/src/stm32f10x_pwr.c **** 
  43:stm_lib/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Defines
  44:stm_lib/src/stm32f10x_pwr.c ****   * @{
  45:stm_lib/src/stm32f10x_pwr.c ****   */
  46:stm_lib/src/stm32f10x_pwr.c **** 
  47:stm_lib/src/stm32f10x_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  48:stm_lib/src/stm32f10x_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  49:stm_lib/src/stm32f10x_pwr.c **** 
  50:stm_lib/src/stm32f10x_pwr.c **** /* --- CR Register ---*/
  51:stm_lib/src/stm32f10x_pwr.c **** 
  52:stm_lib/src/stm32f10x_pwr.c **** /* Alias word address of DBP bit */
  53:stm_lib/src/stm32f10x_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  54:stm_lib/src/stm32f10x_pwr.c **** #define DBP_BitNumber            0x08
  55:stm_lib/src/stm32f10x_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  56:stm_lib/src/stm32f10x_pwr.c **** 
  57:stm_lib/src/stm32f10x_pwr.c **** /* Alias word address of PVDE bit */
  58:stm_lib/src/stm32f10x_pwr.c **** #define PVDE_BitNumber           0x04
  59:stm_lib/src/stm32f10x_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  60:stm_lib/src/stm32f10x_pwr.c **** 
  61:stm_lib/src/stm32f10x_pwr.c **** /* --- CSR Register ---*/
  62:stm_lib/src/stm32f10x_pwr.c **** 
  63:stm_lib/src/stm32f10x_pwr.c **** /* Alias word address of EWUP bit */
  64:stm_lib/src/stm32f10x_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  65:stm_lib/src/stm32f10x_pwr.c **** #define EWUP_BitNumber           0x08
  66:stm_lib/src/stm32f10x_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  67:stm_lib/src/stm32f10x_pwr.c **** 
  68:stm_lib/src/stm32f10x_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  69:stm_lib/src/stm32f10x_pwr.c **** 
  70:stm_lib/src/stm32f10x_pwr.c **** /* CR register bit mask */
  71:stm_lib/src/stm32f10x_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  72:stm_lib/src/stm32f10x_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  73:stm_lib/src/stm32f10x_pwr.c **** 
  74:stm_lib/src/stm32f10x_pwr.c **** 
  75:stm_lib/src/stm32f10x_pwr.c **** /**
  76:stm_lib/src/stm32f10x_pwr.c ****   * @}
  77:stm_lib/src/stm32f10x_pwr.c ****   */
  78:stm_lib/src/stm32f10x_pwr.c **** 
  79:stm_lib/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Macros
  80:stm_lib/src/stm32f10x_pwr.c ****   * @{
  81:stm_lib/src/stm32f10x_pwr.c ****   */
  82:stm_lib/src/stm32f10x_pwr.c **** 
  83:stm_lib/src/stm32f10x_pwr.c **** /**
  84:stm_lib/src/stm32f10x_pwr.c ****   * @}
  85:stm_lib/src/stm32f10x_pwr.c ****   */
  86:stm_lib/src/stm32f10x_pwr.c **** 
  87:stm_lib/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Variables
  88:stm_lib/src/stm32f10x_pwr.c ****   * @{
  89:stm_lib/src/stm32f10x_pwr.c ****   */
  90:stm_lib/src/stm32f10x_pwr.c **** 
ARM GAS  /tmp/cc1QqX1z.s 			page 3


  91:stm_lib/src/stm32f10x_pwr.c **** /**
  92:stm_lib/src/stm32f10x_pwr.c ****   * @}
  93:stm_lib/src/stm32f10x_pwr.c ****   */
  94:stm_lib/src/stm32f10x_pwr.c **** 
  95:stm_lib/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_FunctionPrototypes
  96:stm_lib/src/stm32f10x_pwr.c ****   * @{
  97:stm_lib/src/stm32f10x_pwr.c ****   */
  98:stm_lib/src/stm32f10x_pwr.c **** 
  99:stm_lib/src/stm32f10x_pwr.c **** /**
 100:stm_lib/src/stm32f10x_pwr.c ****   * @}
 101:stm_lib/src/stm32f10x_pwr.c ****   */
 102:stm_lib/src/stm32f10x_pwr.c **** 
 103:stm_lib/src/stm32f10x_pwr.c **** /** @defgroup PWR_Private_Functions
 104:stm_lib/src/stm32f10x_pwr.c ****   * @{
 105:stm_lib/src/stm32f10x_pwr.c ****   */
 106:stm_lib/src/stm32f10x_pwr.c **** 
 107:stm_lib/src/stm32f10x_pwr.c **** /**
 108:stm_lib/src/stm32f10x_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.
 109:stm_lib/src/stm32f10x_pwr.c ****   * @param  None
 110:stm_lib/src/stm32f10x_pwr.c ****   * @retval None
 111:stm_lib/src/stm32f10x_pwr.c ****   */
 112:stm_lib/src/stm32f10x_pwr.c **** void PWR_DeInit(void)
 113:stm_lib/src/stm32f10x_pwr.c **** {
  26              		.loc 1 113 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 08B5     		push	{r3, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
 114:stm_lib/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  35              		.loc 1 114 0
  36 0002 0121     		movs	r1, #1
  37 0004 4FF08050 		mov	r0, #268435456
  38 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  39              	.LVL0:
 115:stm_lib/src/stm32f10x_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  40              		.loc 1 115 0
  41 000c 0021     		movs	r1, #0
  42 000e 4FF08050 		mov	r0, #268435456
  43 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  44              	.LVL1:
  45 0016 08BD     		pop	{r3, pc}
  46              		.cfi_endproc
  47              	.LFE56:
  49              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  50              		.align	1
  51              		.global	PWR_BackupAccessCmd
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu softvfp
  57              	PWR_BackupAccessCmd:
  58              	.LFB57:
 116:stm_lib/src/stm32f10x_pwr.c **** }
ARM GAS  /tmp/cc1QqX1z.s 			page 4


 117:stm_lib/src/stm32f10x_pwr.c **** 
 118:stm_lib/src/stm32f10x_pwr.c **** /**
 119:stm_lib/src/stm32f10x_pwr.c ****   * @brief  Enables or disables access to the RTC and backup registers.
 120:stm_lib/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the access to the RTC and backup registers.
 121:stm_lib/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 122:stm_lib/src/stm32f10x_pwr.c ****   * @retval None
 123:stm_lib/src/stm32f10x_pwr.c ****   */
 124:stm_lib/src/stm32f10x_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 125:stm_lib/src/stm32f10x_pwr.c **** {
  59              		.loc 1 125 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL2:
 126:stm_lib/src/stm32f10x_pwr.c ****   /* Check the parameters */
 127:stm_lib/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 128:stm_lib/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  65              		.loc 1 128 0
  66 0000 014B     		ldr	r3, .L4
  67 0002 1860     		str	r0, [r3]
  68 0004 7047     		bx	lr
  69              	.L5:
  70 0006 00BF     		.align	2
  71              	.L4:
  72 0008 20000E42 		.word	1108213792
  73              		.cfi_endproc
  74              	.LFE57:
  76              		.section	.text.PWR_PVDCmd,"ax",%progbits
  77              		.align	1
  78              		.global	PWR_PVDCmd
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu softvfp
  84              	PWR_PVDCmd:
  85              	.LFB58:
 129:stm_lib/src/stm32f10x_pwr.c **** }
 130:stm_lib/src/stm32f10x_pwr.c **** 
 131:stm_lib/src/stm32f10x_pwr.c **** /**
 132:stm_lib/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 133:stm_lib/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the PVD.
 134:stm_lib/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 135:stm_lib/src/stm32f10x_pwr.c ****   * @retval None
 136:stm_lib/src/stm32f10x_pwr.c ****   */
 137:stm_lib/src/stm32f10x_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 138:stm_lib/src/stm32f10x_pwr.c **** {
  86              		.loc 1 138 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              	.LVL3:
 139:stm_lib/src/stm32f10x_pwr.c ****   /* Check the parameters */
 140:stm_lib/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 141:stm_lib/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
  92              		.loc 1 141 0
ARM GAS  /tmp/cc1QqX1z.s 			page 5


  93 0000 014B     		ldr	r3, .L7
  94 0002 1860     		str	r0, [r3]
  95 0004 7047     		bx	lr
  96              	.L8:
  97 0006 00BF     		.align	2
  98              	.L7:
  99 0008 10000E42 		.word	1108213776
 100              		.cfi_endproc
 101              	.LFE58:
 103              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
 104              		.align	1
 105              		.global	PWR_PVDLevelConfig
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu softvfp
 111              	PWR_PVDLevelConfig:
 112              	.LFB59:
 142:stm_lib/src/stm32f10x_pwr.c **** }
 143:stm_lib/src/stm32f10x_pwr.c **** 
 144:stm_lib/src/stm32f10x_pwr.c **** /**
 145:stm_lib/src/stm32f10x_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 146:stm_lib/src/stm32f10x_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 147:stm_lib/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 148:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V2: PVD detection level set to 2.2V
 149:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V3: PVD detection level set to 2.3V
 150:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V4: PVD detection level set to 2.4V
 151:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V5: PVD detection level set to 2.5V
 152:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V6: PVD detection level set to 2.6V
 153:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V7: PVD detection level set to 2.7V
 154:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V8: PVD detection level set to 2.8V
 155:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_PVDLevel_2V9: PVD detection level set to 2.9V
 156:stm_lib/src/stm32f10x_pwr.c ****   * @retval None
 157:stm_lib/src/stm32f10x_pwr.c ****   */
 158:stm_lib/src/stm32f10x_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 159:stm_lib/src/stm32f10x_pwr.c **** {
 113              		.loc 1 159 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL4:
 160:stm_lib/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 161:stm_lib/src/stm32f10x_pwr.c ****   /* Check the parameters */
 162:stm_lib/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 163:stm_lib/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 119              		.loc 1 163 0
 120 0000 034A     		ldr	r2, .L10
 121 0002 1368     		ldr	r3, [r2]
 122              	.LVL5:
 164:stm_lib/src/stm32f10x_pwr.c ****   /* Clear PLS[7:5] bits */
 165:stm_lib/src/stm32f10x_pwr.c ****   tmpreg &= CR_PLS_MASK;
 123              		.loc 1 165 0
 124 0004 23F0E003 		bic	r3, r3, #224
 125              	.LVL6:
 166:stm_lib/src/stm32f10x_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 167:stm_lib/src/stm32f10x_pwr.c ****   tmpreg |= PWR_PVDLevel;
ARM GAS  /tmp/cc1QqX1z.s 			page 6


 126              		.loc 1 167 0
 127 0008 1843     		orrs	r0, r0, r3
 128              	.LVL7:
 168:stm_lib/src/stm32f10x_pwr.c ****   /* Store the new value */
 169:stm_lib/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 129              		.loc 1 169 0
 130 000a 1060     		str	r0, [r2]
 131 000c 7047     		bx	lr
 132              	.L11:
 133 000e 00BF     		.align	2
 134              	.L10:
 135 0010 00700040 		.word	1073770496
 136              		.cfi_endproc
 137              	.LFE59:
 139              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 140              		.align	1
 141              		.global	PWR_WakeUpPinCmd
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu softvfp
 147              	PWR_WakeUpPinCmd:
 148              	.LFB60:
 170:stm_lib/src/stm32f10x_pwr.c **** }
 171:stm_lib/src/stm32f10x_pwr.c **** 
 172:stm_lib/src/stm32f10x_pwr.c **** /**
 173:stm_lib/src/stm32f10x_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 174:stm_lib/src/stm32f10x_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 175:stm_lib/src/stm32f10x_pwr.c ****   *   This parameter can be: ENABLE or DISABLE.
 176:stm_lib/src/stm32f10x_pwr.c ****   * @retval None
 177:stm_lib/src/stm32f10x_pwr.c ****   */
 178:stm_lib/src/stm32f10x_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 179:stm_lib/src/stm32f10x_pwr.c **** {
 149              		.loc 1 179 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              	.LVL8:
 180:stm_lib/src/stm32f10x_pwr.c ****   /* Check the parameters */
 181:stm_lib/src/stm32f10x_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 182:stm_lib/src/stm32f10x_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 155              		.loc 1 182 0
 156 0000 014B     		ldr	r3, .L13
 157 0002 1860     		str	r0, [r3]
 158 0004 7047     		bx	lr
 159              	.L14:
 160 0006 00BF     		.align	2
 161              	.L13:
 162 0008 A0000E42 		.word	1108213920
 163              		.cfi_endproc
 164              	.LFE60:
 166              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 167              		.align	1
 168              		.global	PWR_EnterSTOPMode
 169              		.syntax unified
 170              		.thumb
ARM GAS  /tmp/cc1QqX1z.s 			page 7


 171              		.thumb_func
 172              		.fpu softvfp
 174              	PWR_EnterSTOPMode:
 175              	.LFB61:
 183:stm_lib/src/stm32f10x_pwr.c **** }
 184:stm_lib/src/stm32f10x_pwr.c **** 
 185:stm_lib/src/stm32f10x_pwr.c **** /**
 186:stm_lib/src/stm32f10x_pwr.c ****   * @brief  Enters STOP mode.
 187:stm_lib/src/stm32f10x_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 188:stm_lib/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 189:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_ON: STOP mode with regulator ON
 190:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 191:stm_lib/src/stm32f10x_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 192:stm_lib/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 193:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 194:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 195:stm_lib/src/stm32f10x_pwr.c ****   * @retval None
 196:stm_lib/src/stm32f10x_pwr.c ****   */
 197:stm_lib/src/stm32f10x_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 198:stm_lib/src/stm32f10x_pwr.c **** {
 176              		.loc 1 198 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181              	.LVL9:
 199:stm_lib/src/stm32f10x_pwr.c ****   uint32_t tmpreg = 0;
 200:stm_lib/src/stm32f10x_pwr.c ****   /* Check the parameters */
 201:stm_lib/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 202:stm_lib/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 203:stm_lib/src/stm32f10x_pwr.c ****   
 204:stm_lib/src/stm32f10x_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 205:stm_lib/src/stm32f10x_pwr.c ****   tmpreg = PWR->CR;
 182              		.loc 1 205 0
 183 0000 0A4A     		ldr	r2, .L19
 184 0002 1368     		ldr	r3, [r2]
 185              	.LVL10:
 206:stm_lib/src/stm32f10x_pwr.c ****   /* Clear PDDS and LPDS bits */
 207:stm_lib/src/stm32f10x_pwr.c ****   tmpreg &= CR_DS_MASK;
 186              		.loc 1 207 0
 187 0004 23F00303 		bic	r3, r3, #3
 188              	.LVL11:
 208:stm_lib/src/stm32f10x_pwr.c ****   /* Set LPDS bit according to PWR_Regulator value */
 209:stm_lib/src/stm32f10x_pwr.c ****   tmpreg |= PWR_Regulator;
 189              		.loc 1 209 0
 190 0008 1843     		orrs	r0, r0, r3
 191              	.LVL12:
 210:stm_lib/src/stm32f10x_pwr.c ****   /* Store the new value */
 211:stm_lib/src/stm32f10x_pwr.c ****   PWR->CR = tmpreg;
 192              		.loc 1 211 0
 193 000a 1060     		str	r0, [r2]
 212:stm_lib/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 213:stm_lib/src/stm32f10x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;
 194              		.loc 1 213 0
 195 000c 084A     		ldr	r2, .L19+4
 196 000e 1369     		ldr	r3, [r2, #16]
 197 0010 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/cc1QqX1z.s 			page 8


 198 0014 1361     		str	r3, [r2, #16]
 214:stm_lib/src/stm32f10x_pwr.c ****   
 215:stm_lib/src/stm32f10x_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 216:stm_lib/src/stm32f10x_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 199              		.loc 1 216 0
 200 0016 0129     		cmp	r1, #1
 201 0018 06D0     		beq	.L18
 202              	.LBB8:
 203              	.LBB9:
 204              		.file 2 "cmsis/core_cmInstr.h"
   1:cmsis/core_cmInstr.h **** /**************************************************************************//**
   2:cmsis/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:cmsis/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:cmsis/core_cmInstr.h ****  * @version  V3.01
   5:cmsis/core_cmInstr.h ****  * @date     06. March 2012
   6:cmsis/core_cmInstr.h ****  *
   7:cmsis/core_cmInstr.h ****  * @note
   8:cmsis/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:cmsis/core_cmInstr.h ****  *
  10:cmsis/core_cmInstr.h ****  * @par
  11:cmsis/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:cmsis/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:cmsis/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:cmsis/core_cmInstr.h ****  *
  15:cmsis/core_cmInstr.h ****  * @par
  16:cmsis/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:cmsis/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:cmsis/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:cmsis/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:cmsis/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:cmsis/core_cmInstr.h ****  *
  22:cmsis/core_cmInstr.h ****  ******************************************************************************/
  23:cmsis/core_cmInstr.h **** 
  24:cmsis/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:cmsis/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:cmsis/core_cmInstr.h **** 
  27:cmsis/core_cmInstr.h **** 
  28:cmsis/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:cmsis/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:cmsis/core_cmInstr.h ****   Access to dedicated instructions
  31:cmsis/core_cmInstr.h ****   @{
  32:cmsis/core_cmInstr.h **** */
  33:cmsis/core_cmInstr.h **** 
  34:cmsis/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:cmsis/core_cmInstr.h **** /* ARM armcc specific functions */
  36:cmsis/core_cmInstr.h **** 
  37:cmsis/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:cmsis/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:cmsis/core_cmInstr.h **** #endif
  40:cmsis/core_cmInstr.h **** 
  41:cmsis/core_cmInstr.h **** 
  42:cmsis/core_cmInstr.h **** /** \brief  No Operation
  43:cmsis/core_cmInstr.h **** 
  44:cmsis/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:cmsis/core_cmInstr.h ****  */
  46:cmsis/core_cmInstr.h **** #define __NOP                             __nop
  47:cmsis/core_cmInstr.h **** 
ARM GAS  /tmp/cc1QqX1z.s 			page 9


  48:cmsis/core_cmInstr.h **** 
  49:cmsis/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:cmsis/core_cmInstr.h **** 
  51:cmsis/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:cmsis/core_cmInstr.h ****     until one of a number of events occurs.
  53:cmsis/core_cmInstr.h ****  */
  54:cmsis/core_cmInstr.h **** #define __WFI                             __wfi
  55:cmsis/core_cmInstr.h **** 
  56:cmsis/core_cmInstr.h **** 
  57:cmsis/core_cmInstr.h **** /** \brief  Wait For Event
  58:cmsis/core_cmInstr.h **** 
  59:cmsis/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:cmsis/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:cmsis/core_cmInstr.h ****  */
  62:cmsis/core_cmInstr.h **** #define __WFE                             __wfe
  63:cmsis/core_cmInstr.h **** 
  64:cmsis/core_cmInstr.h **** 
  65:cmsis/core_cmInstr.h **** /** \brief  Send Event
  66:cmsis/core_cmInstr.h **** 
  67:cmsis/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:cmsis/core_cmInstr.h ****  */
  69:cmsis/core_cmInstr.h **** #define __SEV                             __sev
  70:cmsis/core_cmInstr.h **** 
  71:cmsis/core_cmInstr.h **** 
  72:cmsis/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:cmsis/core_cmInstr.h **** 
  74:cmsis/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:cmsis/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:cmsis/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:cmsis/core_cmInstr.h ****  */
  78:cmsis/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:cmsis/core_cmInstr.h **** 
  80:cmsis/core_cmInstr.h **** 
  81:cmsis/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:cmsis/core_cmInstr.h **** 
  83:cmsis/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:cmsis/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:cmsis/core_cmInstr.h ****  */
  86:cmsis/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:cmsis/core_cmInstr.h **** 
  88:cmsis/core_cmInstr.h **** 
  89:cmsis/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:cmsis/core_cmInstr.h **** 
  91:cmsis/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:cmsis/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:cmsis/core_cmInstr.h ****  */
  94:cmsis/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:cmsis/core_cmInstr.h **** 
  96:cmsis/core_cmInstr.h **** 
  97:cmsis/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:cmsis/core_cmInstr.h **** 
  99:cmsis/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:cmsis/core_cmInstr.h **** 
 101:cmsis/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:cmsis/core_cmInstr.h ****     \return               Reversed value
 103:cmsis/core_cmInstr.h ****  */
 104:cmsis/core_cmInstr.h **** #define __REV                             __rev
ARM GAS  /tmp/cc1QqX1z.s 			page 10


 105:cmsis/core_cmInstr.h **** 
 106:cmsis/core_cmInstr.h **** 
 107:cmsis/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:cmsis/core_cmInstr.h **** 
 109:cmsis/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:cmsis/core_cmInstr.h **** 
 111:cmsis/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:cmsis/core_cmInstr.h ****     \return               Reversed value
 113:cmsis/core_cmInstr.h ****  */
 114:cmsis/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:cmsis/core_cmInstr.h **** {
 116:cmsis/core_cmInstr.h ****   rev16 r0, r0
 117:cmsis/core_cmInstr.h ****   bx lr
 118:cmsis/core_cmInstr.h **** }
 119:cmsis/core_cmInstr.h **** 
 120:cmsis/core_cmInstr.h **** 
 121:cmsis/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:cmsis/core_cmInstr.h **** 
 123:cmsis/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:cmsis/core_cmInstr.h **** 
 125:cmsis/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:cmsis/core_cmInstr.h ****     \return               Reversed value
 127:cmsis/core_cmInstr.h ****  */
 128:cmsis/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:cmsis/core_cmInstr.h **** {
 130:cmsis/core_cmInstr.h ****   revsh r0, r0
 131:cmsis/core_cmInstr.h ****   bx lr
 132:cmsis/core_cmInstr.h **** }
 133:cmsis/core_cmInstr.h **** 
 134:cmsis/core_cmInstr.h **** 
 135:cmsis/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:cmsis/core_cmInstr.h **** 
 137:cmsis/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:cmsis/core_cmInstr.h **** 
 139:cmsis/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:cmsis/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:cmsis/core_cmInstr.h ****     \return               Rotated value
 142:cmsis/core_cmInstr.h ****  */
 143:cmsis/core_cmInstr.h **** #define __ROR                             __ror
 144:cmsis/core_cmInstr.h **** 
 145:cmsis/core_cmInstr.h **** 
 146:cmsis/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:cmsis/core_cmInstr.h **** 
 148:cmsis/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:cmsis/core_cmInstr.h **** 
 150:cmsis/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:cmsis/core_cmInstr.h **** 
 152:cmsis/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:cmsis/core_cmInstr.h ****     \return               Reversed value
 154:cmsis/core_cmInstr.h ****  */
 155:cmsis/core_cmInstr.h **** #define __RBIT                            __rbit
 156:cmsis/core_cmInstr.h **** 
 157:cmsis/core_cmInstr.h **** 
 158:cmsis/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:cmsis/core_cmInstr.h **** 
 160:cmsis/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:cmsis/core_cmInstr.h **** 
ARM GAS  /tmp/cc1QqX1z.s 			page 11


 162:cmsis/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:cmsis/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:cmsis/core_cmInstr.h ****  */
 165:cmsis/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:cmsis/core_cmInstr.h **** 
 167:cmsis/core_cmInstr.h **** 
 168:cmsis/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:cmsis/core_cmInstr.h **** 
 170:cmsis/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:cmsis/core_cmInstr.h **** 
 172:cmsis/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:cmsis/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:cmsis/core_cmInstr.h ****  */
 175:cmsis/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:cmsis/core_cmInstr.h **** 
 177:cmsis/core_cmInstr.h **** 
 178:cmsis/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:cmsis/core_cmInstr.h **** 
 180:cmsis/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:cmsis/core_cmInstr.h **** 
 182:cmsis/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:cmsis/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:cmsis/core_cmInstr.h ****  */
 185:cmsis/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:cmsis/core_cmInstr.h **** 
 187:cmsis/core_cmInstr.h **** 
 188:cmsis/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:cmsis/core_cmInstr.h **** 
 190:cmsis/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:cmsis/core_cmInstr.h **** 
 192:cmsis/core_cmInstr.h ****     \param [in]  value  Value to store
 193:cmsis/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:cmsis/core_cmInstr.h ****     \return          0  Function succeeded
 195:cmsis/core_cmInstr.h ****     \return          1  Function failed
 196:cmsis/core_cmInstr.h ****  */
 197:cmsis/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:cmsis/core_cmInstr.h **** 
 199:cmsis/core_cmInstr.h **** 
 200:cmsis/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:cmsis/core_cmInstr.h **** 
 202:cmsis/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:cmsis/core_cmInstr.h **** 
 204:cmsis/core_cmInstr.h ****     \param [in]  value  Value to store
 205:cmsis/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:cmsis/core_cmInstr.h ****     \return          0  Function succeeded
 207:cmsis/core_cmInstr.h ****     \return          1  Function failed
 208:cmsis/core_cmInstr.h ****  */
 209:cmsis/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:cmsis/core_cmInstr.h **** 
 211:cmsis/core_cmInstr.h **** 
 212:cmsis/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:cmsis/core_cmInstr.h **** 
 214:cmsis/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:cmsis/core_cmInstr.h **** 
 216:cmsis/core_cmInstr.h ****     \param [in]  value  Value to store
 217:cmsis/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:cmsis/core_cmInstr.h ****     \return          0  Function succeeded
ARM GAS  /tmp/cc1QqX1z.s 			page 12


 219:cmsis/core_cmInstr.h ****     \return          1  Function failed
 220:cmsis/core_cmInstr.h ****  */
 221:cmsis/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:cmsis/core_cmInstr.h **** 
 223:cmsis/core_cmInstr.h **** 
 224:cmsis/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:cmsis/core_cmInstr.h **** 
 226:cmsis/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:cmsis/core_cmInstr.h **** 
 228:cmsis/core_cmInstr.h ****  */
 229:cmsis/core_cmInstr.h **** #define __CLREX                           __clrex
 230:cmsis/core_cmInstr.h **** 
 231:cmsis/core_cmInstr.h **** 
 232:cmsis/core_cmInstr.h **** /** \brief  Signed Saturate
 233:cmsis/core_cmInstr.h **** 
 234:cmsis/core_cmInstr.h ****     This function saturates a signed value.
 235:cmsis/core_cmInstr.h **** 
 236:cmsis/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:cmsis/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:cmsis/core_cmInstr.h ****     \return             Saturated value
 239:cmsis/core_cmInstr.h ****  */
 240:cmsis/core_cmInstr.h **** #define __SSAT                            __ssat
 241:cmsis/core_cmInstr.h **** 
 242:cmsis/core_cmInstr.h **** 
 243:cmsis/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:cmsis/core_cmInstr.h **** 
 245:cmsis/core_cmInstr.h ****     This function saturates an unsigned value.
 246:cmsis/core_cmInstr.h **** 
 247:cmsis/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:cmsis/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:cmsis/core_cmInstr.h ****     \return             Saturated value
 250:cmsis/core_cmInstr.h ****  */
 251:cmsis/core_cmInstr.h **** #define __USAT                            __usat
 252:cmsis/core_cmInstr.h **** 
 253:cmsis/core_cmInstr.h **** 
 254:cmsis/core_cmInstr.h **** /** \brief  Count leading zeros
 255:cmsis/core_cmInstr.h **** 
 256:cmsis/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:cmsis/core_cmInstr.h **** 
 258:cmsis/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:cmsis/core_cmInstr.h ****     \return             number of leading zeros in value
 260:cmsis/core_cmInstr.h ****  */
 261:cmsis/core_cmInstr.h **** #define __CLZ                             __clz
 262:cmsis/core_cmInstr.h **** 
 263:cmsis/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:cmsis/core_cmInstr.h **** 
 265:cmsis/core_cmInstr.h **** 
 266:cmsis/core_cmInstr.h **** 
 267:cmsis/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:cmsis/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:cmsis/core_cmInstr.h **** 
 270:cmsis/core_cmInstr.h **** #include <cmsis_iar.h>
 271:cmsis/core_cmInstr.h **** 
 272:cmsis/core_cmInstr.h **** 
 273:cmsis/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:cmsis/core_cmInstr.h **** /* TI CCS specific functions */
 275:cmsis/core_cmInstr.h **** 
ARM GAS  /tmp/cc1QqX1z.s 			page 13


 276:cmsis/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:cmsis/core_cmInstr.h **** 
 278:cmsis/core_cmInstr.h **** 
 279:cmsis/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:cmsis/core_cmInstr.h **** /* GNU gcc specific functions */
 281:cmsis/core_cmInstr.h **** 
 282:cmsis/core_cmInstr.h **** /** \brief  No Operation
 283:cmsis/core_cmInstr.h **** 
 284:cmsis/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:cmsis/core_cmInstr.h ****  */
 286:cmsis/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:cmsis/core_cmInstr.h **** {
 288:cmsis/core_cmInstr.h ****   __ASM volatile ("nop");
 289:cmsis/core_cmInstr.h **** }
 290:cmsis/core_cmInstr.h **** 
 291:cmsis/core_cmInstr.h **** 
 292:cmsis/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:cmsis/core_cmInstr.h **** 
 294:cmsis/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:cmsis/core_cmInstr.h ****     until one of a number of events occurs.
 296:cmsis/core_cmInstr.h ****  */
 297:cmsis/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:cmsis/core_cmInstr.h **** {
 299:cmsis/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:cmsis/core_cmInstr.h **** }
 301:cmsis/core_cmInstr.h **** 
 302:cmsis/core_cmInstr.h **** 
 303:cmsis/core_cmInstr.h **** /** \brief  Wait For Event
 304:cmsis/core_cmInstr.h **** 
 305:cmsis/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:cmsis/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:cmsis/core_cmInstr.h ****  */
 308:cmsis/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:cmsis/core_cmInstr.h **** {
 310:cmsis/core_cmInstr.h ****   __ASM volatile ("wfe");
 205              		.loc 2 310 0
 206              		.syntax unified
 207              	@ 310 "cmsis/core_cmInstr.h" 1
 208 001a 20BF     		wfe
 209              	@ 0 "" 2
 210              		.thumb
 211              		.syntax unified
 212              	.L17:
 213              	.LBE9:
 214              	.LBE8:
 217:stm_lib/src/stm32f10x_pwr.c ****   {   
 218:stm_lib/src/stm32f10x_pwr.c ****     /* Request Wait For Interrupt */
 219:stm_lib/src/stm32f10x_pwr.c ****     __WFI();
 220:stm_lib/src/stm32f10x_pwr.c ****   }
 221:stm_lib/src/stm32f10x_pwr.c ****   else
 222:stm_lib/src/stm32f10x_pwr.c ****   {
 223:stm_lib/src/stm32f10x_pwr.c ****     /* Request Wait For Event */
 224:stm_lib/src/stm32f10x_pwr.c ****     __WFE();
 225:stm_lib/src/stm32f10x_pwr.c ****   }
 226:stm_lib/src/stm32f10x_pwr.c ****   
 227:stm_lib/src/stm32f10x_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 228:stm_lib/src/stm32f10x_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
ARM GAS  /tmp/cc1QqX1z.s 			page 14


 215              		.loc 1 228 0
 216 001c 044A     		ldr	r2, .L19+4
 217 001e 1369     		ldr	r3, [r2, #16]
 218 0020 23F00403 		bic	r3, r3, #4
 219 0024 1361     		str	r3, [r2, #16]
 220 0026 7047     		bx	lr
 221              	.L18:
 222              	.LBB10:
 223              	.LBB11:
 299:cmsis/core_cmInstr.h **** }
 224              		.loc 2 299 0
 225              		.syntax unified
 226              	@ 299 "cmsis/core_cmInstr.h" 1
 227 0028 30BF     		wfi
 228              	@ 0 "" 2
 229              		.thumb
 230              		.syntax unified
 231 002a F7E7     		b	.L17
 232              	.L20:
 233              		.align	2
 234              	.L19:
 235 002c 00700040 		.word	1073770496
 236 0030 00ED00E0 		.word	-536810240
 237              	.LBE11:
 238              	.LBE10:
 239              		.cfi_endproc
 240              	.LFE61:
 242              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 243              		.align	1
 244              		.global	PWR_EnterSTANDBYMode
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu softvfp
 250              	PWR_EnterSTANDBYMode:
 251              	.LFB62:
 229:stm_lib/src/stm32f10x_pwr.c **** }
 230:stm_lib/src/stm32f10x_pwr.c **** 
 231:stm_lib/src/stm32f10x_pwr.c **** /**
 232:stm_lib/src/stm32f10x_pwr.c ****   * @brief  Enters STANDBY mode.
 233:stm_lib/src/stm32f10x_pwr.c ****   * @param  None
 234:stm_lib/src/stm32f10x_pwr.c ****   * @retval None
 235:stm_lib/src/stm32f10x_pwr.c ****   */
 236:stm_lib/src/stm32f10x_pwr.c **** void PWR_EnterSTANDBYMode(void)
 237:stm_lib/src/stm32f10x_pwr.c **** {
 252              		.loc 1 237 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 238:stm_lib/src/stm32f10x_pwr.c ****   /* Clear Wake-up flag */
 239:stm_lib/src/stm32f10x_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 257              		.loc 1 239 0
 258 0000 074B     		ldr	r3, .L22
 259 0002 1A68     		ldr	r2, [r3]
 260 0004 42F00402 		orr	r2, r2, #4
 261 0008 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc1QqX1z.s 			page 15


 240:stm_lib/src/stm32f10x_pwr.c ****   /* Select STANDBY mode */
 241:stm_lib/src/stm32f10x_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 262              		.loc 1 241 0
 263 000a 1A68     		ldr	r2, [r3]
 264 000c 42F00202 		orr	r2, r2, #2
 265 0010 1A60     		str	r2, [r3]
 242:stm_lib/src/stm32f10x_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 243:stm_lib/src/stm32f10x_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP;
 266              		.loc 1 243 0
 267 0012 044A     		ldr	r2, .L22+4
 268 0014 1369     		ldr	r3, [r2, #16]
 269 0016 43F00403 		orr	r3, r3, #4
 270 001a 1361     		str	r3, [r2, #16]
 271              	.LBB12:
 272              	.LBB13:
 299:cmsis/core_cmInstr.h **** }
 273              		.loc 2 299 0
 274              		.syntax unified
 275              	@ 299 "cmsis/core_cmInstr.h" 1
 276 001c 30BF     		wfi
 277              	@ 0 "" 2
 278              		.thumb
 279              		.syntax unified
 280 001e 7047     		bx	lr
 281              	.L23:
 282              		.align	2
 283              	.L22:
 284 0020 00700040 		.word	1073770496
 285 0024 00ED00E0 		.word	-536810240
 286              	.LBE13:
 287              	.LBE12:
 288              		.cfi_endproc
 289              	.LFE62:
 291              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 292              		.align	1
 293              		.global	PWR_GetFlagStatus
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 297              		.fpu softvfp
 299              	PWR_GetFlagStatus:
 300              	.LFB63:
 244:stm_lib/src/stm32f10x_pwr.c **** /* This option is used to ensure that store operations are completed */
 245:stm_lib/src/stm32f10x_pwr.c **** #if defined ( __CC_ARM   )
 246:stm_lib/src/stm32f10x_pwr.c ****   __force_stores();
 247:stm_lib/src/stm32f10x_pwr.c **** #endif
 248:stm_lib/src/stm32f10x_pwr.c ****   /* Request Wait For Interrupt */
 249:stm_lib/src/stm32f10x_pwr.c ****   __WFI();
 250:stm_lib/src/stm32f10x_pwr.c **** }
 251:stm_lib/src/stm32f10x_pwr.c **** 
 252:stm_lib/src/stm32f10x_pwr.c **** /**
 253:stm_lib/src/stm32f10x_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 254:stm_lib/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 255:stm_lib/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 256:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 257:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 258:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_PVDO: PVD Output
ARM GAS  /tmp/cc1QqX1z.s 			page 16


 259:stm_lib/src/stm32f10x_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 260:stm_lib/src/stm32f10x_pwr.c ****   */
 261:stm_lib/src/stm32f10x_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 262:stm_lib/src/stm32f10x_pwr.c **** {
 301              		.loc 1 262 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305              		@ link register save eliminated.
 306              	.LVL13:
 263:stm_lib/src/stm32f10x_pwr.c ****   FlagStatus bitstatus = RESET;
 264:stm_lib/src/stm32f10x_pwr.c ****   /* Check the parameters */
 265:stm_lib/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 266:stm_lib/src/stm32f10x_pwr.c ****   
 267:stm_lib/src/stm32f10x_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 307              		.loc 1 267 0
 308 0000 034B     		ldr	r3, .L28
 309 0002 5B68     		ldr	r3, [r3, #4]
 310 0004 0342     		tst	r3, r0
 311 0006 01D1     		bne	.L27
 268:stm_lib/src/stm32f10x_pwr.c ****   {
 269:stm_lib/src/stm32f10x_pwr.c ****     bitstatus = SET;
 270:stm_lib/src/stm32f10x_pwr.c ****   }
 271:stm_lib/src/stm32f10x_pwr.c ****   else
 272:stm_lib/src/stm32f10x_pwr.c ****   {
 273:stm_lib/src/stm32f10x_pwr.c ****     bitstatus = RESET;
 312              		.loc 1 273 0
 313 0008 0020     		movs	r0, #0
 314              	.LVL14:
 274:stm_lib/src/stm32f10x_pwr.c ****   }
 275:stm_lib/src/stm32f10x_pwr.c ****   /* Return the flag status */
 276:stm_lib/src/stm32f10x_pwr.c ****   return bitstatus;
 277:stm_lib/src/stm32f10x_pwr.c **** }
 315              		.loc 1 277 0
 316 000a 7047     		bx	lr
 317              	.LVL15:
 318              	.L27:
 269:stm_lib/src/stm32f10x_pwr.c ****   }
 319              		.loc 1 269 0
 320 000c 0120     		movs	r0, #1
 321              	.LVL16:
 322 000e 7047     		bx	lr
 323              	.L29:
 324              		.align	2
 325              	.L28:
 326 0010 00700040 		.word	1073770496
 327              		.cfi_endproc
 328              	.LFE63:
 330              		.section	.text.PWR_ClearFlag,"ax",%progbits
 331              		.align	1
 332              		.global	PWR_ClearFlag
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 336              		.fpu softvfp
 338              	PWR_ClearFlag:
 339              	.LFB64:
ARM GAS  /tmp/cc1QqX1z.s 			page 17


 278:stm_lib/src/stm32f10x_pwr.c **** 
 279:stm_lib/src/stm32f10x_pwr.c **** /**
 280:stm_lib/src/stm32f10x_pwr.c ****   * @brief  Clears the PWR's pending flags.
 281:stm_lib/src/stm32f10x_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 282:stm_lib/src/stm32f10x_pwr.c ****   *   This parameter can be one of the following values:
 283:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_WU: Wake Up flag
 284:stm_lib/src/stm32f10x_pwr.c ****   *     @arg PWR_FLAG_SB: StandBy flag
 285:stm_lib/src/stm32f10x_pwr.c ****   * @retval None
 286:stm_lib/src/stm32f10x_pwr.c ****   */
 287:stm_lib/src/stm32f10x_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 288:stm_lib/src/stm32f10x_pwr.c **** {
 340              		.loc 1 288 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344              		@ link register save eliminated.
 345              	.LVL17:
 289:stm_lib/src/stm32f10x_pwr.c ****   /* Check the parameters */
 290:stm_lib/src/stm32f10x_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 291:stm_lib/src/stm32f10x_pwr.c ****          
 292:stm_lib/src/stm32f10x_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 346              		.loc 1 292 0
 347 0000 024A     		ldr	r2, .L31
 348 0002 1368     		ldr	r3, [r2]
 349 0004 43EA8000 		orr	r0, r3, r0, lsl #2
 350              	.LVL18:
 351 0008 1060     		str	r0, [r2]
 352 000a 7047     		bx	lr
 353              	.L32:
 354              		.align	2
 355              	.L31:
 356 000c 00700040 		.word	1073770496
 357              		.cfi_endproc
 358              	.LFE64:
 360              		.text
 361              	.Letext0:
 362              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 363              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 364              		.file 5 "cmsis/core_cm3.h"
 365              		.file 6 "cmsis_boot/system_stm32f10x.h"
 366              		.file 7 "stm_lib/inc/stm32f10x.h"
 367              		.file 8 "stm_lib/inc/stm32f10x_rcc.h"
ARM GAS  /tmp/cc1QqX1z.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_pwr.c
     /tmp/cc1QqX1z.s:16     .text.PWR_DeInit:0000000000000000 $t
     /tmp/cc1QqX1z.s:23     .text.PWR_DeInit:0000000000000000 PWR_DeInit
     /tmp/cc1QqX1z.s:50     .text.PWR_BackupAccessCmd:0000000000000000 $t
     /tmp/cc1QqX1z.s:57     .text.PWR_BackupAccessCmd:0000000000000000 PWR_BackupAccessCmd
     /tmp/cc1QqX1z.s:72     .text.PWR_BackupAccessCmd:0000000000000008 $d
     /tmp/cc1QqX1z.s:77     .text.PWR_PVDCmd:0000000000000000 $t
     /tmp/cc1QqX1z.s:84     .text.PWR_PVDCmd:0000000000000000 PWR_PVDCmd
     /tmp/cc1QqX1z.s:99     .text.PWR_PVDCmd:0000000000000008 $d
     /tmp/cc1QqX1z.s:104    .text.PWR_PVDLevelConfig:0000000000000000 $t
     /tmp/cc1QqX1z.s:111    .text.PWR_PVDLevelConfig:0000000000000000 PWR_PVDLevelConfig
     /tmp/cc1QqX1z.s:135    .text.PWR_PVDLevelConfig:0000000000000010 $d
     /tmp/cc1QqX1z.s:140    .text.PWR_WakeUpPinCmd:0000000000000000 $t
     /tmp/cc1QqX1z.s:147    .text.PWR_WakeUpPinCmd:0000000000000000 PWR_WakeUpPinCmd
     /tmp/cc1QqX1z.s:162    .text.PWR_WakeUpPinCmd:0000000000000008 $d
     /tmp/cc1QqX1z.s:167    .text.PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/cc1QqX1z.s:174    .text.PWR_EnterSTOPMode:0000000000000000 PWR_EnterSTOPMode
     /tmp/cc1QqX1z.s:235    .text.PWR_EnterSTOPMode:000000000000002c $d
     /tmp/cc1QqX1z.s:243    .text.PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/cc1QqX1z.s:250    .text.PWR_EnterSTANDBYMode:0000000000000000 PWR_EnterSTANDBYMode
     /tmp/cc1QqX1z.s:284    .text.PWR_EnterSTANDBYMode:0000000000000020 $d
     /tmp/cc1QqX1z.s:292    .text.PWR_GetFlagStatus:0000000000000000 $t
     /tmp/cc1QqX1z.s:299    .text.PWR_GetFlagStatus:0000000000000000 PWR_GetFlagStatus
     /tmp/cc1QqX1z.s:326    .text.PWR_GetFlagStatus:0000000000000010 $d
     /tmp/cc1QqX1z.s:331    .text.PWR_ClearFlag:0000000000000000 $t
     /tmp/cc1QqX1z.s:338    .text.PWR_ClearFlag:0000000000000000 PWR_ClearFlag
     /tmp/cc1QqX1z.s:356    .text.PWR_ClearFlag:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
